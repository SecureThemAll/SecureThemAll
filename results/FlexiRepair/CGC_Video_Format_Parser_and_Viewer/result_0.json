{
  "repair_begin": "2021-05-07 18:56:07.966404",
  "repair_end": "2021-05-07 19:52:40.626556",
  "patches": [
    {
      "target_file": "src/parseCVF.i",
      "fix": "",
      "edits": [
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-15235-e56f17-parseCVF.c\n@@ -35,7 +35,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \t\treturn 0;\n \t}\n \n-\twhile ( bytesRead < length ) {\n+\twhile (bytesRead <= length) {\n \t\tcount = 0;\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n@@ -54,7 +54,7 @@ void cgc_freeCVF( pcvf cvf )\n \t\treturn;\n \t}\n \n-\twhile ( index < 8 ) {\n+\twhile (index <= 8) {\n \t\tif ( cvf->pds[index].pixelArray != NULL ) {\n \t\t\tcgc_free( cvf->pds[index].pixelArray);\n \t\t\tcvf->pds[index].pixelArray = NULL;\n@@ -65,7 +65,7 @@ void cgc_freeCVF( pcvf cvf )\n \n \tif ( cvf->renderedFrames != NULL ) {\n \t\tindex = 0;\n-\t\twhile ( index < cvf->rCount ) {\n+\t\twhile (index <= cvf->rCount) {\n \t\t\tif ( cvf->renderedFrames[index] != NULL ) {\n \t\t\t\tif ( cvf->renderedFrames[index]->image != NULL ) {\n \t\t\t\t\tcgc_free( cvf->renderedFrames[index]->image);\n@@ -121,7 +121,7 @@ int cgc_playVideo( pcvf cvf )\n \t\treturn 0;\n \t}\n \n-\twhile ( index < cvf->rCount ) {\n+\twhile (index <= cvf->rCount) {\n \t\trf = cvf->renderedFrames[index];\n \n \t\tif ( rf == NULL ) {\n@@ -337,7 +337,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\tcgc_memset( newFrame->image, 0x20, length );\n \n \t\txbits = 0;\n-\t\twhile ( xbits < pixel_count ) {\n+\t\twhile (xbits <= pixel_count) {\n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n \t\t\t\tcgc_free(newFrame->image);\n \t\t\t\tnewFrame->image = NULL;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-17557-3a094e-parseCVF.c\n@@ -32,7 +32,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \tunsigned char *tbuff = (unsigned char *)outdata;\n \n \tif ( outdata == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \twhile ( bytesRead < length ) {\n@@ -40,7 +40,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Read fail\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \t\tbytesRead += count;\n \t}\n@@ -98,11 +98,11 @@ int cgc_playVideo( pcvf cvf )\n \tcgc_size_t count = 0;\n \n \tif ( cvf == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( cvf->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tlength = cvf->width * cvf->height;\n@@ -118,14 +118,14 @@ int cgc_playVideo( pcvf cvf )\n \t}\n \n \twhile ( cgc_receiveWrapper( &tb, 1 ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \twhile ( index < cvf->rCount ) {\n \t\trf = cvf->renderedFrames[index];\n \n \t\tif ( rf == NULL ) {\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \n \t\tfor (int i = 0; i < length; i++) {\n@@ -187,30 +187,30 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tunsigned int pixel_bits = 0;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Test that header has been parsed\n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n #ifdef PATCHED\n \t/// Ensure that we have not passed the specified number of frames\n \tif ( pNewImage->frameCount <= pNewImage->rCount ) {\n \t\tcgc_printf(\"[ERROR] Too many frames\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n #endif\n \n \t/// First 8 bits of each frame is a flag field.\n \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Bit 7 indicates full frame or individual pixels\n@@ -229,14 +229,14 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// The first frame must be a full frame\n \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// If using a custom dictionary ensure that the dictionary has chars\n \tif ( pixel_dict == 0 ) {\n \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \n \t\t/// Setup the pixel dictionary\n@@ -280,7 +280,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tnewFrame = cgc_malloc( sizeof(frame) );\n \n \tif ( newFrame == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tlength = pNewImage->height * pNewImage->width;\n@@ -292,7 +292,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tif ( newFrame->image == NULL ) {\n \t\tcgc_free(newFrame);\n \t\tnewFrame = NULL;\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// If the frame type is incremental then the number of pixels\n@@ -310,7 +310,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \n \t\tif ( pixel_count == 0 ) {\n@@ -319,7 +319,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \n \t\t/// calculate the index length\n@@ -343,7 +343,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t\t}\n \n \t\t\tif ( ybits > dictionary->charCount ) {\n@@ -352,7 +352,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t\t}\n \n \t\t\t/// Set the frame image data\n@@ -373,7 +373,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \n \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n@@ -389,7 +389,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t\t}\n \n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n@@ -398,7 +398,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t\t}\n \n \n@@ -408,7 +408,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t\t}\n \n \t\t\tif ( ybits >= dictionary->charCount ) {\n@@ -417,7 +417,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t\t}\n \n \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n@@ -439,7 +439,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \t}\n \n@@ -459,26 +459,26 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tchar *pixelArray = NULL;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( index < 0 || index > 7 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// If the pixel dictionary has already been specified then fail\n \tif ( pNewImage->pds[index].charCount != 0 ) {\n \t\tcgc_printf(\"[ERROR] Only one type %d pixel allowed.\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Read the 8 bit count field\n \tif ( cgc_readBits( pbs, 8, &pixelCount) == 0 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( pixelCount == 0 ) {\n@@ -489,7 +489,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tpixelArray = cgc_malloc( pixelCount + 1 );\n \n \tif (pixelArray == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tcgc_memset( pixelArray, 0, pixelCount + 1 );\n@@ -500,7 +500,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\t\tcgc_printf(\"[ERROR] Failed to read custom pixel dictionary\\n\");\n \t\t\tcgc_free(pixelArray);\n \t\t\tpixelArray = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \n \t\tpixelArray[i] = (unsigned char)(t&0xff);\n@@ -523,32 +523,32 @@ int cgc_parseCVFDescription( pBitStream\n \tunsigned int t;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Due to the later check it should be impossible to have multiple\n \t///\tdescription sections of non-zero length\n \tif ( pNewImage->desc[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Read the description length\n \tif ( cgc_readBits( pbs, 8, &descLength) == 0 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( descLength > 255 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Read the description data\n \tfor( index = 0; index < descLength; index++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \n \t\tpNewImage->desc[index] = (char)(t&0xff);\n@@ -561,7 +561,7 @@ int cgc_parseCVFDescription( pBitStream\n \n \t\tif ( !cgc_isalpha( c ) && !cgc_isdigit( c ) && !cgc_isspace( c ) ) {\n \t\t\tcgc_printf(\"[ERROR] Invalid character in description\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \t}\n \n@@ -574,27 +574,27 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tunsigned int t = 0;\n \n \tif ( pbs == NULL || pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// If the name has already been cgc_read then error out\n \tif ( pNewImage->name[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// First 8 bits are name length\n \tif ( cgc_readBits( pbs, 8, &nameLength) == 0 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Last byte must be a null so a max of 255 bytes\n \tif ( nameLength > 255 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tfor ( int i = 0; i < nameLength; i++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \n \t\tpNewImage->name[i] = (char)(t&0xff);\n@@ -605,7 +605,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tfor ( int i = 0; i < nameLength; i++) {\n \t\tif ( !cgc_isascii( pNewImage->name[i] ) ){\n \t\t\tcgc_printf(\"[ERROR] Invalid value in name field\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn ZEND_HASH_APPLY_KEEP;\n \t\t}\n \t}\n \n@@ -615,11 +615,11 @@ int cgc_parseCVFName( pBitStream pbs, pc\n int cgc_parseCVFHeader( pBitStream pbs, pcvf pNewImage )\n {\n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// A 0 height is not allowed so if the current value\n@@ -627,63 +627,63 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t/// Multiple headers are not permitted so error out\n \tif ( pNewImage->height != 0 ) {\n \t\tcgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Read 8 bits of height\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->height) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Maximum height is 35 characters\n \tif ( pNewImage->height > 35 ) {\n \t\tcgc_printf(\"[ERROR] Height must be less than 35\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Read 8 bits of width\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->width) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tif ( pNewImage->width == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Maximum width is 128 characters\n \tif ( pNewImage->width > 128 ) {\n \t\tcgc_printf(\"[ERROR] Width must be less than 128\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Read 16 Bits frame count\n \tif ( cgc_readBits( pbs, 16, &(pNewImage->frameCount) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Maximum frame count is 2048\n \tif ( pNewImage->frameCount > 2048 ) {\n \t\tcgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Zero frame count is not permitted\n \tif ( pNewImage->frameCount == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \t/// Allocate frame structure pointer array\n \tpNewImage->renderedFrames = cgc_malloc( sizeof( pframe ) * pNewImage->frameCount);\n \n \tif ( pNewImage->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\treturn ZEND_HASH_APPLY_KEEP;\n \t}\n \n \tcgc_memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-17598-cf70f2-parseCVF.c\n@@ -733,7 +733,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tbreak;\n+\t\t\t\tfatalx(\"send_update: unknown af\");\n \t\t\tcase 0x2222:\n \t\t\t\tif ( cgc_parseCVFName( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n@@ -741,7 +741,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tbreak;\n+\t\t\t\tfatalx(\"send_update: unknown af\");\n \t\t\tcase 0x3333:\n \t\t\t\tif ( cgc_parseCVFDescription( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage);\n@@ -749,7 +749,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tbreak;\n+\t\t\t\tfatalx(\"send_update: unknown af\");\n \t\t\tcase 0x4444:\n \t\t\tcase 0x4445:\n \t\t\tcase 0x4446:\n@@ -766,7 +766,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tbreak;\n+\t\t\t\tfatalx(\"send_update: unknown af\");\n \t\t\tcase 0x5555:\n \n \t\t\t\tif ( cgc_parseCVFFrame( pbs, NewImage ) == 0 ) {\n@@ -775,11 +775,11 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tbreak;\n+\t\t\t\tfatalx(\"send_update: unknown af\");\n \t\t\tdefault:\n \t\t\t\tcgc_printf(\"[ERROR] Invalid section type: $d\\n\", tdata);\n \t\t\t\treturn;\n-\t\t\t\tbreak;\n+\t\t\t\tfatalx(\"send_update: unknown af\");\n \n \t\t}\n \t\ttdata = 0;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-21450-608f24-parseCVF.c\n@@ -546,7 +546,7 @@ int cgc_parseCVFDescription( pBitStream\n \t}\n \n \t/// Read the description data\n-\tfor( index = 0; index < descLength; index++ ) {\n+\tfor (index = 0; index < devcnt; index++) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n \t\t\treturn 0;\n \t\t}\n@@ -556,7 +556,7 @@ int cgc_parseCVFDescription( pBitStream\n \t}\n \n \t/// Ensure that the data is valid\n-\tfor( index = 0; index < descLength; index++ ) {\n+\tfor (index = 0; index < devcnt; index++) {\n \t\tc = pNewImage->desc[index];\n \n \t\tif ( !cgc_isalpha( c ) && !cgc_isdigit( c ) && !cgc_isspace( c ) ) {\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-21501-f9e83e-parseCVF.c\n@@ -208,11 +208,6 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t}\n #endif\n \n-\t/// First 8 bits of each frame is a flag field.\n-\tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n-\t\treturn 0;\n-\t}\n-\n \t/// Bit 7 indicates full frame or individual pixels\n \tframe_type = (flag >> 7) & 0x1;\n \n@@ -476,11 +471,6 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\treturn 0;\n \t}\n \n-\t/// Read the 8 bit count field\n-\tif ( cgc_readBits( pbs, 8, &pixelCount) == 0 ) {\n-\t\treturn 0;\n-\t}\n-\n \tif ( pixelCount == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length pixel dictionary not allowed.\\n\");\n \t\treturn pixelCount;\n@@ -536,21 +526,12 @@ int cgc_parseCVFDescription( pBitStream\n \t\treturn 0;\n \t}\n \n-\t/// Read the description length\n-\tif ( cgc_readBits( pbs, 8, &descLength) == 0 ) {\n-\t\treturn 0;\n-\t}\n-\n \tif ( descLength > 255 ) {\n \t\treturn 0;\n \t}\n \n \t/// Read the description data\n \tfor( index = 0; index < descLength; index++ ) {\n-\t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n-\t\t}\n-\n \t\tpNewImage->desc[index] = (char)(t&0xff);\n \t\tt = 0;\n \t}\n@@ -582,21 +563,12 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t\treturn 0;\n \t}\n \n-\t/// First 8 bits are name length\n-\tif ( cgc_readBits( pbs, 8, &nameLength) == 0 ) {\n-\t\treturn 0;\n-\t}\n-\n \t/// Last byte must be a null so a max of 255 bytes\n \tif ( nameLength > 255 ) {\n \t\treturn 0;\n \t}\n \n \tfor ( int i = 0; i < nameLength; i++ ) {\n-\t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n-\t\t}\n-\n \t\tpNewImage->name[i] = (char)(t&0xff);\n \t\tt = 0;\n \t}\n@@ -630,11 +602,6 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t\treturn 0;\n \t}\n \n-\t/// Read 8 bits of height\n-\tif ( cgc_readBits( pbs, 8, &(pNewImage->height) ) == 0 ) {\n-\t\treturn 0;\n-\t}\n-\n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n \t\treturn 0;\n@@ -646,11 +613,6 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t\treturn 0;\n \t}\n \n-\t/// Read 8 bits of width\n-\tif ( cgc_readBits( pbs, 8, &(pNewImage->width) ) == 0 ) {\n-\t\treturn 0;\n-\t}\n-\n \tif ( pNewImage->width == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n \t\treturn 0;\n@@ -662,11 +624,6 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t\treturn 0;\n \t}\n \n-\t/// Read 16 Bits frame count\n-\tif ( cgc_readBits( pbs, 16, &(pNewImage->frameCount) ) == 0 ) {\n-\t\treturn 0;\n-\t}\n-\n \t/// Maximum frame count is 2048\n \tif ( pNewImage->frameCount > 2048 ) {\n \t\tcgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-24327-2f7aa2-parseCVF.c\n@@ -546,7 +546,7 @@ int cgc_parseCVFDescription( pBitStream\n \t}\n \n \t/// Read the description data\n-\tfor( index = 0; index < descLength; index++ ) {\n+\tfor (index = 1; index <= descLength; index++) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n \t\t\treturn 0;\n \t\t}\n@@ -556,7 +556,7 @@ int cgc_parseCVFDescription( pBitStream\n \t}\n \n \t/// Ensure that the data is valid\n-\tfor( index = 0; index < descLength; index++ ) {\n+\tfor (index = 1; index <= descLength; index++) {\n \t\tc = pNewImage->desc[index];\n \n \t\tif ( !cgc_isalpha( c ) && !cgc_isdigit( c ) && !cgc_isspace( c ) ) {\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-23123-722f9e-parseCVF.c\n@@ -36,7 +36,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \t}\n \n \twhile ( bytesRead < length ) {\n-\t\tcount = 0;\n+\t\tcount = -1;\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Read fail\\n\");\n@@ -58,20 +58,20 @@ void cgc_freeCVF( pcvf cvf )\n \t\tif ( cvf->pds[index].pixelArray != NULL ) {\n \t\t\tcgc_free( cvf->pds[index].pixelArray);\n \t\t\tcvf->pds[index].pixelArray = NULL;\n-\t\t\tcvf->pds[index].charCount = 0;\n+\t\t\tcvf->pds[index].charCount = -1;\n \t\t}\t\n \t\tindex++;\n \t}\n \n \tif ( cvf->renderedFrames != NULL ) {\n-\t\tindex = 0;\n+\t\tindex = -1;\n \t\twhile ( index < cvf->rCount ) {\n \t\t\tif ( cvf->renderedFrames[index] != NULL ) {\n \t\t\t\tif ( cvf->renderedFrames[index]->image != NULL ) {\n \t\t\t\t\tcgc_free( cvf->renderedFrames[index]->image);\n \t\t\t\t\tcvf->renderedFrames[index]->image = NULL;\n-\t\t\t\t\tcvf->renderedFrames[index]->height = 0;\n-\t\t\t\t\tcvf->renderedFrames[index]->width = 0;\n+\t\t\t\t\tcvf->renderedFrames[index]->height = -1;\n+\t\t\t\t\tcvf->renderedFrames[index]->width = -1;\n \t\t\t\t}\n \t\t\t\tcgc_free(cvf->renderedFrames[index]);\n \t\t\t\tcvf->renderedFrames[index] = NULL;\n@@ -300,7 +300,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t///\tfloor of cgc_log2( height * width )\n \tif ( frame_type == 1 ) {\n \n-\t\tpixel_count = 0;\n+\t\tpixel_count = -1;\n \n \t\t/// I do not subtract one here because it is not 0 indexed\n \t\tpixel_index_length = cgc_bitsNeeded( length );\n@@ -336,7 +336,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t/// Set the base image to all spaces\n \t\tcgc_memset( newFrame->image, 0x20, length );\n \n-\t\txbits = 0;\n+\t\txbits = -1;\n \t\twhile ( xbits < pixel_count ) {\n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n \t\t\t\tcgc_free(newFrame->image);\n@@ -359,7 +359,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n \n \t\t\t/// Clear the var\n-\t\t\tybits = 0;\n+\t\t\tybits = -1;\n \t\t\txbits++;\n \t\t}\n \n@@ -380,8 +380,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \n \t\t/// Read index and then pixel\n \t\tfor ( int i = 0; i < pixel_count; i++ ) {\n-\t\t\txbits = 0;\n-\t\t\tybits = 0;\n+\t\t\txbits = -1;\n+\t\t\tybits = -1;\n \n \t\t\tif ( cgc_readBits( pbs, pixel_count_bits, &xbits) == 0 ) {\n \t\t\t\tcgc_free( newFrame->image);\n@@ -504,7 +504,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\t}\n \n \t\tpixelArray[i] = (unsigned char)(t&0xff);\n-\t\tt = 0;\n+\t\tt = -1;\n \t}\n \n \tcgc_memset( &pNewImage->pds[index], 0, sizeof(pixelDict) );\n@@ -552,7 +552,7 @@ int cgc_parseCVFDescription( pBitStream\n \t\t}\n \n \t\tpNewImage->desc[index] = (char)(t&0xff);\n-\t\tt = 0;\n+\t\tt = -1;\n \t}\n \n \t/// Ensure that the data is valid\n@@ -598,7 +598,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t\t}\n \n \t\tpNewImage->name[i] = (char)(t&0xff);\n-\t\tt = 0;\n+\t\tt = -1;\n \t}\n \n \t/// Ensure valid characters in the name field\n@@ -722,7 +722,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t///\tDepending on this value the proper function is called to cgc_read and\n \t///\tparse the data.\n \t/// The loop stops when there is nothing left to cgc_read.\n-\ttdata = 0;\n+\ttdata = -1;\n \n \twhile( cgc_readBits( pbs, 16, &tdata) != 0 ) {\n \t\tswitch( tdata ) {\n@@ -782,7 +782,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tbreak;\n \n \t\t}\n-\t\ttdata = 0;\n+\t\ttdata = -1;\n \n \t}\n \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-11025-af292f-parseCVF.c\n@@ -32,7 +32,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \tunsigned char *tbuff = (unsigned char *)outdata;\n \n \tif ( outdata == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \twhile ( bytesRead < length ) {\n@@ -40,7 +40,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Read fail\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \t\tbytesRead += count;\n \t}\n@@ -98,11 +98,11 @@ int cgc_playVideo( pcvf cvf )\n \tcgc_size_t count = 0;\n \n \tif ( cvf == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( cvf->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tlength = cvf->width * cvf->height;\n@@ -118,14 +118,14 @@ int cgc_playVideo( pcvf cvf )\n \t}\n \n \twhile ( cgc_receiveWrapper( &tb, 1 ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \twhile ( index < cvf->rCount ) {\n \t\trf = cvf->renderedFrames[index];\n \n \t\tif ( rf == NULL ) {\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \n \t\tfor (int i = 0; i < length; i++) {\n@@ -187,30 +187,30 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tunsigned int pixel_bits = 0;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Test that header has been parsed\n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n #ifdef PATCHED\n \t/// Ensure that we have not passed the specified number of frames\n \tif ( pNewImage->frameCount <= pNewImage->rCount ) {\n \t\tcgc_printf(\"[ERROR] Too many frames\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n #endif\n \n \t/// First 8 bits of each frame is a flag field.\n \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Bit 7 indicates full frame or individual pixels\n@@ -229,14 +229,14 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// The first frame must be a full frame\n \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// If using a custom dictionary ensure that the dictionary has chars\n \tif ( pixel_dict == 0 ) {\n \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \n \t\t/// Setup the pixel dictionary\n@@ -280,7 +280,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tnewFrame = cgc_malloc( sizeof(frame) );\n \n \tif ( newFrame == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tlength = pNewImage->height * pNewImage->width;\n@@ -292,7 +292,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tif ( newFrame->image == NULL ) {\n \t\tcgc_free(newFrame);\n \t\tnewFrame = NULL;\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// If the frame type is incremental then the number of pixels\n@@ -310,7 +310,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \n \t\tif ( pixel_count == 0 ) {\n@@ -319,7 +319,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \n \t\t/// calculate the index length\n@@ -343,7 +343,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn -1;\n \t\t\t}\n \n \t\t\tif ( ybits > dictionary->charCount ) {\n@@ -352,7 +352,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn -1;\n \t\t\t}\n \n \t\t\t/// Set the frame image data\n@@ -373,7 +373,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \n \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n@@ -389,7 +389,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\treturn -1;\n \t\t\t}\n \n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n@@ -398,7 +398,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\treturn -1;\n \t\t\t}\n \n \n@@ -408,7 +408,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn -1;\n \t\t\t}\n \n \t\t\tif ( ybits >= dictionary->charCount ) {\n@@ -417,7 +417,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn -1;\n \t\t\t}\n \n \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n@@ -439,7 +439,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \t}\n \n@@ -459,26 +459,26 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tchar *pixelArray = NULL;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( index < 0 || index > 7 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// If the pixel dictionary has already been specified then fail\n \tif ( pNewImage->pds[index].charCount != 0 ) {\n \t\tcgc_printf(\"[ERROR] Only one type %d pixel allowed.\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Read the 8 bit count field\n \tif ( cgc_readBits( pbs, 8, &pixelCount) == 0 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( pixelCount == 0 ) {\n@@ -489,7 +489,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tpixelArray = cgc_malloc( pixelCount + 1 );\n \n \tif (pixelArray == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tcgc_memset( pixelArray, 0, pixelCount + 1 );\n@@ -500,7 +500,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\t\tcgc_printf(\"[ERROR] Failed to read custom pixel dictionary\\n\");\n \t\t\tcgc_free(pixelArray);\n \t\t\tpixelArray = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \n \t\tpixelArray[i] = (unsigned char)(t&0xff);\n@@ -523,32 +523,32 @@ int cgc_parseCVFDescription( pBitStream\n \tunsigned int t;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Due to the later check it should be impossible to have multiple\n \t///\tdescription sections of non-zero length\n \tif ( pNewImage->desc[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Read the description length\n \tif ( cgc_readBits( pbs, 8, &descLength) == 0 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( descLength > 255 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Read the description data\n \tfor( index = 0; index < descLength; index++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \n \t\tpNewImage->desc[index] = (char)(t&0xff);\n@@ -561,7 +561,7 @@ int cgc_parseCVFDescription( pBitStream\n \n \t\tif ( !cgc_isalpha( c ) && !cgc_isdigit( c ) && !cgc_isspace( c ) ) {\n \t\t\tcgc_printf(\"[ERROR] Invalid character in description\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \t}\n \n@@ -574,27 +574,27 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tunsigned int t = 0;\n \n \tif ( pbs == NULL || pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// If the name has already been cgc_read then error out\n \tif ( pNewImage->name[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// First 8 bits are name length\n \tif ( cgc_readBits( pbs, 8, &nameLength) == 0 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Last byte must be a null so a max of 255 bytes\n \tif ( nameLength > 255 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tfor ( int i = 0; i < nameLength; i++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \n \t\tpNewImage->name[i] = (char)(t&0xff);\n@@ -605,7 +605,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tfor ( int i = 0; i < nameLength; i++) {\n \t\tif ( !cgc_isascii( pNewImage->name[i] ) ){\n \t\t\tcgc_printf(\"[ERROR] Invalid value in name field\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn -1;\n \t\t}\n \t}\n \n@@ -615,11 +615,11 @@ int cgc_parseCVFName( pBitStream pbs, pc\n int cgc_parseCVFHeader( pBitStream pbs, pcvf pNewImage )\n {\n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// A 0 height is not allowed so if the current value\n@@ -627,63 +627,63 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t/// Multiple headers are not permitted so error out\n \tif ( pNewImage->height != 0 ) {\n \t\tcgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Read 8 bits of height\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->height) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Maximum height is 35 characters\n \tif ( pNewImage->height > 35 ) {\n \t\tcgc_printf(\"[ERROR] Height must be less than 35\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Read 8 bits of width\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->width) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tif ( pNewImage->width == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Maximum width is 128 characters\n \tif ( pNewImage->width > 128 ) {\n \t\tcgc_printf(\"[ERROR] Width must be less than 128\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Read 16 Bits frame count\n \tif ( cgc_readBits( pbs, 16, &(pNewImage->frameCount) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Maximum frame count is 2048\n \tif ( pNewImage->frameCount > 2048 ) {\n \t\tcgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Zero frame count is not permitted\n \tif ( pNewImage->frameCount == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \t/// Allocate frame structure pointer array\n \tpNewImage->renderedFrames = cgc_malloc( sizeof( pframe ) * pNewImage->frameCount);\n \n \tif ( pNewImage->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\treturn -1;\n \t}\n \n \tcgc_memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-19639-e1ea1b-parseCVF.c\n@@ -202,7 +202,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \n #ifdef PATCHED\n \t/// Ensure that we have not passed the specified number of frames\n-\tif ( pNewImage->frameCount <= pNewImage->rCount ) {\n+\tif (ntohs(pNewImage->frameCount) <= ntohs(pNewImage->rCount)) {\n \t\tcgc_printf(\"[ERROR] Too many frames\\n\");\n \t\treturn 0;\n \t}\n@@ -402,7 +402,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t}\n \n \n-\t\t\tif ( xbits >= length ) {\n+\t\t\tif (ntohs(length) <= ntohs(xbits)) {\n \t\t\t\tcgc_printf(\"[ERROR] Index out of image bounds\\n\");\n \t\t\t\tcgc_free(newFrame->image);\n \t\t\t\tnewFrame->image = NULL;\n@@ -411,7 +411,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\treturn 0;\n \t\t\t}\n \n-\t\t\tif ( ybits >= dictionary->charCount ) {\n+\t\t\tif (ntohs(dictionary->charCount) <= ntohs(ybits)) {\n \t\t\t\tcgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n \t\t\t\tcgc_free(newFrame->image);\n \t\t\t\tnewFrame->image = NULL;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-8728-31e240-parseCVF.c\n@@ -466,7 +466,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\treturn 0;\n \t}\n \n-\tif ( index < 0 || index > 7 ) {\n+\tif (index > 7) {\n \t\treturn 0;\n \t}\n \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-9950-6faf41-parseCVF.c\n@@ -154,7 +154,7 @@ unsigned int cgc_bitsNeeded( unsigned in\n \tunsigned int count = 0;\n \n \tif ( size == 0 ) {\n-\t\treturn 1;\n+\t\treturn (EINVAL);\n \t}\n \n \twhile ( size ) {\n@@ -449,7 +449,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// Increment the parsed frame count\n \tpNewImage->rCount++;\n \n-\treturn 1;\n+\treturn (EINVAL);\n }\n \n int cgc_parseCVFPixelDict( pBitStream pbs, pcvf pNewImage, int index )\n@@ -512,7 +512,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tpNewImage->pds[index].charCount = pixelCount;\n \tpNewImage->pds[index].pixelArray = pixelArray;\n \n-\treturn 1;\n+\treturn (EINVAL);\n }\n \n int cgc_parseCVFDescription( pBitStream pbs, pcvf pNewImage )\n@@ -565,7 +565,7 @@ int cgc_parseCVFDescription( pBitStream\n \t\t}\n \t}\n \n-\treturn 1;\n+\treturn (EINVAL);\n }\n \n int cgc_parseCVFName( pBitStream pbs, pcvf pNewImage )\n@@ -609,7 +609,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t\t}\n \t}\n \n-\treturn 1;\n+\treturn (EINVAL);\n }\n \n int cgc_parseCVFHeader( pBitStream pbs, pcvf pNewImage )\n@@ -688,7 +688,7 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \n \tcgc_memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); \n \n-\treturn 1;\n+\treturn (EINVAL);\n }\n \n void cgc_renderCVF( pBitStream pbs )\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-13120-0df343-parseCVF.c\n@@ -456,7 +456,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n {\n \tunsigned int pixelCount = 0;\n \tunsigned int t = 0;\n-\tchar *pixelArray = NULL;\n+\tchar *pixelArray = \"\";\n \n \tif ( pbs == NULL ) {\n \t\treturn 0;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-23638-17fedc-parseCVF.c\n@@ -35,7 +35,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \t\treturn 0;\n \t}\n \n-\twhile ( bytesRead < length ) {\n+\twhile (bytesRead < (size_t)length) {\n \t\tcount = 0;\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n@@ -54,7 +54,7 @@ void cgc_freeCVF( pcvf cvf )\n \t\treturn;\n \t}\n \n-\twhile ( index < 8 ) {\n+\twhile (index < (size_t)8) {\n \t\tif ( cvf->pds[index].pixelArray != NULL ) {\n \t\t\tcgc_free( cvf->pds[index].pixelArray);\n \t\t\tcvf->pds[index].pixelArray = NULL;\n@@ -65,7 +65,7 @@ void cgc_freeCVF( pcvf cvf )\n \n \tif ( cvf->renderedFrames != NULL ) {\n \t\tindex = 0;\n-\t\twhile ( index < cvf->rCount ) {\n+\t\twhile (index < (size_t)cvf->rCount) {\n \t\t\tif ( cvf->renderedFrames[index] != NULL ) {\n \t\t\t\tif ( cvf->renderedFrames[index]->image != NULL ) {\n \t\t\t\t\tcgc_free( cvf->renderedFrames[index]->image);\n@@ -121,7 +121,7 @@ int cgc_playVideo( pcvf cvf )\n \t\treturn 0;\n \t}\n \n-\twhile ( index < cvf->rCount ) {\n+\twhile (index < (size_t)cvf->rCount) {\n \t\trf = cvf->renderedFrames[index];\n \n \t\tif ( rf == NULL ) {\n@@ -337,7 +337,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\tcgc_memset( newFrame->image, 0x20, length );\n \n \t\txbits = 0;\n-\t\twhile ( xbits < pixel_count ) {\n+\t\twhile (xbits < (size_t)pixel_count) {\n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n \t\t\t\tcgc_free(newFrame->image);\n \t\t\t\tnewFrame->image = NULL;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-8402-95f8f4-parseCVF.c\n@@ -466,7 +466,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\treturn 0;\n \t}\n \n-\tif ( index < 0 || index > 7 ) {\n+\tif (index < 0 || index > (zend_long)7) {\n \t\treturn 0;\n \t}\n \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-11770-cc3643-parseCVF.c\n@@ -233,7 +233,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t}\n \n \t/// If using a custom dictionary ensure that the dictionary has chars\n-\tif ( pixel_dict == 0 ) {\n+\tif (pixel_dict % 0 == 0) {\n \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n \t\t\treturn 0;\n@@ -241,34 +241,40 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \n \t\t/// Setup the pixel dictionary\n \t\tdictionary = &(pNewImage->pds[custom_dict]);\n-\t} else if ( pixel_dict == 1 ) {\n-\t\tstandard_dictionary.charCount = 2;\n-\t\tstandard_dictionary.pixelArray = \" .\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 2 ) {\n-\t\tstandard_dictionary.charCount = 4;\n-\t\tstandard_dictionary.pixelArray = \" .|#\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 3 ) {\n-\t\tstandard_dictionary.charCount = 8;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 4 ) {\n-\t\tstandard_dictionary.charCount = 16;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 5 ) {\n-\t\tstandard_dictionary.charCount = 42;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 6 ) {\n-\t\tstandard_dictionary.charCount = 62;\n-\t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 7 ) {\n-\t\tstandard_dictionary.charCount = 0x5f;\n-\t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n-\t\tdictionary = &standard_dictionary;\n+\t} else {if (pixel_dict % 1 == 0) {\n+\t\t\tstandard_dictionary.charCount = 2;\n+\t\t\tstandard_dictionary.pixelArray = \" .\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else {if (pixel_dict % 2 == 0) {\n+\t\t\t\tstandard_dictionary.charCount = 4;\n+\t\t\t\tstandard_dictionary.pixelArray = \" .|#\";\n+\t\t\t\tdictionary = &standard_dictionary;\n+\t\t\t} else {if (pixel_dict % 3 == 0) {\n+\t\t\t\t\tstandard_dictionary.charCount = 8;\n+\t\t\t\t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n+\t\t\t\t\tdictionary = &standard_dictionary;\n+\t\t\t\t} else {if (pixel_dict % 4 == 0) {\n+\t\t\t\t\t\tstandard_dictionary.charCount = 16;\n+\t\t\t\t\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n+\t\t\t\t\t\tdictionary = &standard_dictionary;\n+\t\t\t\t\t} else {if (pixel_dict % 5 == 0) {\n+\t\t\t\t\t\t\tstandard_dictionary.charCount = 42;\n+\t\t\t\t\t\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n+\t\t\t\t\t\t\tdictionary = &standard_dictionary;\n+\t\t\t\t\t\t} else {if (pixel_dict % 6 == 0) {\n+\t\t\t\t\t\t\t\tstandard_dictionary.charCount = 62;\n+\t\t\t\t\t\t\t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\t\t\t\t\t\t\t\tdictionary = &standard_dictionary;\n+\t\t\t\t\t\t\t} else if ( pixel_dict == 7 ) {\n+\t\t\t\t\t\t\t\tstandard_dictionary.charCount = 0x5f;\n+\t\t\t\t\t\t\t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n+\t\t\t\t\t\t\t\tdictionary = &standard_dictionary;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \t}\n \n \t/// Calculate the length of each pixel in bits based upon the\n@@ -298,7 +304,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// If the frame type is incremental then the number of pixels\n \t///\tmust be specified. The bit length of pixel count is the\n \t///\tfloor of cgc_log2( height * width )\n-\tif ( frame_type == 1 ) {\n+\tif (frame_type % 1 == 0) {\n \n \t\tpixel_count = 0;\n \n@@ -332,7 +338,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// If frame type is 0 meaning a full frame then the index type does\n \t///\tnot matter since every pixel from left to right top to bottom\n \t///\tis required.\n-\tif ( frame_type == 0 ) {\n+\tif (frame_type % 0 == 0) {\n \t\t/// Set the base image to all spaces\n \t\tcgc_memset( newFrame->image, 0x20, length );\n \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-16044-c8b9e0-parseCVF.c\n@@ -466,7 +466,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\treturn 0;\n \t}\n \n-\tif ( index < 0 || index > 7 ) {\n+\tif (index > 7) {\n \t\treturn 0;\n \t}\n \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-20837-a128a3-parseCVF.c\n@@ -241,34 +241,35 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \n \t\t/// Setup the pixel dictionary\n \t\tdictionary = &(pNewImage->pds[custom_dict]);\n-\t} else if ( pixel_dict == 1 ) {\n-\t\tstandard_dictionary.charCount = 2;\n-\t\tstandard_dictionary.pixelArray = \" .\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 2 ) {\n-\t\tstandard_dictionary.charCount = 4;\n-\t\tstandard_dictionary.pixelArray = \" .|#\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 3 ) {\n-\t\tstandard_dictionary.charCount = 8;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 4 ) {\n-\t\tstandard_dictionary.charCount = 16;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 5 ) {\n-\t\tstandard_dictionary.charCount = 42;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 6 ) {\n-\t\tstandard_dictionary.charCount = 62;\n-\t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 7 ) {\n-\t\tstandard_dictionary.charCount = 0x5f;\n-\t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n-\t\tdictionary = &standard_dictionary;\n+\t} else {if (pixel_dict < 3) {\n+\t\t\tstandard_dictionary.charCount = 2;\n+\t\t\tstandard_dictionary.pixelArray = \" .\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 2 ) {\n+\t\t\tstandard_dictionary.charCount = 4;\n+\t\t\tstandard_dictionary.pixelArray = \" .|#\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 3 ) {\n+\t\t\tstandard_dictionary.charCount = 8;\n+\t\t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 4 ) {\n+\t\t\tstandard_dictionary.charCount = 16;\n+\t\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 5 ) {\n+\t\t\tstandard_dictionary.charCount = 42;\n+\t\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 6 ) {\n+\t\t\tstandard_dictionary.charCount = 62;\n+\t\t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 7 ) {\n+\t\t\tstandard_dictionary.charCount = 0x5f;\n+\t\t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t}\n \t}\n \n \t/// Calculate the length of each pixel in bits based upon the\n@@ -298,7 +299,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// If the frame type is incremental then the number of pixels\n \t///\tmust be specified. The bit length of pixel count is the\n \t///\tfloor of cgc_log2( height * width )\n-\tif ( frame_type == 1 ) {\n+\tif (frame_type < 3) {\n \n \t\tpixel_count = 0;\n \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-12412-154a73-parseCVF.c\n@@ -240,35 +240,35 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t}\n \n \t\t/// Setup the pixel dictionary\n-\t\tdictionary = &(pNewImage->pds[custom_dict]);\n+\t\tdictionary = (pNewImage->pds[custom_dict]);\n \t} else if ( pixel_dict == 1 ) {\n \t\tstandard_dictionary.charCount = 2;\n \t\tstandard_dictionary.pixelArray = \" .\";\n-\t\tdictionary = &standard_dictionary;\n+\t\tdictionary = standard_dictionary;\n \t} else if ( pixel_dict == 2 ) {\n \t\tstandard_dictionary.charCount = 4;\n \t\tstandard_dictionary.pixelArray = \" .|#\";\n-\t\tdictionary = &standard_dictionary;\n+\t\tdictionary = standard_dictionary;\n \t} else if ( pixel_dict == 3 ) {\n \t\tstandard_dictionary.charCount = 8;\n \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n-\t\tdictionary = &standard_dictionary;\n+\t\tdictionary = standard_dictionary;\n \t} else if ( pixel_dict == 4 ) {\n \t\tstandard_dictionary.charCount = 16;\n \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n-\t\tdictionary = &standard_dictionary;\n+\t\tdictionary = standard_dictionary;\n \t} else if ( pixel_dict == 5 ) {\n \t\tstandard_dictionary.charCount = 42;\n \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n-\t\tdictionary = &standard_dictionary;\n+\t\tdictionary = standard_dictionary;\n \t} else if ( pixel_dict == 6 ) {\n \t\tstandard_dictionary.charCount = 62;\n \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n-\t\tdictionary = &standard_dictionary;\n+\t\tdictionary = standard_dictionary;\n \t} else if ( pixel_dict == 7 ) {\n \t\tstandard_dictionary.charCount = 0x5f;\n \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n-\t\tdictionary = &standard_dictionary;\n+\t\tdictionary = standard_dictionary;\n \t}\n \n \t/// Calculate the length of each pixel in bits based upon the\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-9721-ec282e-parseCVF.c\n@@ -32,7 +32,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \tunsigned char *tbuff = (unsigned char *)outdata;\n \n \tif ( outdata == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \twhile ( bytesRead < length ) {\n@@ -40,7 +40,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Read fail\\n\");\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \t\tbytesRead += count;\n \t}\n@@ -98,11 +98,11 @@ int cgc_playVideo( pcvf cvf )\n \tcgc_size_t count = 0;\n \n \tif ( cvf == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( cvf->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tlength = cvf->width * cvf->height;\n@@ -118,14 +118,14 @@ int cgc_playVideo( pcvf cvf )\n \t}\n \n \twhile ( cgc_receiveWrapper( &tb, 1 ) == 0 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \twhile ( index < cvf->rCount ) {\n \t\trf = cvf->renderedFrames[index];\n \n \t\tif ( rf == NULL ) {\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \n \t\tfor (int i = 0; i < length; i++) {\n@@ -187,30 +187,30 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tunsigned int pixel_bits = 0;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Test that header has been parsed\n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n #ifdef PATCHED\n \t/// Ensure that we have not passed the specified number of frames\n \tif ( pNewImage->frameCount <= pNewImage->rCount ) {\n \t\tcgc_printf(\"[ERROR] Too many frames\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n #endif\n \n \t/// First 8 bits of each frame is a flag field.\n \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Bit 7 indicates full frame or individual pixels\n@@ -229,14 +229,14 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// The first frame must be a full frame\n \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// If using a custom dictionary ensure that the dictionary has chars\n \tif ( pixel_dict == 0 ) {\n \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \n \t\t/// Setup the pixel dictionary\n@@ -280,7 +280,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tnewFrame = cgc_malloc( sizeof(frame) );\n \n \tif ( newFrame == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tlength = pNewImage->height * pNewImage->width;\n@@ -292,7 +292,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tif ( newFrame->image == NULL ) {\n \t\tcgc_free(newFrame);\n \t\tnewFrame = NULL;\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// If the frame type is incremental then the number of pixels\n@@ -310,7 +310,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \n \t\tif ( pixel_count == 0 ) {\n@@ -319,7 +319,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \n \t\t/// calculate the index length\n@@ -343,7 +343,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\tno_draw = 1;\n \t\t\t}\n \n \t\t\tif ( ybits > dictionary->charCount ) {\n@@ -352,7 +352,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\tno_draw = 1;\n \t\t\t}\n \n \t\t\t/// Set the frame image data\n@@ -373,7 +373,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \n \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n@@ -389,7 +389,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\tno_draw = 1;\n \t\t\t}\n \n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n@@ -398,7 +398,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\tno_draw = 1;\n \t\t\t}\n \n \n@@ -408,7 +408,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\tno_draw = 1;\n \t\t\t}\n \n \t\t\tif ( ybits >= dictionary->charCount ) {\n@@ -417,7 +417,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\tno_draw = 1;\n \t\t\t}\n \n \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n@@ -439,7 +439,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \t}\n \n@@ -459,26 +459,26 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tchar *pixelArray = NULL;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( index < 0 || index > 7 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// If the pixel dictionary has already been specified then fail\n \tif ( pNewImage->pds[index].charCount != 0 ) {\n \t\tcgc_printf(\"[ERROR] Only one type %d pixel allowed.\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Read the 8 bit count field\n \tif ( cgc_readBits( pbs, 8, &pixelCount) == 0 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( pixelCount == 0 ) {\n@@ -489,7 +489,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tpixelArray = cgc_malloc( pixelCount + 1 );\n \n \tif (pixelArray == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tcgc_memset( pixelArray, 0, pixelCount + 1 );\n@@ -500,7 +500,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\t\tcgc_printf(\"[ERROR] Failed to read custom pixel dictionary\\n\");\n \t\t\tcgc_free(pixelArray);\n \t\t\tpixelArray = NULL;\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \n \t\tpixelArray[i] = (unsigned char)(t&0xff);\n@@ -523,32 +523,32 @@ int cgc_parseCVFDescription( pBitStream\n \tunsigned int t;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Due to the later check it should be impossible to have multiple\n \t///\tdescription sections of non-zero length\n \tif ( pNewImage->desc[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Read the description length\n \tif ( cgc_readBits( pbs, 8, &descLength) == 0 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( descLength > 255 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Read the description data\n \tfor( index = 0; index < descLength; index++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \n \t\tpNewImage->desc[index] = (char)(t&0xff);\n@@ -561,7 +561,7 @@ int cgc_parseCVFDescription( pBitStream\n \n \t\tif ( !cgc_isalpha( c ) && !cgc_isdigit( c ) && !cgc_isspace( c ) ) {\n \t\t\tcgc_printf(\"[ERROR] Invalid character in description\\n\");\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \t}\n \n@@ -574,27 +574,27 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tunsigned int t = 0;\n \n \tif ( pbs == NULL || pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// If the name has already been cgc_read then error out\n \tif ( pNewImage->name[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// First 8 bits are name length\n \tif ( cgc_readBits( pbs, 8, &nameLength) == 0 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Last byte must be a null so a max of 255 bytes\n \tif ( nameLength > 255 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tfor ( int i = 0; i < nameLength; i++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \n \t\tpNewImage->name[i] = (char)(t&0xff);\n@@ -605,7 +605,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tfor ( int i = 0; i < nameLength; i++) {\n \t\tif ( !cgc_isascii( pNewImage->name[i] ) ){\n \t\t\tcgc_printf(\"[ERROR] Invalid value in name field\\n\");\n-\t\t\treturn 0;\n+\t\t\tno_draw = 1;\n \t\t}\n \t}\n \n@@ -615,11 +615,11 @@ int cgc_parseCVFName( pBitStream pbs, pc\n int cgc_parseCVFHeader( pBitStream pbs, pcvf pNewImage )\n {\n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// A 0 height is not allowed so if the current value\n@@ -627,63 +627,63 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t/// Multiple headers are not permitted so error out\n \tif ( pNewImage->height != 0 ) {\n \t\tcgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Read 8 bits of height\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->height) ) == 0 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Maximum height is 35 characters\n \tif ( pNewImage->height > 35 ) {\n \t\tcgc_printf(\"[ERROR] Height must be less than 35\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Read 8 bits of width\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->width) ) == 0 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tif ( pNewImage->width == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Maximum width is 128 characters\n \tif ( pNewImage->width > 128 ) {\n \t\tcgc_printf(\"[ERROR] Width must be less than 128\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Read 16 Bits frame count\n \tif ( cgc_readBits( pbs, 16, &(pNewImage->frameCount) ) == 0 ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Maximum frame count is 2048\n \tif ( pNewImage->frameCount > 2048 ) {\n \t\tcgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Zero frame count is not permitted\n \tif ( pNewImage->frameCount == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \t/// Allocate frame structure pointer array\n \tpNewImage->renderedFrames = cgc_malloc( sizeof( pframe ) * pNewImage->frameCount);\n \n \tif ( pNewImage->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\tno_draw = 1;\n \t}\n \n \tcgc_memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-20696-5fa2a1-parseCVF.c\n@@ -603,7 +603,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \n \t/// Ensure valid characters in the name field\n \tfor ( int i = 0; i < nameLength; i++) {\n-\t\tif ( !cgc_isascii( pNewImage->name[i] ) ){\n+\t\tif (cgc_isascii(pNewImage->name[i]) == MAP_FAILED){\n \t\t\tcgc_printf(\"[ERROR] Invalid value in name field\\n\");\n \t\t\treturn 0;\n \t\t}\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-13974-d22845-parseCVF.c\n@@ -32,7 +32,8 @@ cgc_size_t cgc_receiveWrapper( void *out\n \tunsigned char *tbuff = (unsigned char *)outdata;\n \n \tif ( outdata == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \twhile ( bytesRead < length ) {\n@@ -40,7 +41,8 @@ cgc_size_t cgc_receiveWrapper( void *out\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Read fail\\n\");\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \t\tbytesRead += count;\n \t}\n@@ -98,11 +100,13 @@ int cgc_playVideo( pcvf cvf )\n \tcgc_size_t count = 0;\n \n \tif ( cvf == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( cvf->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tlength = cvf->width * cvf->height;\n@@ -118,14 +122,16 @@ int cgc_playVideo( pcvf cvf )\n \t}\n \n \twhile ( cgc_receiveWrapper( &tb, 1 ) == 0 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \twhile ( index < cvf->rCount ) {\n \t\trf = cvf->renderedFrames[index];\n \n \t\tif ( rf == NULL ) {\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \n \t\tfor (int i = 0; i < length; i++) {\n@@ -187,30 +193,35 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tunsigned int pixel_bits = 0;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Test that header has been parsed\n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n #ifdef PATCHED\n \t/// Ensure that we have not passed the specified number of frames\n \tif ( pNewImage->frameCount <= pNewImage->rCount ) {\n \t\tcgc_printf(\"[ERROR] Too many frames\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n #endif\n \n \t/// First 8 bits of each frame is a flag field.\n \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Bit 7 indicates full frame or individual pixels\n@@ -229,14 +240,16 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// The first frame must be a full frame\n \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// If using a custom dictionary ensure that the dictionary has chars\n \tif ( pixel_dict == 0 ) {\n \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \n \t\t/// Setup the pixel dictionary\n@@ -280,7 +293,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tnewFrame = cgc_malloc( sizeof(frame) );\n \n \tif ( newFrame == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tlength = pNewImage->height * pNewImage->width;\n@@ -292,7 +306,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tif ( newFrame->image == NULL ) {\n \t\tcgc_free(newFrame);\n \t\tnewFrame = NULL;\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// If the frame type is incremental then the number of pixels\n@@ -310,7 +325,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \n \t\tif ( pixel_count == 0 ) {\n@@ -319,7 +335,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \n \t\t/// calculate the index length\n@@ -343,7 +360,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\trestorescr(old);\n+\t\t\t\treturn ret;\n \t\t\t}\n \n \t\t\tif ( ybits > dictionary->charCount ) {\n@@ -352,7 +370,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\trestorescr(old);\n+\t\t\t\treturn ret;\n \t\t\t}\n \n \t\t\t/// Set the frame image data\n@@ -373,7 +392,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \n \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n@@ -389,7 +409,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\trestorescr(old);\n+\t\t\t\treturn ret;\n \t\t\t}\n \n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n@@ -398,7 +419,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\trestorescr(old);\n+\t\t\t\treturn ret;\n \t\t\t}\n \n \n@@ -408,7 +430,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\trestorescr(old);\n+\t\t\t\treturn ret;\n \t\t\t}\n \n \t\t\tif ( ybits >= dictionary->charCount ) {\n@@ -417,7 +440,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\trestorescr(old);\n+\t\t\t\treturn ret;\n \t\t\t}\n \n \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n@@ -439,7 +463,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \t}\n \n@@ -459,26 +484,31 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tchar *pixelArray = NULL;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( index < 0 || index > 7 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// If the pixel dictionary has already been specified then fail\n \tif ( pNewImage->pds[index].charCount != 0 ) {\n \t\tcgc_printf(\"[ERROR] Only one type %d pixel allowed.\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Read the 8 bit count field\n \tif ( cgc_readBits( pbs, 8, &pixelCount) == 0 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( pixelCount == 0 ) {\n@@ -489,7 +519,8 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tpixelArray = cgc_malloc( pixelCount + 1 );\n \n \tif (pixelArray == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tcgc_memset( pixelArray, 0, pixelCount + 1 );\n@@ -500,7 +531,8 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\t\tcgc_printf(\"[ERROR] Failed to read custom pixel dictionary\\n\");\n \t\t\tcgc_free(pixelArray);\n \t\t\tpixelArray = NULL;\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \n \t\tpixelArray[i] = (unsigned char)(t&0xff);\n@@ -523,32 +555,38 @@ int cgc_parseCVFDescription( pBitStream\n \tunsigned int t;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Due to the later check it should be impossible to have multiple\n \t///\tdescription sections of non-zero length\n \tif ( pNewImage->desc[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Read the description length\n \tif ( cgc_readBits( pbs, 8, &descLength) == 0 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( descLength > 255 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Read the description data\n \tfor( index = 0; index < descLength; index++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \n \t\tpNewImage->desc[index] = (char)(t&0xff);\n@@ -561,7 +599,8 @@ int cgc_parseCVFDescription( pBitStream\n \n \t\tif ( !cgc_isalpha( c ) && !cgc_isdigit( c ) && !cgc_isspace( c ) ) {\n \t\t\tcgc_printf(\"[ERROR] Invalid character in description\\n\");\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \t}\n \n@@ -574,27 +613,32 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tunsigned int t = 0;\n \n \tif ( pbs == NULL || pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// If the name has already been cgc_read then error out\n \tif ( pNewImage->name[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// First 8 bits are name length\n \tif ( cgc_readBits( pbs, 8, &nameLength) == 0 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Last byte must be a null so a max of 255 bytes\n \tif ( nameLength > 255 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tfor ( int i = 0; i < nameLength; i++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \n \t\tpNewImage->name[i] = (char)(t&0xff);\n@@ -605,7 +649,8 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tfor ( int i = 0; i < nameLength; i++) {\n \t\tif ( !cgc_isascii( pNewImage->name[i] ) ){\n \t\t\tcgc_printf(\"[ERROR] Invalid value in name field\\n\");\n-\t\t\treturn 0;\n+\t\t\trestorescr(old);\n+\t\t\treturn ret;\n \t\t}\n \t}\n \n@@ -615,11 +660,13 @@ int cgc_parseCVFName( pBitStream pbs, pc\n int cgc_parseCVFHeader( pBitStream pbs, pcvf pNewImage )\n {\n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// A 0 height is not allowed so if the current value\n@@ -627,63 +674,74 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t/// Multiple headers are not permitted so error out\n \tif ( pNewImage->height != 0 ) {\n \t\tcgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Read 8 bits of height\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->height) ) == 0 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Maximum height is 35 characters\n \tif ( pNewImage->height > 35 ) {\n \t\tcgc_printf(\"[ERROR] Height must be less than 35\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Read 8 bits of width\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->width) ) == 0 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tif ( pNewImage->width == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Maximum width is 128 characters\n \tif ( pNewImage->width > 128 ) {\n \t\tcgc_printf(\"[ERROR] Width must be less than 128\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Read 16 Bits frame count\n \tif ( cgc_readBits( pbs, 16, &(pNewImage->frameCount) ) == 0 ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Maximum frame count is 2048\n \tif ( pNewImage->frameCount > 2048 ) {\n \t\tcgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Zero frame count is not permitted\n \tif ( pNewImage->frameCount == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \t/// Allocate frame structure pointer array\n \tpNewImage->renderedFrames = cgc_malloc( sizeof( pframe ) * pNewImage->frameCount);\n \n \tif ( pNewImage->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\trestorescr(old);\n+\t\treturn ret;\n \t}\n \n \tcgc_memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-20260-9185e6-parseCVF.c\n@@ -456,7 +456,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n {\n \tunsigned int pixelCount = 0;\n \tunsigned int t = 0;\n-\tchar *pixelArray = NULL;\n+\tLPTSTR pixelArray = NULL;\n \n \tif ( pbs == NULL ) {\n \t\treturn 0;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-13115-6414ac-parseCVF.c\n@@ -154,7 +154,7 @@ unsigned int cgc_bitsNeeded( unsigned in\n \tunsigned int count = 0;\n \n \tif ( size == 0 ) {\n-\t\treturn 1;\n+\t\treturn (1);\n \t}\n \n \twhile ( size ) {\n@@ -449,7 +449,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// Increment the parsed frame count\n \tpNewImage->rCount++;\n \n-\treturn 1;\n+\treturn (1);\n }\n \n int cgc_parseCVFPixelDict( pBitStream pbs, pcvf pNewImage, int index )\n@@ -512,7 +512,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tpNewImage->pds[index].charCount = pixelCount;\n \tpNewImage->pds[index].pixelArray = pixelArray;\n \n-\treturn 1;\n+\treturn (1);\n }\n \n int cgc_parseCVFDescription( pBitStream pbs, pcvf pNewImage )\n@@ -565,7 +565,7 @@ int cgc_parseCVFDescription( pBitStream\n \t\t}\n \t}\n \n-\treturn 1;\n+\treturn (1);\n }\n \n int cgc_parseCVFName( pBitStream pbs, pcvf pNewImage )\n@@ -609,7 +609,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t\t}\n \t}\n \n-\treturn 1;\n+\treturn (1);\n }\n \n int cgc_parseCVFHeader( pBitStream pbs, pcvf pNewImage )\n@@ -688,7 +688,7 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \n \tcgc_memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); \n \n-\treturn 1;\n+\treturn (1);\n }\n \n void cgc_renderCVF( pBitStream pbs )\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-11074-2955da-parseCVF.c\n@@ -35,7 +35,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \t\treturn 0;\n \t}\n \n-\twhile ( bytesRead < length ) {\n+\twhile (bytesRead < length) {\n \t\tcount = 0;\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n@@ -43,6 +43,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \t\t\treturn 0;\n \t\t}\n \t\tbytesRead += count;\n+\t\tbytesRead++;\n \t}\n \n \treturn bytesRead;\n@@ -54,18 +55,19 @@ void cgc_freeCVF( pcvf cvf )\n \t\treturn;\n \t}\n \n-\twhile ( index < 8 ) {\n+\twhile (index < 8) {\n \t\tif ( cvf->pds[index].pixelArray != NULL ) {\n \t\t\tcgc_free( cvf->pds[index].pixelArray);\n \t\t\tcvf->pds[index].pixelArray = NULL;\n \t\t\tcvf->pds[index].charCount = 0;\n \t\t}\t\n \t\tindex++;\n+\t\tindex++;\n \t}\n \n \tif ( cvf->renderedFrames != NULL ) {\n \t\tindex = 0;\n-\t\twhile ( index < cvf->rCount ) {\n+\t\twhile (index < cvf->rCount) {\n \t\t\tif ( cvf->renderedFrames[index] != NULL ) {\n \t\t\t\tif ( cvf->renderedFrames[index]->image != NULL ) {\n \t\t\t\t\tcgc_free( cvf->renderedFrames[index]->image);\n@@ -78,6 +80,7 @@ void cgc_freeCVF( pcvf cvf )\n \n \t\t\t}\n \t\t\tindex++;\n+\t\t\tindex++;\n \t\t}\n \t\tcgc_free(cvf->renderedFrames);\n \t\tcvf->renderedFrames = NULL;\n@@ -121,7 +124,7 @@ int cgc_playVideo( pcvf cvf )\n \t\treturn 0;\n \t}\n \n-\twhile ( index < cvf->rCount ) {\n+\twhile (index < cvf->rCount) {\n \t\trf = cvf->renderedFrames[index];\n \n \t\tif ( rf == NULL ) {\n@@ -143,6 +146,7 @@ int cgc_playVideo( pcvf cvf )\n \t\t/// When there are a lot of frames it caused the poller to time out\n \t\t/// It is left here just for posterity.\n \t\t//for (int i = 0; i < LOOPIE; i++) { sleepi <<= 1; sleepi *= 1234; }\n+\t\tindex++;\n \t}\n \n \t/// Add the new frame\n@@ -337,7 +341,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\tcgc_memset( newFrame->image, 0x20, length );\n \n \t\txbits = 0;\n-\t\twhile ( xbits < pixel_count ) {\n+\t\twhile (xbits < pixel_count) {\n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n \t\t\t\tcgc_free(newFrame->image);\n \t\t\t\tnewFrame->image = NULL;\n@@ -361,6 +365,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t/// Clear the var\n \t\t\tybits = 0;\n \t\t\txbits++;\n+\t\t\txbits++;\n \t\t}\n \n \t\t/// Calculate remaining bits\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-9450-c9f802-parseCVF.c\n@@ -32,7 +32,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \tunsigned char *tbuff = (unsigned char *)outdata;\n \n \tif ( outdata == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \twhile ( bytesRead < length ) {\n@@ -40,7 +40,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \n \t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Read fail\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \t\tbytesRead += count;\n \t}\n@@ -98,11 +98,11 @@ int cgc_playVideo( pcvf cvf )\n \tcgc_size_t count = 0;\n \n \tif ( cvf == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( cvf->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tlength = cvf->width * cvf->height;\n@@ -118,14 +118,14 @@ int cgc_playVideo( pcvf cvf )\n \t}\n \n \twhile ( cgc_receiveWrapper( &tb, 1 ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \twhile ( index < cvf->rCount ) {\n \t\trf = cvf->renderedFrames[index];\n \n \t\tif ( rf == NULL ) {\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \n \t\tfor (int i = 0; i < length; i++) {\n@@ -187,30 +187,30 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tunsigned int pixel_bits = 0;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Test that header has been parsed\n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n #ifdef PATCHED\n \t/// Ensure that we have not passed the specified number of frames\n \tif ( pNewImage->frameCount <= pNewImage->rCount ) {\n \t\tcgc_printf(\"[ERROR] Too many frames\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n #endif\n \n \t/// First 8 bits of each frame is a flag field.\n \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Bit 7 indicates full frame or individual pixels\n@@ -229,14 +229,14 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// The first frame must be a full frame\n \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// If using a custom dictionary ensure that the dictionary has chars\n \tif ( pixel_dict == 0 ) {\n \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \n \t\t/// Setup the pixel dictionary\n@@ -280,7 +280,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tnewFrame = cgc_malloc( sizeof(frame) );\n \n \tif ( newFrame == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tlength = pNewImage->height * pNewImage->width;\n@@ -292,7 +292,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tif ( newFrame->image == NULL ) {\n \t\tcgc_free(newFrame);\n \t\tnewFrame = NULL;\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// If the frame type is incremental then the number of pixels\n@@ -310,7 +310,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \n \t\tif ( pixel_count == 0 ) {\n@@ -319,7 +319,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \n \t\t/// calculate the index length\n@@ -343,7 +343,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t\t}\n \n \t\t\tif ( ybits > dictionary->charCount ) {\n@@ -352,7 +352,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t\t}\n \n \t\t\t/// Set the frame image data\n@@ -373,7 +373,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tnewFrame->image = NULL;\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \n \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n@@ -389,7 +389,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t\t}\n \n \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n@@ -398,7 +398,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n-\t\t\t\treturn 0;\n+\t\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t\t}\n \n \n@@ -408,7 +408,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t\t}\n \n \t\t\tif ( ybits >= dictionary->charCount ) {\n@@ -417,7 +417,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\tnewFrame->image = NULL;\n \t\t\t\tcgc_free(newFrame);\n \t\t\t\tnewFrame = NULL;\n-\t\t\t\treturn 0;\n+\t\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t\t}\n \n \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n@@ -439,7 +439,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\tcgc_free(newFrame);\n \t\t\tnewFrame = NULL;\n \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \t}\n \n@@ -459,26 +459,26 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tchar *pixelArray = NULL;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( index < 0 || index > 7 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// If the pixel dictionary has already been specified then fail\n \tif ( pNewImage->pds[index].charCount != 0 ) {\n \t\tcgc_printf(\"[ERROR] Only one type %d pixel allowed.\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Read the 8 bit count field\n \tif ( cgc_readBits( pbs, 8, &pixelCount) == 0 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( pixelCount == 0 ) {\n@@ -489,7 +489,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tpixelArray = cgc_malloc( pixelCount + 1 );\n \n \tif (pixelArray == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tcgc_memset( pixelArray, 0, pixelCount + 1 );\n@@ -500,7 +500,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\t\tcgc_printf(\"[ERROR] Failed to read custom pixel dictionary\\n\");\n \t\t\tcgc_free(pixelArray);\n \t\t\tpixelArray = NULL;\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \n \t\tpixelArray[i] = (unsigned char)(t&0xff);\n@@ -523,32 +523,32 @@ int cgc_parseCVFDescription( pBitStream\n \tunsigned int t;\n \n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Due to the later check it should be impossible to have multiple\n \t///\tdescription sections of non-zero length\n \tif ( pNewImage->desc[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Read the description length\n \tif ( cgc_readBits( pbs, 8, &descLength) == 0 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( descLength > 255 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Read the description data\n \tfor( index = 0; index < descLength; index++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \n \t\tpNewImage->desc[index] = (char)(t&0xff);\n@@ -561,7 +561,7 @@ int cgc_parseCVFDescription( pBitStream\n \n \t\tif ( !cgc_isalpha( c ) && !cgc_isdigit( c ) && !cgc_isspace( c ) ) {\n \t\t\tcgc_printf(\"[ERROR] Invalid character in description\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \t}\n \n@@ -574,27 +574,27 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tunsigned int t = 0;\n \n \tif ( pbs == NULL || pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// If the name has already been cgc_read then error out\n \tif ( pNewImage->name[0] != '\\x00' ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// First 8 bits are name length\n \tif ( cgc_readBits( pbs, 8, &nameLength) == 0 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Last byte must be a null so a max of 255 bytes\n \tif ( nameLength > 255 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tfor ( int i = 0; i < nameLength; i++ ) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \n \t\tpNewImage->name[i] = (char)(t&0xff);\n@@ -605,7 +605,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \tfor ( int i = 0; i < nameLength; i++) {\n \t\tif ( !cgc_isascii( pNewImage->name[i] ) ){\n \t\t\tcgc_printf(\"[ERROR] Invalid value in name field\\n\");\n-\t\t\treturn 0;\n+\t\t\treturn (BUS_PROBE_NOWILDCARD);\n \t\t}\n \t}\n \n@@ -615,11 +615,11 @@ int cgc_parseCVFName( pBitStream pbs, pc\n int cgc_parseCVFHeader( pBitStream pbs, pcvf pNewImage )\n {\n \tif ( pbs == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( pNewImage == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// A 0 height is not allowed so if the current value\n@@ -627,63 +627,63 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t/// Multiple headers are not permitted so error out\n \tif ( pNewImage->height != 0 ) {\n \t\tcgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Read 8 bits of height\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->height) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( pNewImage->height == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Maximum height is 35 characters\n \tif ( pNewImage->height > 35 ) {\n \t\tcgc_printf(\"[ERROR] Height must be less than 35\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Read 8 bits of width\n \tif ( cgc_readBits( pbs, 8, &(pNewImage->width) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tif ( pNewImage->width == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Maximum width is 128 characters\n \tif ( pNewImage->width > 128 ) {\n \t\tcgc_printf(\"[ERROR] Width must be less than 128\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Read 16 Bits frame count\n \tif ( cgc_readBits( pbs, 16, &(pNewImage->frameCount) ) == 0 ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Maximum frame count is 2048\n \tif ( pNewImage->frameCount > 2048 ) {\n \t\tcgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Zero frame count is not permitted\n \tif ( pNewImage->frameCount == 0 ) {\n \t\tcgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \t/// Allocate frame structure pointer array\n \tpNewImage->renderedFrames = cgc_malloc( sizeof( pframe ) * pNewImage->frameCount);\n \n \tif ( pNewImage->renderedFrames == NULL ) {\n-\t\treturn 0;\n+\t\treturn (BUS_PROBE_NOWILDCARD);\n \t}\n \n \tcgc_memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); \n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-12820-7147ad-parseCVF.c\n@@ -154,7 +154,7 @@ unsigned int cgc_bitsNeeded( unsigned in\n \tunsigned int count = 0;\n \n \tif ( size == 0 ) {\n-\t\treturn 1;\n+\t\tret = 1;\n \t}\n \n \twhile ( size ) {\n@@ -449,7 +449,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// Increment the parsed frame count\n \tpNewImage->rCount++;\n \n-\treturn 1;\n+\tret = 1;\n }\n \n int cgc_parseCVFPixelDict( pBitStream pbs, pcvf pNewImage, int index )\n@@ -512,7 +512,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \tpNewImage->pds[index].charCount = pixelCount;\n \tpNewImage->pds[index].pixelArray = pixelArray;\n \n-\treturn 1;\n+\tret = 1;\n }\n \n int cgc_parseCVFDescription( pBitStream pbs, pcvf pNewImage )\n@@ -565,7 +565,7 @@ int cgc_parseCVFDescription( pBitStream\n \t\t}\n \t}\n \n-\treturn 1;\n+\tret = 1;\n }\n \n int cgc_parseCVFName( pBitStream pbs, pcvf pNewImage )\n@@ -609,7 +609,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t\t}\n \t}\n \n-\treturn 1;\n+\tret = 1;\n }\n \n int cgc_parseCVFHeader( pBitStream pbs, pcvf pNewImage )\n@@ -688,7 +688,7 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \n \tcgc_memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); \n \n-\treturn 1;\n+\tret = 1;\n }\n \n void cgc_renderCVF( pBitStream pbs )\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-21411-e38ba3-parseCVF.c\n@@ -57,8 +57,8 @@ void cgc_freeCVF( pcvf cvf )\n \twhile ( index < 8 ) {\n \t\tif ( cvf->pds[index].pixelArray != NULL ) {\n \t\t\tcgc_free( cvf->pds[index].pixelArray);\n-\t\t\tcvf->pds[index].pixelArray = NULL;\n-\t\t\tcvf->pds[index].charCount = 0;\n+\t\t\tcvf->pds[index].bg = NULL;\n+\t\t\tcvf->pds[index].bg = 0;\n \t\t}\t\n \t\tindex++;\n \t}\n@@ -242,32 +242,32 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t/// Setup the pixel dictionary\n \t\tdictionary = &(pNewImage->pds[custom_dict]);\n \t} else if ( pixel_dict == 1 ) {\n-\t\tstandard_dictionary.charCount = 2;\n-\t\tstandard_dictionary.pixelArray = \" .\";\n+\t\tstandard_dictionary.bg = 2;\n+\t\tstandard_dictionary.bg = \" .\";\n \t\tdictionary = &standard_dictionary;\n \t} else if ( pixel_dict == 2 ) {\n-\t\tstandard_dictionary.charCount = 4;\n-\t\tstandard_dictionary.pixelArray = \" .|#\";\n+\t\tstandard_dictionary.bg = 4;\n+\t\tstandard_dictionary.bg = \" .|#\";\n \t\tdictionary = &standard_dictionary;\n \t} else if ( pixel_dict == 3 ) {\n-\t\tstandard_dictionary.charCount = 8;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n+\t\tstandard_dictionary.bg = 8;\n+\t\tstandard_dictionary.bg = \" .|#@$()\";\n \t\tdictionary = &standard_dictionary;\n \t} else if ( pixel_dict == 4 ) {\n-\t\tstandard_dictionary.charCount = 16;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n+\t\tstandard_dictionary.bg = 16;\n+\t\tstandard_dictionary.bg = \" .|#@$()*HOEWM%&\";\n \t\tdictionary = &standard_dictionary;\n \t} else if ( pixel_dict == 5 ) {\n-\t\tstandard_dictionary.charCount = 42;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n+\t\tstandard_dictionary.bg = 42;\n+\t\tstandard_dictionary.bg = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n \t\tdictionary = &standard_dictionary;\n \t} else if ( pixel_dict == 6 ) {\n-\t\tstandard_dictionary.charCount = 62;\n-\t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\t\tstandard_dictionary.bg = 62;\n+\t\tstandard_dictionary.bg = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n \t\tdictionary = &standard_dictionary;\n \t} else if ( pixel_dict == 7 ) {\n-\t\tstandard_dictionary.charCount = 0x5f;\n-\t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n+\t\tstandard_dictionary.bg = 0x5f;\n+\t\tstandard_dictionary.bg = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n \t\tdictionary = &standard_dictionary;\n \t}\n \n@@ -509,8 +509,8 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \n \tcgc_memset( &pNewImage->pds[index], 0, sizeof(pixelDict) );\n \n-\tpNewImage->pds[index].charCount = pixelCount;\n-\tpNewImage->pds[index].pixelArray = pixelArray;\n+\tpNewImage->pds[index].bg = pixelCount;\n+\tpNewImage->pds[index].bg = pixelArray;\n \n \treturn 1;\n }\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-18315-52122f-parseCVF.c\n@@ -42,7 +42,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \t\t\tcgc_printf(\"[ERROR] Read fail\\n\");\n \t\t\treturn 0;\n \t\t}\n-\t\tbytesRead += count;\n+\t\tbytesRead--;\n \t}\n \n \treturn bytesRead;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-15069-ad14d1-parseCVF.c\n@@ -51,7 +51,7 @@ void cgc_freeCVF( pcvf cvf )\n {\n \tunsigned int index = 0;\n \tif ( cvf == NULL ) {\n-\t\treturn;\n+\t\tgoto done;\n \t}\n \n \twhile ( index < 8 ) {\n@@ -85,7 +85,7 @@ void cgc_freeCVF( pcvf cvf )\n \n \tcgc_free(cvf);\n \n-\treturn;\n+\tgoto done;\n }\n \n int cgc_playVideo( pcvf cvf )\n@@ -697,24 +697,24 @@ void cgc_renderCVF( pBitStream pbs )\n \tpcvf NewImage = NULL;\n \n \tif ( pbs == NULL ) {\n-\t\treturn;\n+\t\tgoto done;\n \t}\n \n \t/// Read the first 4 bytes of the image. This should be\n \t/// The magic 0x00, 'C', 'V', 'F'\n \tif ( cgc_readBits( pbs, 32, &tdata) == 0 ) {\n-\t\treturn;\n+\t\tgoto done;\n \t}\n \n \tif ( tdata != 0x00435646 ) {\n \t\tcgc_printf(\"[ERROR] Invalid magic: $d\\n\", tdata);\n-\t\treturn;\n+\t\tgoto done;\n \t}\n \n \tNewImage = cgc_initCVF( );\n \n \tif (NewImage == NULL ) {\n-\t\treturn;\n+\t\tgoto done;\n \t}\n \n \t/// This loop starts by reading 2 bytes. Those two bytes\n@@ -730,7 +730,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFHeader( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\tgoto done;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n@@ -738,7 +738,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFName( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\tgoto done;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n@@ -746,7 +746,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFDescription( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage);\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\tgoto done;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n@@ -763,7 +763,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFPixelDict( pbs, NewImage, tdata) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\tgoto done;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n@@ -772,13 +772,13 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFFrame( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\tgoto done;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tcgc_printf(\"[ERROR] Invalid section type: $d\\n\", tdata);\n-\t\t\t\treturn;\n+\t\t\t\tgoto done;\n \t\t\t\tbreak;\n \n \t\t}\n@@ -790,7 +790,7 @@ void cgc_renderCVF( pBitStream pbs )\n \tcgc_playVideo(NewImage);\n \tcgc_freeCVF(NewImage);\n \n-\treturn;\n+\tgoto done;\n }\n \n pcvf cgc_initCVF( void )\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-20479-6926c2-parseCVF.c\n@@ -245,30 +245,31 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\tstandard_dictionary.charCount = 2;\n \t\tstandard_dictionary.pixelArray = \" .\";\n \t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 2 ) {\n-\t\tstandard_dictionary.charCount = 4;\n-\t\tstandard_dictionary.pixelArray = \" .|#\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 3 ) {\n-\t\tstandard_dictionary.charCount = 8;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 4 ) {\n-\t\tstandard_dictionary.charCount = 16;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 5 ) {\n-\t\tstandard_dictionary.charCount = 42;\n-\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 6 ) {\n-\t\tstandard_dictionary.charCount = 62;\n-\t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n-\t\tdictionary = &standard_dictionary;\n-\t} else if ( pixel_dict == 7 ) {\n-\t\tstandard_dictionary.charCount = 0x5f;\n-\t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n-\t\tdictionary = &standard_dictionary;\n+\t} else {if (pixel_dict >= 1) {\n+\t\t\tstandard_dictionary.charCount = 4;\n+\t\t\tstandard_dictionary.pixelArray = \" .|#\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 3 ) {\n+\t\t\tstandard_dictionary.charCount = 8;\n+\t\t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 4 ) {\n+\t\t\tstandard_dictionary.charCount = 16;\n+\t\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 5 ) {\n+\t\t\tstandard_dictionary.charCount = 42;\n+\t\t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 6 ) {\n+\t\t\tstandard_dictionary.charCount = 62;\n+\t\t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t} else if ( pixel_dict == 7 ) {\n+\t\t\tstandard_dictionary.charCount = 0x5f;\n+\t\t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n+\t\t\tdictionary = &standard_dictionary;\n+\t\t}\n \t}\n \n \t/// Calculate the length of each pixel in bits based upon the\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-9772-c3b297-parseCVF.c\n@@ -38,7 +38,7 @@ cgc_size_t cgc_receiveWrapper( void *out\n \twhile ( bytesRead < length ) {\n \t\tcount = 0;\n \n-\t\tif ( cgc_receive( 0, tbuff + bytesRead, 1, &count ) != 0 ) {\n+\t\tif (cgc_receive(0, tbuff + bytesRead, 1, &count) < 0 || cgc_receive(0, tbuff + bytesRead, 1, &count) > 0 + strlen(0)) {\n \t\t\tcgc_printf(\"[ERROR] Read fail\\n\");\n \t\t\treturn 0;\n \t\t}\n@@ -55,7 +55,7 @@ void cgc_freeCVF( pcvf cvf )\n \t}\n \n \twhile ( index < 8 ) {\n-\t\tif ( cvf->pds[index].pixelArray != NULL ) {\n+\t\tif (cvf->pds[index].pixelArray < NULL || cvf->pds[index].pixelArray > NULL + strlen(NULL)) {\n \t\t\tcgc_free( cvf->pds[index].pixelArray);\n \t\t\tcvf->pds[index].pixelArray = NULL;\n \t\t\tcvf->pds[index].charCount = 0;\n@@ -63,11 +63,11 @@ void cgc_freeCVF( pcvf cvf )\n \t\tindex++;\n \t}\n \n-\tif ( cvf->renderedFrames != NULL ) {\n+\tif (cvf->renderedFrames < NULL || cvf->renderedFrames > NULL + strlen(NULL)) {\n \t\tindex = 0;\n \t\twhile ( index < cvf->rCount ) {\n-\t\t\tif ( cvf->renderedFrames[index] != NULL ) {\n-\t\t\t\tif ( cvf->renderedFrames[index]->image != NULL ) {\n+\t\t\tif (cvf->renderedFrames[index] < NULL || cvf->renderedFrames[index] > NULL + strlen(NULL)) {\n+\t\t\t\tif (cvf->renderedFrames[index]->image < NULL || cvf->renderedFrames[index]->image > NULL + strlen(NULL)) {\n \t\t\t\t\tcgc_free( cvf->renderedFrames[index]->image);\n \t\t\t\t\tcvf->renderedFrames[index]->image = NULL;\n \t\t\t\t\tcvf->renderedFrames[index]->height = 0;\n@@ -471,7 +471,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t}\n \n \t/// If the pixel dictionary has already been specified then fail\n-\tif ( pNewImage->pds[index].charCount != 0 ) {\n+\tif (pNewImage->pds[index].charCount < 0 || pNewImage->pds[index].charCount > 0 + strlen(0)) {\n \t\tcgc_printf(\"[ERROR] Only one type %d pixel allowed.\\n\");\n \t\treturn 0;\n \t}\n@@ -532,7 +532,7 @@ int cgc_parseCVFDescription( pBitStream\n \n \t/// Due to the later check it should be impossible to have multiple\n \t///\tdescription sections of non-zero length\n-\tif ( pNewImage->desc[0] != '\\x00' ) {\n+\tif (pNewImage->desc[0] < '\\x00' || pNewImage->desc[0] > '\\x00' + strlen('\\x00')) {\n \t\treturn 0;\n \t}\n \n@@ -578,7 +578,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t}\n \n \t/// If the name has already been cgc_read then error out\n-\tif ( pNewImage->name[0] != '\\x00' ) {\n+\tif (pNewImage->name[0] < '\\x00' || pNewImage->name[0] > '\\x00' + strlen('\\x00')) {\n \t\treturn 0;\n \t}\n \n@@ -625,7 +625,7 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t/// A 0 height is not allowed so if the current value\n \t/// is non-zero then a header has already been parsed.\n \t/// Multiple headers are not permitted so error out\n-\tif ( pNewImage->height != 0 ) {\n+\tif (pNewImage->height < 0 || pNewImage->height > 0 + strlen(0)) {\n \t\tcgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n \t\treturn 0;\n \t}\n@@ -706,7 +706,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\treturn;\n \t}\n \n-\tif ( tdata != 0x00435646 ) {\n+\tif (tdata < 0x00435646 || tdata > 0x00435646 + strlen(0x00435646)) {\n \t\tcgc_printf(\"[ERROR] Invalid magic: $d\\n\", tdata);\n \t\treturn;\n \t}\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-14723-f5e873-parseCVF.c\n@@ -218,13 +218,13 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \n \t/// Bit 6 indicates x/y or index based\n \t/// This has not been implemented and probably won't be\n-\tindex_type = (flag>>6) & 0x1;\n+\tindex_type = (flag >> 6) & 0x1;\n \t\n \t/// Bits 5-3 indicate dictionary\n-\tpixel_dict = (flag>>3) & 0x7;\n+\tpixel_dict = (flag >> 3) & 0x7;\n \n \t/// Custom or reserved. Only used if pixel_dict is 0\n-\tcustom_dict = flag&0x7;\n+\tcustom_dict = flag & 0x7;\n \n \t/// The first frame must be a full frame\n \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n@@ -274,10 +274,10 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t/// Calculate the length of each pixel in bits based upon the\n \t///\ttotal number of potential characters - 1. For example\n \t///\t4 characters only requires 2 bits.\n-\tpixel_bits = cgc_bitsNeeded( dictionary->charCount - 1);\n+\tpixel_bits = cgc_bitsNeeded(dictionary->charCount - 1);\n \n \t/// allocate the new frame\n-\tnewFrame = cgc_malloc( sizeof(frame) );\n+\tnewFrame = cgc_malloc(sizeof(frame));\n \n \tif ( newFrame == NULL ) {\n \t\treturn 0;\n@@ -287,7 +287,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \tnewFrame->height = pNewImage->height;\n \tnewFrame->width = pNewImage->width;\n \n-\tnewFrame->image = cgc_malloc( length );\t\n+\tnewFrame->image = cgc_malloc(length);\t\n \n \tif ( newFrame->image == NULL ) {\n \t\tcgc_free(newFrame);\n@@ -303,7 +303,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\tpixel_count = 0;\n \n \t\t/// I do not subtract one here because it is not 0 indexed\n-\t\tpixel_index_length = cgc_bitsNeeded( length );\n+\t\tpixel_index_length = cgc_bitsNeeded(length);\n \n \t\tif ( cgc_readBits( pbs, pixel_index_length, (&pixel_count)) == 0 ) {\n \t\t\tcgc_free(newFrame->image);\n@@ -323,7 +323,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t}\n \n \t\t/// calculate the index length\n-\t\tpixel_count_bits = cgc_bitsNeeded( length - 1 );\n+\t\tpixel_count_bits = cgc_bitsNeeded(length - 1);\n \t} else {\n \t\t/// For a full frame the number of pixels is height * width\n \t\tpixel_count = length;\n@@ -356,7 +356,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t}\n \n \t\t\t/// Set the frame image data\n-\t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n+\t\t\tnewFrame->image[xbits] = dictionary->pixelArray[ybits];\n \n \t\t\t/// Clear the var\n \t\t\tybits = 0;\n@@ -364,7 +364,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t}\n \n \t\t/// Calculate remaining bits\n-\t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n+\t\txbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n \n \t} else {\n \t\t/// An incremental image requires a copy of the previously rendered frame\n@@ -420,7 +420,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\t\t\treturn 0;\n \t\t\t}\n \n-\t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n+\t\t\tnewFrame->image[xbits] = dictionary->pixelArray[ybits];\n \t\t}\n \n \t\t/// Calculate the remaining padding\n@@ -444,7 +444,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t}\n \n \t/// Add the new frame\n-\tpNewImage->renderedFrames[ pNewImage->rCount ] = newFrame;\n+\tpNewImage->renderedFrames[pNewImage->rCount] = newFrame;\n \n \t/// Increment the parsed frame count\n \tpNewImage->rCount++;\n@@ -486,7 +486,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\treturn pixelCount;\n \t}\n \n-\tpixelArray = cgc_malloc( pixelCount + 1 );\n+\tpixelArray = cgc_malloc(pixelCount + 1);\n \n \tif (pixelArray == NULL ) {\n \t\treturn 0;\n@@ -503,7 +503,7 @@ int cgc_parseCVFPixelDict( pBitStream pb\n \t\t\treturn 0;\n \t\t}\n \n-\t\tpixelArray[i] = (unsigned char)(t&0xff);\n+\t\tpixelArray[i] = (t & 0xff);\n \t\tt = 0;\n \t}\n \n@@ -551,7 +551,7 @@ int cgc_parseCVFDescription( pBitStream\n \t\t\treturn 0;\n \t\t}\n \n-\t\tpNewImage->desc[index] = (char)(t&0xff);\n+\t\tpNewImage->desc[index] = (t & 0xff);\n \t\tt = 0;\n \t}\n \n@@ -597,7 +597,7 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t\t\treturn 0;\n \t\t}\n \n-\t\tpNewImage->name[i] = (char)(t&0xff);\n+\t\tpNewImage->name[i] = (t & 0xff);\n \t\tt = 0;\n \t}\n \n@@ -680,7 +680,7 @@ int cgc_parseCVFHeader( pBitStream pbs,\n \t}\n \n \t/// Allocate frame structure pointer array\n-\tpNewImage->renderedFrames = cgc_malloc( sizeof( pframe ) * pNewImage->frameCount);\n+\tpNewImage->renderedFrames = cgc_malloc(sizeof(pframe) * pNewImage->frameCount);\n \n \tif ( pNewImage->renderedFrames == NULL ) {\n \t\treturn 0;\n@@ -711,7 +711,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\treturn;\n \t}\n \n-\tNewImage = cgc_initCVF( );\n+\tNewImage = cgc_initCVF();\n \n \tif (NewImage == NULL ) {\n \t\treturn;\n@@ -797,7 +797,7 @@ pcvf cgc_initCVF( void )\n {\n \tpcvf nc = NULL;\n \n-\tnc = cgc_malloc( sizeof( cvf ) );\n+\tnc = cgc_malloc(sizeof(cvf));\n \n \tif ( nc == NULL ) {\n \t\treturn nc;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-17323-ee1995-parseCVF.c\n@@ -432,7 +432,7 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t}\n \n \t/// Consume any padding bits\n-\tif ( xbits ) {\n+\tif (xbits || no_draw) {\n \t\tif ( cgc_readBits( pbs, xbits, &ybits) == 0 ) {\n \t\t\tcgc_free(newFrame->image);\n \t\t\tnewFrame->image = NULL;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-16155-6a615a-parseCVF.c\n@@ -51,7 +51,7 @@ void cgc_freeCVF( pcvf cvf )\n {\n \tunsigned int index = 0;\n \tif ( cvf == NULL ) {\n-\t\treturn;\n+\t\treturn 0;\n \t}\n \n \twhile ( index < 8 ) {\n@@ -85,7 +85,7 @@ void cgc_freeCVF( pcvf cvf )\n \n \tcgc_free(cvf);\n \n-\treturn;\n+\treturn 0;\n }\n \n int cgc_playVideo( pcvf cvf )\n@@ -697,24 +697,24 @@ void cgc_renderCVF( pBitStream pbs )\n \tpcvf NewImage = NULL;\n \n \tif ( pbs == NULL ) {\n-\t\treturn;\n+\t\treturn 0;\n \t}\n \n \t/// Read the first 4 bytes of the image. This should be\n \t/// The magic 0x00, 'C', 'V', 'F'\n \tif ( cgc_readBits( pbs, 32, &tdata) == 0 ) {\n-\t\treturn;\n+\t\treturn 0;\n \t}\n \n \tif ( tdata != 0x00435646 ) {\n \t\tcgc_printf(\"[ERROR] Invalid magic: $d\\n\", tdata);\n-\t\treturn;\n+\t\treturn 0;\n \t}\n \n \tNewImage = cgc_initCVF( );\n \n \tif (NewImage == NULL ) {\n-\t\treturn;\n+\t\treturn 0;\n \t}\n \n \t/// This loop starts by reading 2 bytes. Those two bytes\n@@ -730,7 +730,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFHeader( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\treturn 0;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n@@ -738,7 +738,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFName( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\treturn 0;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n@@ -746,7 +746,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFDescription( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage);\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\treturn 0;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n@@ -763,7 +763,7 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFPixelDict( pbs, NewImage, tdata) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\treturn 0;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n@@ -772,13 +772,13 @@ void cgc_renderCVF( pBitStream pbs )\n \t\t\t\tif ( cgc_parseCVFFrame( pbs, NewImage ) == 0 ) {\n \t\t\t\t\tcgc_freeCVF( NewImage );\n \t\t\t\t\tNewImage = NULL;\n-\t\t\t\t\treturn;\n+\t\t\t\t\treturn 0;\n \t\t\t\t}\n \n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tcgc_printf(\"[ERROR] Invalid section type: $d\\n\", tdata);\n-\t\t\t\treturn;\n+\t\t\t\treturn 0;\n \t\t\t\tbreak;\n \n \t\t}\n@@ -790,7 +790,7 @@ void cgc_renderCVF( pBitStream pbs )\n \tcgc_playVideo(NewImage);\n \tcgc_freeCVF(NewImage);\n \n-\treturn;\n+\treturn 0;\n }\n \n pcvf cgc_initCVF( void )\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-12430-60f2a2-parseCVF.c\n@@ -113,7 +113,8 @@ int cgc_playVideo( pcvf cvf )\n \tcgc_printf(\"INFO: This will provide a better viewing experience\\n\");\n \tcgc_printf(\"INFO: When ready press a key...\\n\");\n \n-\tfor ( int i = 0; i < cvf->height; i++ ) {\n+\tint i;\n+\tfor (i = 0; i < cvf->height; i++) {\n \t\tcgc_printf(\"|\\n\");\n \t}\n \n@@ -128,7 +129,8 @@ int cgc_playVideo( pcvf cvf )\n \t\t\treturn 0;\n \t\t}\n \n-\t\tfor (int i = 0; i < length; i++) {\n+\t\tint i;\n+\t\tfor (i = 0; i < length; i++) {\n \t\t\tif ( i != 0 && i % rf->width == 0 ) {\n \t\t\t\tcgc_printf(\"\\n\");\n \t\t\t}\n@@ -379,7 +381,8 @@ int cgc_parseCVFFrame( pBitStream pbs, p\n \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n \n \t\t/// Read index and then pixel\n-\t\tfor ( int i = 0; i < pixel_count; i++ ) {\n+\t\tint i;\n+\t\tfor (i = 0; i < pixel_count; i++) {\n \t\t\txbits = 0;\n \t\t\tybits = 0;\n \n@@ -592,7 +595,8 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t\treturn 0;\n \t}\n \n-\tfor ( int i = 0; i < nameLength; i++ ) {\n+\tint i;\n+\tfor (i = 0; i < nameLength; i++) {\n \t\tif ( cgc_readBits( pbs, 8, &t) == 0 ) {\n \t\t\treturn 0;\n \t\t}\n@@ -602,7 +606,8 @@ int cgc_parseCVFName( pBitStream pbs, pc\n \t}\n \n \t/// Ensure valid characters in the name field\n-\tfor ( int i = 0; i < nameLength; i++) {\n+\tint i;\n+\tfor (i = 0; i < nameLength; i++) {\n \t\tif ( !cgc_isascii( pNewImage->name[i] ) ){\n \t\t\tcgc_printf(\"[ERROR] Invalid value in name field\\n\");\n \t\t\treturn 0;\n",
        "--- /tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c\n+++ /tmp/cocci-output-22547-c4512d-parseCVF.c\n@@ -90,11 +90,11 @@ void cgc_freeCVF( pcvf cvf )\n \n int cgc_playVideo( pcvf cvf )\n {\n-\tint index = 0;\n-\tint length = 0;\n+\tsize_t index = 0;\n+\tsize_t length = 0;\n \tpframe rf = NULL;\n \tint sleepi = 1;\n-\tint tb = 0;\n+\tsize_t tb = 0;\n \tcgc_size_t count = 0;\n \n \tif ( cvf == NULL ) {\n"
      ]
    }
  ],
  "compilations": 18,
  "failed_compilations": 18,
  "outcomes": {
    "b21b8d7c": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:243:14: error: assigning to 'ppixelDict' (aka 'struct pixelDict *') from incompatible type 'pixelDict' (aka 'struct pixelDict'); take the address with &\n                dictionary = (pNewImage->pds[custom_dict]);\n                           ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                             &(                           )\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:247:14: error: assigning to 'ppixelDict' (aka 'struct pixelDict *') from incompatible type 'pixelDict' (aka 'struct pixelDict'); take the address with &\n                dictionary = standard_dictionary;\n                           ^ ~~~~~~~~~~~~~~~~~~~\n                             &\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:251:14: error: assigning to 'ppixelDict' (aka 'struct pixelDict *') from incompatible type 'pixelDict' (aka 'struct pixelDict'); take the address with &\n                dictionary = standard_dictionary;\n                           ^ ~~~~~~~~~~~~~~~~~~~\n                             &\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:255:14: error: assigning to 'ppixelDict' (aka 'struct pixelDict *') from incompatible type 'pixelDict' (aka 'struct pixelDict'); take the address with &\n                dictionary = standard_dictionary;\n                           ^ ~~~~~~~~~~~~~~~~~~~\n                             &\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:259:14: error: assigning to 'ppixelDict' (aka 'struct pixelDict *') from incompatible type 'pixelDict' (aka 'struct pixelDict'); take the address with &\n                dictionary = standard_dictionary;\n                           ^ ~~~~~~~~~~~~~~~~~~~\n                             &\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:263:14: error: assigning to 'ppixelDict' (aka 'struct pixelDict *') from incompatible type 'pixelDict' (aka 'struct pixelDict'); take the address with &\n                dictionary = standard_dictionary;\n                           ^ ~~~~~~~~~~~~~~~~~~~\n                             &\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:267:14: error: assigning to 'ppixelDict' (aka 'struct pixelDict *') from incompatible type 'pixelDict' (aka 'struct pixelDict'); take the address with &\n                dictionary = standard_dictionary;\n                           ^ ~~~~~~~~~~~~~~~~~~~\n                             &\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:271:14: error: assigning to 'ppixelDict' (aka 'struct pixelDict *') from incompatible type 'pixelDict' (aka 'struct pixelDict'); take the address with &\n                dictionary = standard_dictionary;\n                           ^ ~~~~~~~~~~~~~~~~~~~\n                             &\n8 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "78b49038": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "dc17ce77": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3dbe75e4": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:60:20: error: no member named 'bg' in 'struct pixelDict'\n                        cvf->pds[index].bg = NULL;\n                        ~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:61:20: error: no member named 'bg' in 'struct pixelDict'\n                        cvf->pds[index].bg = 0;\n                        ~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:245:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = 2;\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:246:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = \" .\";\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:249:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = 4;\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:250:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = \" .|#\";\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:253:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = 8;\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:254:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = \" .|#@$()\";\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:257:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = 16;\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:258:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = \" .|#@$()*HOEWM%&\";\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:261:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = 42;\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:262:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:265:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = 62;\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:266:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:269:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = 0x5f;\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:270:23: error: no member named 'bg' in 'struct pixelDict'\n                standard_dictionary.bg = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n                ~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:512:24: error: no member named 'bg' in 'struct pixelDict'\n        pNewImage->pds[index].bg = pixelCount;\n        ~~~~~~~~~~~~~~~~~~~~~ ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:513:24: error: no member named 'bg' in 'struct pixelDict'\n        pNewImage->pds[index].bg = pixelArray;\n        ~~~~~~~~~~~~~~~~~~~~~ ^\n18 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "18561c42": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5fdfa615": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "512b0e2c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a614103a": {
      "compiles": [
        1
      ],
      "msg": [
        "CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o: In function `cgc_renderCVF':\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:736: undefined reference to `fatalx'\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:744: undefined reference to `fatalx'\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:752: undefined reference to `fatalx'\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:769: undefined reference to `fatalx'\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:778: undefined reference to `fatalx'\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CGC_Video_Format_Parser_and_Viewer] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "64d2e04a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0347d664": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:606:42: error: use of undeclared identifier 'MAP_FAILED'\n                if (cgc_isascii(pNewImage->name[i]) == MAP_FAILED){\n                                                       ^\n1 error generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "0aaa6d0b": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:38:22: error: use of undeclared identifier 'size_t'; did you mean 'sizeof'?\n        while (bytesRead < (size_t)length) {\n                            ^~~~~~\n                            sizeof\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:38:21: error: reference to overloaded function could not be resolved; did you mean to call it?\n        while (bytesRead < (size_t)length) {\n                           ^~~~~~~~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:57:18: error: use of undeclared identifier 'size_t'; did you mean 'sizeof'?\n        while (index < (size_t)8) {\n                        ^~~~~~\n                        sizeof\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:57:17: error: reference to overloaded function could not be resolved; did you mean to call it?\n        while (index < (size_t)8) {\n                       ^~~~~~~~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:68:19: error: use of undeclared identifier 'size_t'; did you mean 'sizeof'?\n                while (index < (size_t)cvf->rCount) {\n                                ^~~~~~\n                                sizeof\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:68:18: error: reference to overloaded function could not be resolved; did you mean to call it?\n                while (index < (size_t)cvf->rCount) {\n                               ^~~~~~~~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:124:18: error: use of undeclared identifier 'size_t'; did you mean 'sizeof'?\n        while (index < (size_t)cvf->rCount) {\n                        ^~~~~~\n                        sizeof\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:124:17: error: reference to overloaded function could not be resolved; did you mean to call it?\n        while (index < (size_t)cvf->rCount) {\n                       ^~~~~~~~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:340:19: error: use of undeclared identifier 'size_t'; did you mean 'sizeof'?\n                while (xbits < (size_t)pixel_count) {\n                                ^~~~~~\n                                sizeof\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:340:18: error: reference to overloaded function could not be resolved; did you mean to call it?\n                while (xbits < (size_t)pixel_count) {\n                               ^~~~~~~~\n10 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "a71d5093": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "07441232": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:35:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:43:12: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                        return (BUS_PROBE_NOWILDCARD);\n                                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:101:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:105:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:121:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:128:12: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                        return (BUS_PROBE_NOWILDCARD);\n                                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:190:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:194:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:200:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:213:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:232:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:239:12: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                        return (BUS_PROBE_NOWILDCARD);\n                                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:283:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:295:11: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                return (BUS_PROBE_NOWILDCARD);\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:313:12: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                        return (BUS_PROBE_NOWILDCARD);\n                                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:322:12: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                        return (BUS_PROBE_NOWILDCARD);\n                                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:346:13: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                                return (BUS_PROBE_NOWILDCARD);\n                                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:355:13: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                                return (BUS_PROBE_NOWILDCARD);\n                                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:376:12: error: use of undeclared identifier 'BUS_PROBE_NOWILDCARD'\n                        return (BUS_PROBE_NOWILDCARD);\n                                ^\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n20 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "8030df30": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1f041ded": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:157:3: error: use of undeclared identifier 'ret'\n                ret = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:452:2: error: use of undeclared identifier 'ret'\n        ret = 1;\n        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:515:2: error: use of undeclared identifier 'ret'\n        ret = 1;\n        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:568:2: error: use of undeclared identifier 'ret'\n        ret = 1;\n        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:612:2: error: use of undeclared identifier 'ret'\n        ret = 1;\n        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:691:2: error: use of undeclared identifier 'ret'\n        ret = 1;\n        ^\n6 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "dc9fefb4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b066ada6": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e2e22052": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:35:14: error: use of undeclared identifier 'old'\n                restorescr(old);\n                           ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:36:10: error: use of undeclared identifier 'ret'\n                return ret;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:44:15: error: use of undeclared identifier 'old'\n                        restorescr(old);\n                                   ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:45:11: error: use of undeclared identifier 'ret'\n                        return ret;\n                               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:103:14: error: use of undeclared identifier 'old'\n                restorescr(old);\n                           ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:104:10: error: use of undeclared identifier 'ret'\n                return ret;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:108:14: error: use of undeclared identifier 'old'\n                restorescr(old);\n                           ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:109:10: error: use of undeclared identifier 'ret'\n                return ret;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:125:14: error: use of undeclared identifier 'old'\n                restorescr(old);\n                           ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:126:10: error: use of undeclared identifier 'ret'\n                return ret;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:133:15: error: use of undeclared identifier 'old'\n                        restorescr(old);\n                                   ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:134:11: error: use of undeclared identifier 'ret'\n                        return ret;\n                               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:196:14: error: use of undeclared identifier 'old'\n                restorescr(old);\n                           ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:197:10: error: use of undeclared identifier 'ret'\n                return ret;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:201:14: error: use of undeclared identifier 'old'\n                restorescr(old);\n                           ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:202:10: error: use of undeclared identifier 'ret'\n                return ret;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:208:14: error: use of undeclared identifier 'old'\n                restorescr(old);\n                           ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:209:10: error: use of undeclared identifier 'ret'\n                return ret;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:223:14: error: use of undeclared identifier 'old'\n                restorescr(old);\n                           ^\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n20 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "0c1a9e66": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "337efa5c": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:54:3: error: void function 'cgc_freeCVF' should not return a value [-Wreturn-type]\n                return 0;\n                ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:88:2: error: void function 'cgc_freeCVF' should not return a value [-Wreturn-type]\n        return 0;\n        ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:700:3: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                return 0;\n                ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:706:3: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                return 0;\n                ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:711:3: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                return 0;\n                ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:717:3: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                return 0;\n                ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:733:6: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                                        return 0;\n                                        ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:741:6: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                                        return 0;\n                                        ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:749:6: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                                        return 0;\n                                        ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:766:6: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                                        return 0;\n                                        ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:775:6: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                                        return 0;\n                                        ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:781:5: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n                                return 0;\n                                ^      ~\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:793:2: error: void function 'cgc_renderCVF' should not return a value [-Wreturn-type]\n        return 0;\n        ^      ~\n13 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "3747e32f": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:435:15: error: use of undeclared identifier 'no_draw'\n        if (xbits || no_draw) {\n                     ^\n1 error generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "22478251": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:35:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:43:11: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                        return ZEND_HASH_APPLY_KEEP;\n                               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:101:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:105:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:121:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:128:11: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                        return ZEND_HASH_APPLY_KEEP;\n                               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:190:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:194:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:200:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:213:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:232:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:239:11: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                        return ZEND_HASH_APPLY_KEEP;\n                               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:283:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:295:10: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                return ZEND_HASH_APPLY_KEEP;\n                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:313:11: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                        return ZEND_HASH_APPLY_KEEP;\n                               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:322:11: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                        return ZEND_HASH_APPLY_KEEP;\n                               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:346:12: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                                return ZEND_HASH_APPLY_KEEP;\n                                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:355:12: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                                return ZEND_HASH_APPLY_KEEP;\n                                       ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:376:11: error: use of undeclared identifier 'ZEND_HASH_APPLY_KEEP'\n                        return ZEND_HASH_APPLY_KEEP;\n                               ^\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n20 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "d7491a50": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:549:26: error: use of undeclared identifier 'devcnt'\n        for (index = 0; index < devcnt; index++) {\n                                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:559:26: error: use of undeclared identifier 'devcnt'\n        for (index = 0; index < devcnt; index++) {\n                                ^\n2 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "2627714b": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:93:2: error: use of undeclared identifier 'size_t'; did you mean 'sizeof'?\n        size_t index = 0;\n        ^~~~~~\n        sizeof\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:93:9: error: use of undeclared identifier 'index'\n        size_t index = 0;\n               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:94:2: error: use of undeclared identifier 'size_t'; did you mean 'sizeof'?\n        size_t length = 0;\n        ^~~~~~\n        sizeof\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:94:9: error: use of undeclared identifier 'length'\n        size_t length = 0;\n               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:97:2: error: use of undeclared identifier 'size_t'; did you mean 'sizeof'?\n        size_t tb = 0;\n        ^~~~~~\n        sizeof\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:97:9: error: use of undeclared identifier 'tb'\n        size_t tb = 0;\n               ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:108:2: error: use of undeclared identifier 'length'\n        length = cvf->width * cvf->height;\n        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:120:31: error: use of undeclared identifier 'tb'\n        while ( cgc_receiveWrapper( &tb, 1 ) == 0 ) {\n                                     ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:124:10: error: use of undeclared identifier 'index'\n        while ( index < cvf->rCount ) {\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:125:28: error: use of undeclared identifier 'index'\n                rf = cvf->renderedFrames[index];\n                                         ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:131:23: error: use of undeclared identifier 'length'\n                for (int i = 0; i < length; i++) {\n                                    ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:138:3: error: use of undeclared identifier 'index'\n                index++;\n                ^\n12 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "576ce867": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:35:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:43:4: error: use of undeclared identifier 'no_draw'\n                        no_draw = 1;\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:101:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:105:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:121:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:128:4: error: use of undeclared identifier 'no_draw'\n                        no_draw = 1;\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:190:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:194:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:200:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:213:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:232:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:239:4: error: use of undeclared identifier 'no_draw'\n                        no_draw = 1;\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:283:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:295:3: error: use of undeclared identifier 'no_draw'\n                no_draw = 1;\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:313:4: error: use of undeclared identifier 'no_draw'\n                        no_draw = 1;\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:322:4: error: use of undeclared identifier 'no_draw'\n                        no_draw = 1;\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:346:5: error: use of undeclared identifier 'no_draw'\n                                no_draw = 1;\n                                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:355:5: error: use of undeclared identifier 'no_draw'\n                                no_draw = 1;\n                                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:376:4: error: use of undeclared identifier 'no_draw'\n                        no_draw = 1;\n                        ^\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\n20 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "f0e6626d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "dfbd338c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8f38d2a6": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:54:8: error: use of undeclared label 'done'\n                goto done;\n                     ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:700:8: error: use of undeclared label 'done'\n                goto done;\n                     ^\n2 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "2720b910": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3fdf2c5b": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:459:2: error: use of undeclared identifier 'LPTSTR'\n        LPTSTR pixelArray = NULL;\n        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:489:2: error: use of undeclared identifier 'pixelArray'\n        pixelArray = cgc_malloc( pixelCount + 1 );\n        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:491:6: error: use of undeclared identifier 'pixelArray'\n        if (pixelArray == NULL ) {\n            ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:495:14: error: use of undeclared identifier 'pixelArray'\n        cgc_memset( pixelArray, 0, pixelCount + 1 );\n                    ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:501:13: error: use of undeclared identifier 'pixelArray'\n                        cgc_free(pixelArray);\n                                 ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:502:4: error: use of undeclared identifier 'pixelArray'\n                        pixelArray = NULL;\n                        ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:506:3: error: use of undeclared identifier 'pixelArray'\n                pixelArray[i] = (unsigned char)(t&0xff);\n                ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:513:37: error: use of undeclared identifier 'pixelArray'\n        pNewImage->pds[index].pixelArray = pixelArray;\n                                           ^\n8 errors generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "7113e2bc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7c8c525e": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:469:28: error: use of undeclared identifier 'zend_long'\n        if (index < 0 || index > (zend_long)7) {\n                                  ^\n1 error generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "5cf649bc": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:609:6: error: redefinition of 'i'\n        int i;\n            ^\n/tmp/FlexiRepair/CGC_Video_Format_Parser_and_Viewer_0/CGC_Video_Format_Parser_and_Viewer/src/parseCVF.c:598:6: note: previous definition is here\n        int i;\n            ^\n1 error generated.\nmake[2]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/src/parseCVF.c.o] Error 1\nmake[1]: *** [CGC_Video_Format_Parser_and_Viewer/CMakeFiles/CGC_Video_Format_Parser_and_Viewer.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "b91b03a3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "356fd3bb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "87363724": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    }
  },
  "neg_tests": 1,
  "pos_tests": 20,
  "passed_neg_tests": 4,
  "passed_pos_tests": 187,
  "failed_neg_tests": 14,
  "failed_pos_tests": 173,
  "duration": 3392.660152,
  "errors": []
}