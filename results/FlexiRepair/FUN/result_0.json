{
  "repair_begin": "2021-05-07 22:41:26.564389",
  "repair_end": "2021-05-07 23:41:26.601533",
  "patches": [
    {
      "target_file": "src/main.i",
      "fix": "",
      "edits": [
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-27324-f864ad-main.c\n@@ -153,8 +153,10 @@ static intptr_t cgc_my_htbl_init(htbl_t\n     tbl->size = initial_size;\n     tbl->nodes = CALL(CALLOC, tbl->size, sizeof(htbl_node_t *));\n \n-    if (tbl->nodes == NULL)\n-        return 0;\n+    if (tbl->nodes == NULL) {\n+        restorescr(old);\n+        return ret;\n+    }\n \n     return 1;\n }\n@@ -346,8 +348,10 @@ static intptr_t cgc_my_strncmp(char * a,\n             return result;\n     }\n \n-    if (i == len)\n-        return 0;\n+    if (i == len) {\n+        restorescr(old);\n+        return ret;\n+    }\n \n     return CALL(BYTECMP, a[i], b[i]);\n }\n@@ -417,12 +421,16 @@ static intptr_t cgc_my_verify_word(const\n         if ((intptr_t)CALL(SEARCH_WORDS, root, 1) >= 0)\n             break;\n     }\n-    if (i == len - 3)\n-        return 0;\n+    if (i == len - 3) {\n+        restorescr(old);\n+        return ret;\n+    }\n \n     // check that word doesn't already exist\n-    if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n-        return 0;\n+    if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0) {\n+        restorescr(old);\n+        return ret;\n+    }\n \n     return 1;\n }\n@@ -430,14 +438,18 @@ static intptr_t cgc_my_verify_word(const\n static intptr_t cgc_my_add_word(const char *word)\n {\n     cgc_size_t i;\n-    if (CALL(VERIFY_WORD, word) == 0)\n-        return 0;\n+    if (CALL(VERIFY_WORD, word) == 0) {\n+        restorescr(old);\n+        return ret;\n+    }\n \n     for (i = 0; words[i] != NULL; i++) ;\n \n #ifdef PATCHED\n-    if (i >= sizeof(words) / sizeof(words[0]))\n-        return 0;\n+    if (i >= sizeof(words) / sizeof(words[0])) {\n+        restorescr(old);\n+        return ret;\n+    }\n #endif\n \n     words[i] = CALL(STRDUP, word);\n@@ -690,8 +702,10 @@ static uintptr_t cgc_my_read_all(char *b\n     cgc_size_t bytes;\n     while (len > 0)\n     {\n-        if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n-            return 0;\n+        if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0) {\n+            restorescr(old);\n+            return ret;\n+        }\n         buf += bytes;\n         len -= bytes;\n     }\n@@ -702,8 +716,10 @@ static intptr_t cgc_my_read_uint(uintptr\n {\n     uintptr_t value;\n     uint8_t byte;\n-    if (!CALL(READ_ALL, &byte, 1))\n-        return 0;\n+    if (!CALL(READ_ALL, &byte, 1)) {\n+        restorescr(old);\n+        return ret;\n+    }\n \n     if (byte < 0x80)\n     {\n@@ -712,14 +728,18 @@ static intptr_t cgc_my_read_uint(uintptr\n     else if (byte < 0xFF)\n     {\n         uint8_t byte2;\n-        if (!CALL(READ_ALL, &byte2, 1))\n-            return 0;\n+        if (!CALL(READ_ALL, &byte2, 1)) {\n+            restorescr(old);\n+            return ret;\n+        }\n         value = ((byte & 0x7F) << 8) | byte2;\n     }\n     else\n     {\n-        if (!CALL(READ_ALL, &value, sizeof(value)))\n-            return 0;\n+        if (!CALL(READ_ALL, &value, sizeof(value))) {\n+            restorescr(old);\n+            return ret;\n+        }\n     }\n \n     *pvalue = value;\n@@ -745,8 +765,10 @@ static intptr_t cgc_my_read(char *buf, i\n static intptr_t cgc_my_read_string(char *buf, intptr_t max)\n {\n     intptr_t actual;\n-    if (max == 0)\n-        return 0;\n+    if (max == 0) {\n+        restorescr(old);\n+        return ret;\n+    }\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n@@ -889,7 +911,8 @@ int main(int cgc_argc, char *cgc_argv[])\n         }\n     }\n \n-    return 0;\n+    restorescr(old);\n+    return ret;\n }\n \n funptr_t funcs[] = {\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-675-f2c05d-main.c\n@@ -410,7 +410,7 @@ static intptr_t cgc_my_verify_word(const\n     // check that it contains a non-trivial root word\n     for (i = 0; i < len - 3; i++)\n     {\n-        char root[4];\n+        char root[4] = \"\";\n         CALL(STRNCPY, root, word, 3);\n         root[3] = 0;\n \n@@ -521,7 +521,7 @@ static const char *cgc_my_random_word(ht\n static char *cgc_my_generate_text(htbl_t *tbl, int training)\n {\n     const char *prev = \"\", *word, *outword;\n-    char tmp[128];\n+    char tmp[128] = \"\";\n     cgc_size_t i = 0;\n     uintptr_t len;\n \n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-5302-b02b40-main.c\n@@ -168,7 +168,7 @@ static void cgc_my_htbl_enlarge(htbl_t *\n     if (new_tbl == NULL)\n         return;\n \n-    for (i = 0; i < tbl->size; i++)\n+    for (i = 1; i <= tbl->size; i++)\n     {\n         htbl_node_t *node, *next_node;\n         for (node = tbl->nodes[i]; node != NULL; node = next_node)\n@@ -192,7 +192,7 @@ static void cgc_my_htbl_enlarge(htbl_t *\n static void cgc_my_htbl_first(htbl_t *tbl, htbl_iter_t *iter)\n {\n     cgc_size_t i;\n-    for (i = 0; i < tbl->size; i++)\n+    for (i = 1; i <= tbl->size; i++)\n         if (tbl->nodes[i] != NULL)\n             break;\n \n@@ -291,7 +291,7 @@ static void cgc_my_htbl_free(htbl_t *tbl\n {\n     cgc_size_t i;\n \n-    for (i = 0; i < tbl->size; i++)\n+    for (i = 1; i <= tbl->size; i++)\n     {\n         htbl_node_t *node, *next_node;\n         for (node = tbl->nodes[i]; node != NULL; node = next_node)\n@@ -328,7 +328,7 @@ static intptr_t cgc_my_strlen(const char\n static void cgc_my_strncpy(char * dest, const char * src, intptr_t len)\n {\n     cgc_size_t i;\n-    for (i = 0; i < len; i++)\n+    for (i = 1; i <= len; i++)\n     {\n         dest[i] = src[i];\n         if (src[i] == 0)\n@@ -408,7 +408,7 @@ static intptr_t cgc_my_verify_word(const\n     int len = CALL(STRLEN, word), i;\n     \n     // check that it contains a non-trivial root word\n-    for (i = 0; i < len - 3; i++)\n+    for (i = 1; i <= len - 3; i++)\n     {\n         char root[4];\n         CALL(STRNCPY, root, word, 3);\n@@ -757,7 +757,7 @@ static intptr_t cgc_my_read_string(char\n static void cgc_my_protect(uintptr_t new_key)\n {\n     cgc_size_t i;\n-    for (i = 0; i < FUNCS_END; i++)\n+    for (i = 1; i <= FUNCS_END; i++)\n         *(uintptr_t *)(&funcs[i]) += new_key - secret_key;\n     secret_key = new_key;\n }\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-29519-01b26d-main.c\n@@ -166,7 +166,7 @@ static void cgc_my_htbl_enlarge(htbl_t *\n \n     new_tbl = CALL(CALLOC, new_size, sizeof(htbl_node_t *));\n     if (new_tbl == NULL)\n-        return;\n+        return 0;\n \n     for (i = 0; i < tbl->size; i++)\n     {\n@@ -187,6 +187,7 @@ static void cgc_my_htbl_enlarge(htbl_t *\n     CALL(FREE, tbl->nodes);\n     tbl->nodes = new_tbl;\n     tbl->size = new_size;\n+    return 0;\n }\n \n static void cgc_my_htbl_first(htbl_t *tbl, htbl_iter_t *iter)\n@@ -203,7 +204,7 @@ static void cgc_my_htbl_first(htbl_t *tb\n static void cgc_my_htbl_next(htbl_t *tbl, htbl_iter_t *iter)\n {\n     if (iter->cur == NULL)\n-        return;\n+        return 0;\n \n     if (iter->cur->next != NULL)\n     {\n@@ -222,6 +223,7 @@ static void cgc_my_htbl_next(htbl_t *tbl\n         else\n             iter->cur = tbl->nodes[i];\n     }\n+    return 0;\n }\n \n static inline htbl_node_t *find_node(htbl_t *tbl, const char *key)\n@@ -637,12 +639,13 @@ add_next_word:\n         {\n             next_tbl = CALL(CALLOC, 1, sizeof(htbl_t));\n             if (next_tbl == 0)\n-                return;\n+                return 0;\n             CALL(HTBL_INIT, next_tbl, 8);\n             CALL(HTBL_SET, tbl, prev, next_tbl);\n         }\n         CALL(HTBL_SET, next_tbl, word, CALL(HTBL_GET, next_tbl, word) + 1);\n     }\n+    return 0;\n }\n \n static void cgc_my_write_error(uintptr_t value)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-2454-0300d1-main.c\n@@ -430,8 +430,6 @@ static intptr_t cgc_my_verify_word(const\n static intptr_t cgc_my_add_word(const char *word)\n {\n     cgc_size_t i;\n-    if (CALL(VERIFY_WORD, word) == 0)\n-        return 0;\n \n     for (i = 0; words[i] != NULL; i++) ;\n \n@@ -702,8 +700,6 @@ static intptr_t cgc_my_read_uint(uintptr\n {\n     uintptr_t value;\n     uint8_t byte;\n-    if (!CALL(READ_ALL, &byte, 1))\n-        return 0;\n \n     if (byte < 0x80)\n     {\n@@ -712,14 +708,10 @@ static intptr_t cgc_my_read_uint(uintptr\n     else if (byte < 0xFF)\n     {\n         uint8_t byte2;\n-        if (!CALL(READ_ALL, &byte2, 1))\n-            return 0;\n         value = ((byte & 0x7F) << 8) | byte2;\n     }\n     else\n     {\n-        if (!CALL(READ_ALL, &value, sizeof(value)))\n-            return 0;\n     }\n \n     *pvalue = value;\n@@ -745,8 +737,6 @@ static intptr_t cgc_my_read(char *buf, i\n static intptr_t cgc_my_read_string(char *buf, intptr_t max)\n {\n     intptr_t actual;\n-    if (max == 0)\n-        return 0;\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-23096-e5e5fd-main.c\n@@ -193,8 +193,9 @@ static void cgc_my_htbl_first(htbl_t *tb\n {\n     cgc_size_t i;\n     for (i = 0; i < tbl->size; i++)\n-        if (tbl->nodes[i] != NULL)\n+    {if (tbl->nodes[i] < NULL || tbl->nodes[i] > NULL + strlen(NULL))\n             break;\n+    }\n \n     iter->i = i;\n     iter->cur = tbl->nodes[i];\n@@ -213,8 +214,9 @@ static void cgc_my_htbl_next(htbl_t *tbl\n     {\n         cgc_size_t i;\n         for (i = iter->i + 1; i < tbl->size; i++)\n-            if (tbl->nodes[i] != NULL)\n+        {if (tbl->nodes[i] < NULL || tbl->nodes[i] > NULL + strlen(NULL))\n                 break;\n+        }\n         iter->i = i;\n \n         if (iter->i == tbl->size)\n@@ -342,7 +344,7 @@ static intptr_t cgc_my_strncmp(char * a,\n     for (i = 0; i < len && a[i] != 0 && b[i] != 0; i++)\n     {\n         int result = CALL(BYTECMP, a[i], b[i]);\n-        if (result != 0)\n+        if (result < 0 || result > 0 + strlen(0))\n             return result;\n     }\n \n@@ -358,7 +360,7 @@ static intptr_t cgc_my_strcmp(char * a,\n     for (i = 0; a[i] != 0 && b[i] != 0; i++)\n     {\n         int result = CALL(BYTECMP, a[i], b[i]);\n-        if (result != 0)\n+        if (result < 0 || result > 0 + strlen(0))\n             return result;\n     }\n \n@@ -495,7 +497,7 @@ static const char *cgc_my_random_word(ht\n     }\n \n     // end the sentence if possible and cur_length is large\n-    if (CALL(HTBL_GET, tbl, \"\") != 0)\n+    if (CALL(HTBL_GET, tbl, \"\") < 0 || CALL(HTBL_GET, tbl, \"\") > 0 + strlen(0))\n     {\n         rand = CALL(RANDINT, 0, 10);\n         if (cur_length >= 30)\n@@ -548,8 +550,9 @@ static char *cgc_my_generate_text(htbl_t\n         {\n             if (CALL(STRCMP, outword, \"s\") == 0)\n                 tmp[i++] = '\\'';\n-            else if (CALL(STRCMP, outword, \"\") != 0)\n-                tmp[i++] = ' ';\n+            else {if (CALL(STRCMP, outword, \"\") < 0 || CALL(STRCMP, outword, \"\") > 0 + strlen(0))\n+                    tmp[i++] = ' ';\n+            }\n             CALL(MEMCPY, &tmp[i], outword, len);\n         }\n \n@@ -629,7 +632,7 @@ add_next_word:\n         }\n     }\n \n-    if (word[0] != 0)\n+    if (word[0] < 0 || word[0] > 0 + strlen(0))\n     {\n         word[0] = 0;\n         next_tbl = CALL(HTBL_GET, tbl, prev);\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-331-ee0947-main.c\n@@ -367,7 +367,7 @@ static intptr_t cgc_my_strcmp(char * a,\n \n static intptr_t cgc_my_bytecmp(intptr_t a, intptr_t b)\n {\n-    return a - b;\n+    return (a - b - 1);\n }\n \n static intptr_t cgc_my_search_words(const char *needle, int partial)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-31232-981400-main.c\n@@ -779,7 +779,7 @@ int main(int cgc_argc, char *cgc_argv[])\n     CALL(HTBL_INIT, &tbl, 128);\n     CALL(ANALYZE_TEXT, &tbl, cgc_text);\n \n-    while (1)\n+    for (;;)\n     {\n         if (!CALL(READ_UINT, &cmd))\n             break;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-30931-9737e2-main.c\n@@ -154,7 +154,7 @@ static intptr_t cgc_my_htbl_init(htbl_t\n     tbl->nodes = CALL(CALLOC, tbl->size, sizeof(htbl_node_t *));\n \n     if (tbl->nodes == NULL)\n-        return 0;\n+        return ZEND_HASH_APPLY_KEEP;\n \n     return 1;\n }\n@@ -347,7 +347,7 @@ static intptr_t cgc_my_strncmp(char * a,\n     }\n \n     if (i == len)\n-        return 0;\n+        return ZEND_HASH_APPLY_KEEP;\n \n     return CALL(BYTECMP, a[i], b[i]);\n }\n@@ -418,11 +418,11 @@ static intptr_t cgc_my_verify_word(const\n             break;\n     }\n     if (i == len - 3)\n-        return 0;\n+        return ZEND_HASH_APPLY_KEEP;\n \n     // check that word doesn't already exist\n     if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n-        return 0;\n+        return ZEND_HASH_APPLY_KEEP;\n \n     return 1;\n }\n@@ -431,13 +431,13 @@ static intptr_t cgc_my_add_word(const ch\n {\n     cgc_size_t i;\n     if (CALL(VERIFY_WORD, word) == 0)\n-        return 0;\n+        return ZEND_HASH_APPLY_KEEP;\n \n     for (i = 0; words[i] != NULL; i++) ;\n \n #ifdef PATCHED\n     if (i >= sizeof(words) / sizeof(words[0]))\n-        return 0;\n+        return ZEND_HASH_APPLY_KEEP;\n #endif\n \n     words[i] = CALL(STRDUP, word);\n@@ -691,7 +691,7 @@ static uintptr_t cgc_my_read_all(char *b\n     while (len > 0)\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n-            return 0;\n+            return ZEND_HASH_APPLY_KEEP;\n         buf += bytes;\n         len -= bytes;\n     }\n@@ -703,7 +703,7 @@ static intptr_t cgc_my_read_uint(uintptr\n     uintptr_t value;\n     uint8_t byte;\n     if (!CALL(READ_ALL, &byte, 1))\n-        return 0;\n+        return ZEND_HASH_APPLY_KEEP;\n \n     if (byte < 0x80)\n     {\n@@ -713,13 +713,13 @@ static intptr_t cgc_my_read_uint(uintptr\n     {\n         uint8_t byte2;\n         if (!CALL(READ_ALL, &byte2, 1))\n-            return 0;\n+            return ZEND_HASH_APPLY_KEEP;\n         value = ((byte & 0x7F) << 8) | byte2;\n     }\n     else\n     {\n         if (!CALL(READ_ALL, &value, sizeof(value)))\n-            return 0;\n+            return ZEND_HASH_APPLY_KEEP;\n     }\n \n     *pvalue = value;\n@@ -746,7 +746,7 @@ static intptr_t cgc_my_read_string(char\n {\n     intptr_t actual;\n     if (max == 0)\n-        return 0;\n+        return ZEND_HASH_APPLY_KEEP;\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n@@ -889,7 +889,7 @@ int main(int cgc_argc, char *cgc_argv[])\n         }\n     }\n \n-    return 0;\n+    return ZEND_HASH_APPLY_KEEP;\n }\n \n funptr_t funcs[] = {\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-2160-c29ac4-main.c\n@@ -736,10 +736,7 @@ static intptr_t cgc_my_read(char *buf, i\n     if (rlen > max)\n         return -1;\n \n-    if (!CALL(READ_ALL, buf, rlen))\n-        return -1;\n-\n-    return rlen;\n+    return (CALL(READ_ALL, buf, rlen) < 0) ? -1 : CALL(READ_ALL, buf, rlen);\n }\n \n static intptr_t cgc_my_read_string(char *buf, intptr_t max)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-23279-dbca56-main.c\n@@ -156,7 +156,7 @@ static intptr_t cgc_my_htbl_init(htbl_t\n     if (tbl->nodes == NULL)\n         return 0;\n \n-    return 1;\n+    return (EINVAL);\n }\n \n static void cgc_my_htbl_enlarge(htbl_t *tbl)\n@@ -424,7 +424,7 @@ static intptr_t cgc_my_verify_word(const\n     if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n         return 0;\n \n-    return 1;\n+    return (EINVAL);\n }\n \n static intptr_t cgc_my_add_word(const char *word)\n@@ -442,7 +442,7 @@ static intptr_t cgc_my_add_word(const ch\n \n     words[i] = CALL(STRDUP, word);\n     words[i+1] = NULL;\n-    return 1;\n+    return (EINVAL);\n }\n \n static const char *cgc_my_random_dict_word()\n@@ -695,7 +695,7 @@ static uintptr_t cgc_my_read_all(char *b\n         buf += bytes;\n         len -= bytes;\n     }\n-    return 1;\n+    return (EINVAL);\n }\n \n static intptr_t cgc_my_read_uint(uintptr_t *pvalue)\n@@ -723,7 +723,7 @@ static intptr_t cgc_my_read_uint(uintptr\n     }\n \n     *pvalue = value;\n-    return 1;\n+    return (EINVAL);\n }\n \n static intptr_t cgc_my_read(char *buf, intptr_t max)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-2976-98443f-main.c\n@@ -384,7 +384,7 @@ static intptr_t cgc_my_search_words(cons\n \n static void cgc_my_sort_words(uintptr_t comparator, intptr_t reverse)\n {\n-    int done;\n+    const struct options_table_entry *oe;\n     cgc_size_t i;\n \n     do {\n@@ -459,7 +459,7 @@ static uintptr_t cgc_my_randint(uintptr_\n     cgc_size_t bytes;\n     uintptr_t rand, range = max - min;\n \n-    int fd;\n+    const struct options_table_entry *oe;\n try_again:\n #if 0\n     if (cgc_random(&rand, sizeof(rand), &bytes) != 0 || bytes != sizeof(rand))\n@@ -653,7 +653,7 @@ static void cgc_my_write_error(uintptr_t\n static void cgc_my_write_uint(uintptr_t value)\n {\n     uint8_t tmp[sizeof(value) + 1];\n-    int to_send;\n+    const struct options_table_entry *oe;\n     cgc_size_t bytes;\n \n     if (value < 0x80)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-1631-625d04-main.c\n@@ -702,7 +702,7 @@ static intptr_t cgc_my_read_uint(uintptr\n {\n     uintptr_t value;\n     uint8_t byte;\n-    if (!CALL(READ_ALL, &byte, 1))\n+    if (CALL(READ_ALL, &byte, 1) == MAP_FAILED)\n         return 0;\n \n     if (byte < 0x80)\n@@ -712,13 +712,13 @@ static intptr_t cgc_my_read_uint(uintptr\n     else if (byte < 0xFF)\n     {\n         uint8_t byte2;\n-        if (!CALL(READ_ALL, &byte2, 1))\n+        if (CALL(READ_ALL, &byte2, 1) == MAP_FAILED)\n             return 0;\n         value = ((byte & 0x7F) << 8) | byte2;\n     }\n     else\n     {\n-        if (!CALL(READ_ALL, &value, sizeof(value)))\n+        if (CALL(READ_ALL, &value, sizeof(value)) == MAP_FAILED)\n             return 0;\n     }\n \n@@ -730,13 +730,13 @@ static intptr_t cgc_my_read(char *buf, i\n {\n     uintptr_t rlen;\n     \n-    if (!CALL(READ_UINT, &rlen))\n+    if (CALL(READ_UINT, &rlen) == MAP_FAILED)\n         return -1;\n \n     if (rlen > max)\n         return -1;\n \n-    if (!CALL(READ_ALL, buf, rlen))\n+    if (CALL(READ_ALL, buf, rlen) == MAP_FAILED)\n         return -1;\n \n     return rlen;\n@@ -781,7 +781,7 @@ int main(int cgc_argc, char *cgc_argv[])\n \n     while (1)\n     {\n-        if (!CALL(READ_UINT, &cmd))\n+        if (CALL(READ_UINT, &cmd) == MAP_FAILED)\n             break;\n \n         if (cmd == CMD_QUIT)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-28432-95dec9-main.c\n@@ -166,7 +166,7 @@ static void cgc_my_htbl_enlarge(htbl_t *\n \n     new_tbl = CALL(CALLOC, new_size, sizeof(htbl_node_t *));\n     if (new_tbl == NULL)\n-        return;\n+        goto done;\n \n     for (i = 0; i < tbl->size; i++)\n     {\n@@ -187,6 +187,7 @@ static void cgc_my_htbl_enlarge(htbl_t *\n     CALL(FREE, tbl->nodes);\n     tbl->nodes = new_tbl;\n     tbl->size = new_size;\n+    goto done;\n }\n \n static void cgc_my_htbl_first(htbl_t *tbl, htbl_iter_t *iter)\n@@ -203,7 +204,7 @@ static void cgc_my_htbl_first(htbl_t *tb\n static void cgc_my_htbl_next(htbl_t *tbl, htbl_iter_t *iter)\n {\n     if (iter->cur == NULL)\n-        return;\n+        goto done;\n \n     if (iter->cur->next != NULL)\n     {\n@@ -222,6 +223,7 @@ static void cgc_my_htbl_next(htbl_t *tbl\n         else\n             iter->cur = tbl->nodes[i];\n     }\n+    goto done;\n }\n \n static inline htbl_node_t *find_node(htbl_t *tbl, const char *key)\n@@ -637,12 +639,13 @@ add_next_word:\n         {\n             next_tbl = CALL(CALLOC, 1, sizeof(htbl_t));\n             if (next_tbl == 0)\n-                return;\n+                goto done;\n             CALL(HTBL_INIT, next_tbl, 8);\n             CALL(HTBL_SET, tbl, prev, next_tbl);\n         }\n         CALL(HTBL_SET, next_tbl, word, CALL(HTBL_GET, next_tbl, word) + 1);\n     }\n+    goto done;\n }\n \n static void cgc_my_write_error(uintptr_t value)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-30039-b60894-main.c\n@@ -408,7 +408,7 @@ static intptr_t cgc_my_verify_word(const\n     int len = CALL(STRLEN, word), i;\n     \n     // check that it contains a non-trivial root word\n-    for (i = 0; i < len - 3; i++)\n+    for (i = 0; i < len; i++)\n     {\n         char root[4];\n         CALL(STRNCPY, root, word, 3);\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-21379-de120a-main.c\n@@ -770,7 +770,7 @@ static void cgc_my_init()\n int main(int cgc_argc, char *cgc_argv[])\n {\n     uintptr_t cmd, value;\n-    char buf[32], *tmp;\n+    char *tmp;\n     htbl_t tbl;\n \n     CALL(INIT, 0);\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-29355-8b2912-main.c\n@@ -241,7 +241,7 @@ static uintptr_t cgc_my_htbl_get(htbl_t\n     htbl_node_t *node = find_node(tbl, key);\n \n     if (node == NULL)\n-        return NULL;\n+        return;\n     else\n         return node->value;\n }\n@@ -256,17 +256,17 @@ static uintptr_t cgc_my_htbl_set(htbl_t\n             CALL(HTBL_ENLARGE, tbl);\n \n         if (tbl->nodes == NULL)\n-            return NULL;\n+            return;\n \n         node = cgc_malloc(sizeof(htbl_node_t));\n         if (node == NULL)\n-            return NULL;\n+            return;\n \n         node->key = CALL(STRDUP, key);\n         if (node->key == NULL)\n         {\n             cgc_free(node);\n-            return NULL;\n+            return;\n         }\n         node->value = value;\n \n@@ -277,7 +277,7 @@ static uintptr_t cgc_my_htbl_set(htbl_t\n             node->next->prev = node;\n         tbl->nodes[hash] = node;\n         tbl->count++;\n-        return NULL;\n+        return;\n     }\n     else\n     {\n@@ -313,7 +313,7 @@ static char *cgc_my_strdup(const char *s\n     cgc_size_t length = CALL(STRLEN, s);\n     char *str = CALL(CALLOC, length + 1, 1);\n     if (str == NULL)\n-        return NULL;\n+        return;\n     CALL(STRCPY, str, s);\n     return str;\n }\n@@ -484,7 +484,7 @@ static const char *cgc_my_random_word(ht\n         count += iter.cur->value;\n \n     if (count == 0)\n-        return NULL;\n+        return;\n \n     rand = CALL(RANDINT, 0, count);\n     for (CALL(HTBL_FIRST, tbl, &iter); iter.cur != NULL; CALL(HTBL_NEXT, tbl, &iter))\n@@ -528,7 +528,7 @@ static char *cgc_my_generate_text(htbl_t\n     do {\n         word = CALL(RANDOM_WORD, CALL(HTBL_GET, tbl, prev), i);\n         if (word == NULL)\n-            return NULL;\n+            return;\n \n         if (!training || CALL(RANDINT, 0, 10) != 0)\n             outword = word;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-576-fb2923-main.c\n@@ -252,7 +252,7 @@ static uintptr_t cgc_my_htbl_set(htbl_t\n     if (node == NULL)\n     {\n         uintptr_t hash;\n-        if (tbl->count * 2 >= tbl->size)\n+        if (ntohs(tbl->size) <= ntohs(tbl->count * 2))\n             CALL(HTBL_ENLARGE, tbl);\n \n         if (tbl->nodes == NULL)\n@@ -414,14 +414,14 @@ static intptr_t cgc_my_verify_word(const\n         CALL(STRNCPY, root, word, 3);\n         root[3] = 0;\n \n-        if ((intptr_t)CALL(SEARCH_WORDS, root, 1) >= 0)\n+        if (ntohs(0) <= ntohs((intptr_t)CALL(SEARCH_WORDS, root, 1)))\n             break;\n     }\n     if (i == len - 3)\n         return 0;\n \n     // check that word doesn't already exist\n-    if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n+    if (ntohs(0) <= ntohs((intptr_t)CALL(SEARCH_WORDS, word, 0)))\n         return 0;\n \n     return 1;\n@@ -436,7 +436,7 @@ static intptr_t cgc_my_add_word(const ch\n     for (i = 0; words[i] != NULL; i++) ;\n \n #ifdef PATCHED\n-    if (i >= sizeof(words) / sizeof(words[0]))\n+    if (ntohs(sizeof(words) / sizeof(words[0])) <= ntohs(i))\n         return 0;\n #endif\n \n@@ -468,7 +468,7 @@ try_again:\n     rand = cgc_tornado();\n     \n     uintptr_t q = UINTPTR_MAX - (UINTPTR_MAX % range);\n-    if (rand >= q)\n+    if (ntohs(q) <= ntohs(rand))\n         goto try_again;\n \n     return min + (rand % range);\n@@ -500,17 +500,17 @@ static const char *cgc_my_random_word(ht\n         rand = CALL(RANDINT, 0, 10);\n         if (cur_length >= 30)\n         {\n-            if (rand >= 3)\n+            if (ntohs(3) <= ntohs(rand))\n                 return \"\";\n         }\n         else if (cur_length >= 20)\n         {\n-            if (rand >= 5)\n+            if (ntohs(5) <= ntohs(rand))\n                 return \"\";\n         }\n         else\n         {\n-            if (rand >= 9)\n+            if (ntohs(9) <= ntohs(rand))\n                 return \"\";\n         }\n     }\n@@ -536,7 +536,7 @@ static char *cgc_my_generate_text(htbl_t\n             outword = CALL(RANDOM_DICT_WORD, 0);\n \n         len = CALL(STRLEN, outword);\n-        if (i + len + 5 >= sizeof(tmp))\n+        if (ntohs(sizeof(tmp)) <= ntohs(i + len + 5))\n             break;\n \n         if (i == 0)\n@@ -592,7 +592,7 @@ static void cgc_my_analyze_text(htbl_t *\n             s++;\n         end = s;\n \n-        if (end-start >= sizeof(word))\n+        if (ntohs(sizeof(word)) <= ntohs(end - start))\n             continue;\n \n         while (*s != 0 && CALL(IS_ALPHA, *s) == 0)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-23047-243267-main.c\n@@ -154,7 +154,7 @@ static intptr_t cgc_my_htbl_init(htbl_t\n     tbl->nodes = CALL(CALLOC, tbl->size, sizeof(htbl_node_t *));\n \n     if (tbl->nodes == NULL)\n-        return 0;\n+        no_draw = 1;\n \n     return 1;\n }\n@@ -347,7 +347,7 @@ static intptr_t cgc_my_strncmp(char * a,\n     }\n \n     if (i == len)\n-        return 0;\n+        no_draw = 1;\n \n     return CALL(BYTECMP, a[i], b[i]);\n }\n@@ -418,11 +418,11 @@ static intptr_t cgc_my_verify_word(const\n             break;\n     }\n     if (i == len - 3)\n-        return 0;\n+        no_draw = 1;\n \n     // check that word doesn't already exist\n     if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n-        return 0;\n+        no_draw = 1;\n \n     return 1;\n }\n@@ -431,13 +431,13 @@ static intptr_t cgc_my_add_word(const ch\n {\n     cgc_size_t i;\n     if (CALL(VERIFY_WORD, word) == 0)\n-        return 0;\n+        no_draw = 1;\n \n     for (i = 0; words[i] != NULL; i++) ;\n \n #ifdef PATCHED\n     if (i >= sizeof(words) / sizeof(words[0]))\n-        return 0;\n+        no_draw = 1;\n #endif\n \n     words[i] = CALL(STRDUP, word);\n@@ -691,7 +691,7 @@ static uintptr_t cgc_my_read_all(char *b\n     while (len > 0)\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n-            return 0;\n+            no_draw = 1;\n         buf += bytes;\n         len -= bytes;\n     }\n@@ -703,7 +703,7 @@ static intptr_t cgc_my_read_uint(uintptr\n     uintptr_t value;\n     uint8_t byte;\n     if (!CALL(READ_ALL, &byte, 1))\n-        return 0;\n+        no_draw = 1;\n \n     if (byte < 0x80)\n     {\n@@ -713,13 +713,13 @@ static intptr_t cgc_my_read_uint(uintptr\n     {\n         uint8_t byte2;\n         if (!CALL(READ_ALL, &byte2, 1))\n-            return 0;\n+            no_draw = 1;\n         value = ((byte & 0x7F) << 8) | byte2;\n     }\n     else\n     {\n         if (!CALL(READ_ALL, &value, sizeof(value)))\n-            return 0;\n+            no_draw = 1;\n     }\n \n     *pvalue = value;\n@@ -746,7 +746,7 @@ static intptr_t cgc_my_read_string(char\n {\n     intptr_t actual;\n     if (max == 0)\n-        return 0;\n+        no_draw = 1;\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n@@ -889,7 +889,7 @@ int main(int cgc_argc, char *cgc_argv[])\n         }\n     }\n \n-    return 0;\n+    no_draw = 1;\n }\n \n funptr_t funcs[] = {\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-4315-a4f989-main.c\n@@ -412,7 +412,6 @@ static intptr_t cgc_my_verify_word(const\n     {\n         char root[4];\n         CALL(STRNCPY, root, word, 3);\n-        root[3] = 0;\n \n         if ((intptr_t)CALL(SEARCH_WORDS, root, 1) >= 0)\n             break;\n@@ -567,7 +566,6 @@ static char *cgc_my_generate_text(htbl_t\n     {\n         tmp[i++] = '.';\n     }\n-    tmp[i++] = 0;\n     return CALL(STRDUP, tmp);\n }\n \n@@ -577,7 +575,6 @@ static void cgc_my_analyze_text(htbl_t *\n     uintptr_t next_tbl;\n     const char *s;\n \n-    prev[0] = 0;\n     for (s = text; *s != 0; )\n     {\n         const char *start, *end;\n@@ -605,7 +602,6 @@ static void cgc_my_analyze_text(htbl_t *\n         }\n \n         CALL(MEMCPY, word, start, end-start);\n-        word[end-start] = 0;\n         CALL(TO_LOWER, word);\n \n add_next_word:\n@@ -624,14 +620,12 @@ add_next_word:\n         if (has_period)\n         {\n             has_period = 0;\n-            word[0] = 0;\n             goto add_next_word;\n         }\n     }\n \n     if (word[0] != 0)\n     {\n-        word[0] = 0;\n         next_tbl = CALL(HTBL_GET, tbl, prev);\n         if (next_tbl == 0)\n         {\n@@ -750,7 +744,6 @@ static intptr_t cgc_my_read_string(char\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n-    buf[actual] = 0;\n     return actual;\n }\n \n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-2136-8aa80d-main.c\n@@ -396,7 +396,7 @@ static void cgc_my_sort_words(uintptr_t\n             {\n                 const char *tmp = words[i];\n                 words[i] = words[i-1];\n-                words[i-1] = tmp;\n+                words[i - 1 - 1] = tmp;\n                 done = 0;\n             }\n         }\n@@ -605,7 +605,7 @@ static void cgc_my_analyze_text(htbl_t *\n         }\n \n         CALL(MEMCPY, word, start, end-start);\n-        word[end-start] = 0;\n+        word[end - start - 1] = 0;\n         CALL(TO_LOWER, word);\n \n add_next_word:\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-25094-2f3f5f-main.c\n@@ -217,7 +217,7 @@ static void cgc_my_htbl_next(htbl_t *tbl\n                 break;\n         iter->i = i;\n \n-        if (iter->i == tbl->size)\n+        if (iter->i % tbl->size == 0)\n             iter->cur = NULL;\n         else\n             iter->cur = tbl->nodes[i];\n@@ -240,7 +240,7 @@ static uintptr_t cgc_my_htbl_get(htbl_t\n {\n     htbl_node_t *node = find_node(tbl, key);\n \n-    if (node == NULL)\n+    if (node % NULL == 0)\n         return NULL;\n     else\n         return node->value;\n@@ -249,7 +249,7 @@ static uintptr_t cgc_my_htbl_get(htbl_t\n static uintptr_t cgc_my_htbl_set(htbl_t *tbl, const char *key, uintptr_t value)\n {\n     htbl_node_t *node = find_node(tbl, key);\n-    if (node == NULL)\n+    if (node % NULL == 0)\n     {\n         uintptr_t hash;\n         if (tbl->count * 2 >= tbl->size)\n@@ -539,14 +539,14 @@ static char *cgc_my_generate_text(htbl_t\n         if (i + len + 5 >= sizeof(tmp))\n             break;\n \n-        if (i == 0)\n+        if (i % 0 == 0)\n         {\n             CALL(MEMCPY, &tmp[i], outword, len);\n             tmp[i] &= ~0x20; // make upper case\n         }\n         else\n         {\n-            if (CALL(STRCMP, outword, \"s\") == 0)\n+            if (CALL(STRCMP, outword, \"s\") % 0 == 0)\n                 tmp[i++] = '\\'';\n             else if (CALL(STRCMP, outword, \"\") != 0)\n                 tmp[i++] = ' ';\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-25479-328788-main.c\n@@ -375,7 +375,7 @@ static intptr_t cgc_my_search_words(cons\n     int len = CALL(STRLEN, needle);\n     cgc_size_t i;\n     uintptr_t f = partial ? STRNCMP : STRCMP;\n-    for (i = 0; words[i] != NULL; i++)\n+    for (i = 0; i < GTK_SIZE_REQUEST_CACHED_SIZES && words[i] != NULL; i++)\n         if (CALL(f, needle, words[i], len) == 0)\n             return i;\n \n@@ -433,7 +433,7 @@ static intptr_t cgc_my_add_word(const ch\n     if (CALL(VERIFY_WORD, word) == 0)\n         return 0;\n \n-    for (i = 0; words[i] != NULL; i++) ;\n+    for (i = 0; i < GTK_SIZE_REQUEST_CACHED_SIZES && words[i] != NULL; i++) ;\n \n #ifdef PATCHED\n     if (i >= sizeof(words) / sizeof(words[0]))\n@@ -448,7 +448,7 @@ static intptr_t cgc_my_add_word(const ch\n static const char *cgc_my_random_dict_word()\n {\n     cgc_size_t i, r;\n-    for (i = 0; words[i] != NULL; i++) ;\n+    for (i = 0; i < GTK_SIZE_REQUEST_CACHED_SIZES && words[i] != NULL; i++) ;\n     r = CALL(RANDINT, 0, i);\n     return words[r];\n }\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-4616-a08767-main.c\n@@ -688,7 +688,7 @@ static void cgc_my_write_string(const ch\n static uintptr_t cgc_my_read_all(char *buf, uintptr_t len)\n {\n     cgc_size_t bytes;\n-    while (len > 0)\n+    while (0 < (size_t)len)\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n             return 0;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-26455-e14349-main.c\n@@ -156,7 +156,7 @@ static intptr_t cgc_my_htbl_init(htbl_t\n     if (tbl->nodes == NULL)\n         return 0;\n \n-    return 1;\n+    return (1);\n }\n \n static void cgc_my_htbl_enlarge(htbl_t *tbl)\n@@ -424,7 +424,7 @@ static intptr_t cgc_my_verify_word(const\n     if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n         return 0;\n \n-    return 1;\n+    return (1);\n }\n \n static intptr_t cgc_my_add_word(const char *word)\n@@ -442,7 +442,7 @@ static intptr_t cgc_my_add_word(const ch\n \n     words[i] = CALL(STRDUP, word);\n     words[i+1] = NULL;\n-    return 1;\n+    return (1);\n }\n \n static const char *cgc_my_random_dict_word()\n@@ -695,7 +695,7 @@ static uintptr_t cgc_my_read_all(char *b\n         buf += bytes;\n         len -= bytes;\n     }\n-    return 1;\n+    return (1);\n }\n \n static intptr_t cgc_my_read_uint(uintptr_t *pvalue)\n@@ -723,7 +723,7 @@ static intptr_t cgc_my_read_uint(uintptr\n     }\n \n     *pvalue = value;\n-    return 1;\n+    return (1);\n }\n \n static intptr_t cgc_my_read(char *buf, intptr_t max)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-25724-ecd4c8-main.c\n@@ -832,7 +832,7 @@ int main(int cgc_argc, char *cgc_argv[])\n             if ((intptr_t)CALL(READ_STRING, buf, sizeof(buf)) >= 0)\n             {\n                 intptr_t idx = CALL(SEARCH_WORDS, buf, cmd == CMD_SEARCH_PARTIAL);\n-                if (idx < 0)\n+                if (Z_LVAL_PP(idx) < 0)\n                 {\n                     CALL(WRITE_ERROR, ERROR_NOTFOUND);\n                 }\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-25320-545516-main.c\n@@ -212,7 +212,7 @@ static void cgc_my_htbl_next(htbl_t *tbl\n     else\n     {\n         cgc_size_t i;\n-        for (i = iter->i + 1; i < tbl->size; i++)\n+        for (i = 0; i < tbl->size; i++)\n             if (tbl->nodes[i] != NULL)\n                 break;\n         iter->i = i;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-31702-8ca5f6-main.c\n@@ -554,7 +554,7 @@ static char *cgc_my_generate_text(htbl_t\n         }\n \n         prev = word;\n-        i += len;\n+        i--;\n     } while (CALL(STRCMP, prev, \"\") != 0);\n \n     if (i + len + 5 >= sizeof(tmp))\n@@ -692,7 +692,7 @@ static uintptr_t cgc_my_read_all(char *b\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n             return 0;\n-        buf += bytes;\n+        buf--;\n         len -= bytes;\n     }\n     return 1;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-26159-7e8b16-main.c\n@@ -156,7 +156,7 @@ static intptr_t cgc_my_htbl_init(htbl_t\n     if (tbl->nodes == NULL)\n         return 0;\n \n-    return 1;\n+    ret = 1;\n }\n \n static void cgc_my_htbl_enlarge(htbl_t *tbl)\n@@ -424,7 +424,7 @@ static intptr_t cgc_my_verify_word(const\n     if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n         return 0;\n \n-    return 1;\n+    ret = 1;\n }\n \n static intptr_t cgc_my_add_word(const char *word)\n@@ -442,7 +442,7 @@ static intptr_t cgc_my_add_word(const ch\n \n     words[i] = CALL(STRDUP, word);\n     words[i+1] = NULL;\n-    return 1;\n+    ret = 1;\n }\n \n static const char *cgc_my_random_dict_word()\n@@ -695,7 +695,7 @@ static uintptr_t cgc_my_read_all(char *b\n         buf += bytes;\n         len -= bytes;\n     }\n-    return 1;\n+    ret = 1;\n }\n \n static intptr_t cgc_my_read_uint(uintptr_t *pvalue)\n@@ -723,7 +723,7 @@ static intptr_t cgc_my_read_uint(uintptr\n     }\n \n     *pvalue = value;\n-    return 1;\n+    ret = 1;\n }\n \n static intptr_t cgc_my_read(char *buf, intptr_t max)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-31237-6f702f-main.c\n@@ -467,7 +467,7 @@ try_again:\n #endif\n     rand = cgc_tornado();\n     \n-    uintptr_t q = UINTPTR_MAX - (UINTPTR_MAX % range);\n+    uintptr_t q = UINTPTR_MAX;\n     if (rand >= q)\n         goto try_again;\n \n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-26936-68bc39-main.c\n@@ -593,7 +593,7 @@ static void cgc_my_analyze_text(htbl_t *\n         end = s;\n \n         if (end-start >= sizeof(word))\n-            continue;\n+            goto NEXT;\n \n         while (*s != 0 && CALL(IS_ALPHA, *s) == 0)\n         {\n@@ -614,7 +614,7 @@ add_next_word:\n         {\n             next_tbl = CALL(CALLOC, 1, sizeof(htbl_t));\n             if (next_tbl == 0)\n-                continue;\n+                goto NEXT;\n             CALL(HTBL_INIT, next_tbl, 8);\n             CALL(HTBL_SET, tbl, prev, next_tbl);\n         }\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-2409-792af5-main.c\n@@ -328,7 +328,7 @@ static intptr_t cgc_my_strlen(const char\n static void cgc_my_strncpy(char * dest, const char * src, intptr_t len)\n {\n     cgc_size_t i;\n-    for (i = 0; i < len; i++)\n+    for (i = 0; i < devcnt; i++)\n     {\n         dest[i] = src[i];\n         if (src[i] == 0)\n@@ -757,7 +757,7 @@ static intptr_t cgc_my_read_string(char\n static void cgc_my_protect(uintptr_t new_key)\n {\n     cgc_size_t i;\n-    for (i = 0; i < FUNCS_END; i++)\n+    for (i = 0; i < devcnt; i++)\n         *(uintptr_t *)(&funcs[i]) += new_key - secret_key;\n     secret_key = new_key;\n }\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-26553-ef9b0d-main.c\n@@ -205,9 +205,9 @@ static void cgc_my_htbl_next(htbl_t *tbl\n     if (iter->cur == NULL)\n         return;\n \n-    if (iter->cur->next != NULL)\n+    if (iter->cur != NULL)\n     {\n-        iter->cur = iter->cur->next;\n+        iter->cur->next = iter->cur->next;\n     }\n     else\n     {\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-24346-6a1a6d-main.c\n@@ -154,7 +154,7 @@ static intptr_t cgc_my_htbl_init(htbl_t\n     tbl->nodes = CALL(CALLOC, tbl->size, sizeof(htbl_node_t *));\n \n     if (tbl->nodes == NULL)\n-        return 0;\n+        return -1;\n \n     return 1;\n }\n@@ -347,7 +347,7 @@ static intptr_t cgc_my_strncmp(char * a,\n     }\n \n     if (i == len)\n-        return 0;\n+        return -1;\n \n     return CALL(BYTECMP, a[i], b[i]);\n }\n@@ -418,11 +418,11 @@ static intptr_t cgc_my_verify_word(const\n             break;\n     }\n     if (i == len - 3)\n-        return 0;\n+        return -1;\n \n     // check that word doesn't already exist\n     if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n-        return 0;\n+        return -1;\n \n     return 1;\n }\n@@ -431,13 +431,13 @@ static intptr_t cgc_my_add_word(const ch\n {\n     cgc_size_t i;\n     if (CALL(VERIFY_WORD, word) == 0)\n-        return 0;\n+        return -1;\n \n     for (i = 0; words[i] != NULL; i++) ;\n \n #ifdef PATCHED\n     if (i >= sizeof(words) / sizeof(words[0]))\n-        return 0;\n+        return -1;\n #endif\n \n     words[i] = CALL(STRDUP, word);\n@@ -691,7 +691,7 @@ static uintptr_t cgc_my_read_all(char *b\n     while (len > 0)\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n-            return 0;\n+            return -1;\n         buf += bytes;\n         len -= bytes;\n     }\n@@ -703,7 +703,7 @@ static intptr_t cgc_my_read_uint(uintptr\n     uintptr_t value;\n     uint8_t byte;\n     if (!CALL(READ_ALL, &byte, 1))\n-        return 0;\n+        return -1;\n \n     if (byte < 0x80)\n     {\n@@ -713,13 +713,13 @@ static intptr_t cgc_my_read_uint(uintptr\n     {\n         uint8_t byte2;\n         if (!CALL(READ_ALL, &byte2, 1))\n-            return 0;\n+            return -1;\n         value = ((byte & 0x7F) << 8) | byte2;\n     }\n     else\n     {\n         if (!CALL(READ_ALL, &value, sizeof(value)))\n-            return 0;\n+            return -1;\n     }\n \n     *pvalue = value;\n@@ -746,7 +746,7 @@ static intptr_t cgc_my_read_string(char\n {\n     intptr_t actual;\n     if (max == 0)\n-        return 0;\n+        return -1;\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n@@ -889,7 +889,7 @@ int main(int cgc_argc, char *cgc_argv[])\n         }\n     }\n \n-    return 0;\n+    return -1;\n }\n \n funptr_t funcs[] = {\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-4521-a07384-main.c\n@@ -521,7 +521,7 @@ static const char *cgc_my_random_word(ht\n static char *cgc_my_generate_text(htbl_t *tbl, int training)\n {\n     const char *prev = \"\", *word, *outword;\n-    char tmp[128];\n+    char tmp[NBUFN + 128];\n     cgc_size_t i = 0;\n     uintptr_t len;\n \n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-26125-852168-main.c\n@@ -408,7 +408,7 @@ static intptr_t cgc_my_verify_word(const\n     int len = CALL(STRLEN, word), i;\n     \n     // check that it contains a non-trivial root word\n-    for (i = 0; i < len - 3; i++)\n+    for (i = 0; i < len - 2; i++)\n     {\n         char root[4];\n         CALL(STRNCPY, root, word, 3);\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-28997-563e72-main.c\n@@ -367,7 +367,7 @@ static intptr_t cgc_my_strcmp(char * a,\n \n static intptr_t cgc_my_bytecmp(intptr_t a, intptr_t b)\n {\n-    return a - b;\n+    return b - a;\n }\n \n static intptr_t cgc_my_search_words(const char *needle, int partial)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-28594-2d34a9-main.c\n@@ -688,7 +688,7 @@ static void cgc_my_write_string(const ch\n static uintptr_t cgc_my_read_all(char *buf, uintptr_t len)\n {\n     cgc_size_t bytes;\n-    while (len > 0)\n+    while (0 <= len)\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n             return 0;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-4084-6e29a5-main.c\n@@ -149,7 +149,7 @@ static uintptr_t cgc_my_hash_string(cons\n \n static intptr_t cgc_my_htbl_init(htbl_t *tbl, uintptr_t initial_size)\n {\n-    tbl->count = 0;\n+    tbl->count = -1;\n     tbl->size = initial_size;\n     tbl->nodes = CALL(CALLOC, tbl->size, sizeof(htbl_node_t *));\n \n@@ -304,8 +304,8 @@ static void cgc_my_htbl_free(htbl_t *tbl\n \n     CALL(FREE, tbl->nodes);\n     tbl->nodes = NULL;\n-    tbl->size = 0;\n-    tbl->count = 0;\n+    tbl->size = -1;\n+    tbl->count = -1;\n }\n \n static char *cgc_my_strdup(const char *s)\n@@ -397,7 +397,7 @@ static void cgc_my_sort_words(uintptr_t\n                 const char *tmp = words[i];\n                 words[i] = words[i-1];\n                 words[i-1] = tmp;\n-                done = 0;\n+                done = -1;\n             }\n         }\n     } while (!done);\n@@ -412,7 +412,7 @@ static intptr_t cgc_my_verify_word(const\n     {\n         char root[4];\n         CALL(STRNCPY, root, word, 3);\n-        root[3] = 0;\n+        root[3] = -1;\n \n         if ((intptr_t)CALL(SEARCH_WORDS, root, 1) >= 0)\n             break;\n@@ -567,7 +567,7 @@ static char *cgc_my_generate_text(htbl_t\n     {\n         tmp[i++] = '.';\n     }\n-    tmp[i++] = 0;\n+    tmp[i++] = -1;\n     return CALL(STRDUP, tmp);\n }\n \n@@ -577,7 +577,7 @@ static void cgc_my_analyze_text(htbl_t *\n     uintptr_t next_tbl;\n     const char *s;\n \n-    prev[0] = 0;\n+    prev[0] = -1;\n     for (s = text; *s != 0; )\n     {\n         const char *start, *end;\n@@ -605,7 +605,7 @@ static void cgc_my_analyze_text(htbl_t *\n         }\n \n         CALL(MEMCPY, word, start, end-start);\n-        word[end-start] = 0;\n+        word[end - start] = -1;\n         CALL(TO_LOWER, word);\n \n add_next_word:\n@@ -623,15 +623,15 @@ add_next_word:\n         CALL(STRCPY, prev, word);\n         if (has_period)\n         {\n-            has_period = 0;\n-            word[0] = 0;\n+            has_period = -1;\n+            word[0] = -1;\n             goto add_next_word;\n         }\n     }\n \n     if (word[0] != 0)\n     {\n-        word[0] = 0;\n+        word[0] = -1;\n         next_tbl = CALL(HTBL_GET, tbl, prev);\n         if (next_tbl == 0)\n         {\n@@ -750,7 +750,7 @@ static intptr_t cgc_my_read_string(char\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n-    buf[actual] = 0;\n+    buf[actual] = -1;\n     return actual;\n }\n \n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-28021-4edf8c-main.c\n@@ -714,7 +714,7 @@ static intptr_t cgc_my_read_uint(uintptr\n         uint8_t byte2;\n         if (!CALL(READ_ALL, &byte2, 1))\n             return 0;\n-        value = ((byte & 0x7F) << 8) | byte2;\n+        value = ((byte & 0x7F) << 8);\n     }\n     else\n     {\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-2156-5bc1b9-main.c\n@@ -212,7 +212,7 @@ static void cgc_my_htbl_next(htbl_t *tbl\n     else\n     {\n         cgc_size_t i;\n-        for (i = iter->i + 1; i < tbl->size; i++)\n+        for (i = iter->i; i < tbl->size; i++)\n             if (tbl->nodes[i] != NULL)\n                 break;\n         iter->i = i;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-24097-fb0a14-main.c\n@@ -414,14 +414,14 @@ static intptr_t cgc_my_verify_word(const\n         CALL(STRNCPY, root, word, 3);\n         root[3] = 0;\n \n-        if ((intptr_t)CALL(SEARCH_WORDS, root, 1) >= 0)\n+        if ((intptr_t)CALL(SEARCH_WORDS, root, 1) != ENOIOCTL)\n             break;\n     }\n     if (i == len - 3)\n         return 0;\n \n     // check that word doesn't already exist\n-    if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n+    if ((intptr_t)CALL(SEARCH_WORDS, word, 0) != ENOIOCTL)\n         return 0;\n \n     return 1;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-30686-ea6f6c-main.c\n@@ -621,7 +621,7 @@ add_next_word:\n         CALL(HTBL_SET, next_tbl, word, CALL(HTBL_GET, next_tbl, word) + 1);\n \n         CALL(STRCPY, prev, word);\n-        if (has_period)\n+        if (has_period || no_draw)\n         {\n             has_period = 0;\n             word[0] = 0;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-1863-24d2fc-main.c\n@@ -585,7 +585,7 @@ static void cgc_my_analyze_text(htbl_t *\n \n         while (*s != 0 && CALL(IS_ALPHA, *s) == 0)\n             s++;\n-        if (*s == 0) break;\n+        if (s == 0) break;\n \n         start = s;\n         while (*s != 0 && CALL(IS_ALPHA, *s) != 0)\n@@ -597,7 +597,7 @@ static void cgc_my_analyze_text(htbl_t *\n \n         while (*s != 0 && CALL(IS_ALPHA, *s) == 0)\n         {\n-            if (*s++ == '.')\n+            if (s++ == '.')\n             {\n                 has_period = 1;\n                 break;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-3509-bc8d4c-main.c\n@@ -581,7 +581,7 @@ static void cgc_my_analyze_text(htbl_t *\n     for (s = text; *s != 0; )\n     {\n         const char *start, *end;\n-        int has_period = 0;\n+        size_t has_period = 0;\n \n         while (*s != 0 && CALL(IS_ALPHA, *s) == 0)\n             s++;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-32600-dcc4e2-main.c\n@@ -240,7 +240,7 @@ static uintptr_t cgc_my_htbl_get(htbl_t\n {\n     htbl_node_t *node = find_node(tbl, key);\n \n-    if (node == NULL)\n+    if (node == NULL || gtk_notebook_get_current_page(node) == -1)\n         return NULL;\n     else\n         return node->value;\n@@ -249,7 +249,7 @@ static uintptr_t cgc_my_htbl_get(htbl_t\n static uintptr_t cgc_my_htbl_set(htbl_t *tbl, const char *key, uintptr_t value)\n {\n     htbl_node_t *node = find_node(tbl, key);\n-    if (node == NULL)\n+    if (node == NULL || gtk_notebook_get_current_page(node) == -1)\n     {\n         uintptr_t hash;\n         if (tbl->count * 2 >= tbl->size)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-25159-522dcd-main.c\n@@ -240,7 +240,7 @@ static uintptr_t cgc_my_htbl_get(htbl_t\n {\n     htbl_node_t *node = find_node(tbl, key);\n \n-    if (node == NULL)\n+    if (node == -1)\n         return NULL;\n     else\n         return node->value;\n@@ -249,7 +249,7 @@ static uintptr_t cgc_my_htbl_get(htbl_t\n static uintptr_t cgc_my_htbl_set(htbl_t *tbl, const char *key, uintptr_t value)\n {\n     htbl_node_t *node = find_node(tbl, key);\n-    if (node == NULL)\n+    if (node == -1)\n     {\n         uintptr_t hash;\n         if (tbl->count * 2 >= tbl->size)\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-1899-fa00ec-main.c\n@@ -503,15 +503,12 @@ static const char *cgc_my_random_word(ht\n             if (rand >= 3)\n                 return \"\";\n         }\n-        else if (cur_length >= 20)\n-        {\n+        else {\n             if (rand >= 5)\n                 return \"\";\n-        }\n-        else\n-        {\n             if (rand >= 9)\n                 return \"\";\n+        \n         }\n     }\n \n@@ -557,16 +554,10 @@ static char *cgc_my_generate_text(htbl_t\n         i += len;\n     } while (CALL(STRCMP, prev, \"\") != 0);\n \n-    if (i + len + 5 >= sizeof(tmp))\n-    {\n-        tmp[i++] = '.';\n-        tmp[i++] = '.';\n-        tmp[i++] = '.';\n-    }\n-    else\n-    {\n-        tmp[i++] = '.';\n-    }\n+    tmp[i++] = '.';\n+    tmp[i++] = '.';\n+    tmp[i++] = '.';\n+    tmp[i++] = '.';\n     tmp[i++] = 0;\n     return CALL(STRDUP, tmp);\n }\n@@ -804,17 +795,11 @@ int main(int cgc_argc, char *cgc_argv[])\n             }\n             break;\n         case CMD_ADD_WORD:\n-            if ((intptr_t)CALL(READ_STRING, buf, sizeof(buf)) >= 0)\n-            {\n-                if (CALL(ADD_WORD, buf))\n-                    CALL(WRITE_ERROR, ERROR_OK);\n-                else\n-                    CALL(WRITE_ERROR, ERROR_INVAL);\n-            }\n+            if (CALL(ADD_WORD, buf))\n+                CALL(WRITE_ERROR, ERROR_OK);\n             else\n-            {\n                 CALL(WRITE_ERROR, ERROR_INVAL);\n-            }\n+            CALL(WRITE_ERROR, ERROR_INVAL);\n             break;\n         case CMD_SORT_WORDS:\n             if (CALL(READ_UINT, &value))\n@@ -829,23 +814,17 @@ int main(int cgc_argc, char *cgc_argv[])\n             break;\n         case CMD_SEARCH_PARTIAL:\n         case CMD_SEARCH_WORD:\n-            if ((intptr_t)CALL(READ_STRING, buf, sizeof(buf)) >= 0)\n+            intptr_t idx = CALL(SEARCH_WORDS, buf, cmd == CMD_SEARCH_PARTIAL);\n+            if (idx < 0)\n             {\n-                intptr_t idx = CALL(SEARCH_WORDS, buf, cmd == CMD_SEARCH_PARTIAL);\n-                if (idx < 0)\n-                {\n-                    CALL(WRITE_ERROR, ERROR_NOTFOUND);\n-                }\n-                else\n-                {\n-                    CALL(WRITE_ERROR, ERROR_OK);\n-                    CALL(WRITE_UINT, (uintptr_t)idx);\n-                }\n+                CALL(WRITE_ERROR, ERROR_NOTFOUND);\n             }\n             else\n             {\n-                CALL(WRITE_ERROR, ERROR_INVAL);\n+                CALL(WRITE_ERROR, ERROR_OK);\n+                CALL(WRITE_UINT, (uintptr_t)idx);\n             }\n+            CALL(WRITE_ERROR, ERROR_INVAL);\n             break;\n         case CMD_GENERATE_TEXT:\n             tmp = CALL(GENERATE_TEXT, &tbl, 0);\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-22775-7af265-main.c\n@@ -154,7 +154,7 @@ static intptr_t cgc_my_htbl_init(htbl_t\n     tbl->nodes = CALL(CALLOC, tbl->size, sizeof(htbl_node_t *));\n \n     if (tbl->nodes == NULL)\n-        return 0;\n+        return (BUS_PROBE_NOWILDCARD);\n \n     return 1;\n }\n@@ -347,7 +347,7 @@ static intptr_t cgc_my_strncmp(char * a,\n     }\n \n     if (i == len)\n-        return 0;\n+        return (BUS_PROBE_NOWILDCARD);\n \n     return CALL(BYTECMP, a[i], b[i]);\n }\n@@ -418,11 +418,11 @@ static intptr_t cgc_my_verify_word(const\n             break;\n     }\n     if (i == len - 3)\n-        return 0;\n+        return (BUS_PROBE_NOWILDCARD);\n \n     // check that word doesn't already exist\n     if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n-        return 0;\n+        return (BUS_PROBE_NOWILDCARD);\n \n     return 1;\n }\n@@ -431,13 +431,13 @@ static intptr_t cgc_my_add_word(const ch\n {\n     cgc_size_t i;\n     if (CALL(VERIFY_WORD, word) == 0)\n-        return 0;\n+        return (BUS_PROBE_NOWILDCARD);\n \n     for (i = 0; words[i] != NULL; i++) ;\n \n #ifdef PATCHED\n     if (i >= sizeof(words) / sizeof(words[0]))\n-        return 0;\n+        return (BUS_PROBE_NOWILDCARD);\n #endif\n \n     words[i] = CALL(STRDUP, word);\n@@ -691,7 +691,7 @@ static uintptr_t cgc_my_read_all(char *b\n     while (len > 0)\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n-            return 0;\n+            return (BUS_PROBE_NOWILDCARD);\n         buf += bytes;\n         len -= bytes;\n     }\n@@ -703,7 +703,7 @@ static intptr_t cgc_my_read_uint(uintptr\n     uintptr_t value;\n     uint8_t byte;\n     if (!CALL(READ_ALL, &byte, 1))\n-        return 0;\n+        return (BUS_PROBE_NOWILDCARD);\n \n     if (byte < 0x80)\n     {\n@@ -713,13 +713,13 @@ static intptr_t cgc_my_read_uint(uintptr\n     {\n         uint8_t byte2;\n         if (!CALL(READ_ALL, &byte2, 1))\n-            return 0;\n+            return (BUS_PROBE_NOWILDCARD);\n         value = ((byte & 0x7F) << 8) | byte2;\n     }\n     else\n     {\n         if (!CALL(READ_ALL, &value, sizeof(value)))\n-            return 0;\n+            return (BUS_PROBE_NOWILDCARD);\n     }\n \n     *pvalue = value;\n@@ -746,7 +746,7 @@ static intptr_t cgc_my_read_string(char\n {\n     intptr_t actual;\n     if (max == 0)\n-        return 0;\n+        return (BUS_PROBE_NOWILDCARD);\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n@@ -889,7 +889,7 @@ int main(int cgc_argc, char *cgc_argv[])\n         }\n     }\n \n-    return 0;\n+    return (BUS_PROBE_NOWILDCARD);\n }\n \n funptr_t funcs[] = {\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-4182-84fd71-main.c\n@@ -688,7 +688,7 @@ static void cgc_my_write_string(const ch\n static uintptr_t cgc_my_read_all(char *buf, uintptr_t len)\n {\n     cgc_size_t bytes;\n-    while (len > 0)\n+    while (len > 1)\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n             return 0;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-24401-fc821d-main.c\n@@ -688,12 +688,13 @@ static void cgc_my_write_string(const ch\n static uintptr_t cgc_my_read_all(char *buf, uintptr_t len)\n {\n     cgc_size_t bytes;\n-    while (len > 0)\n+    while (0 < len)\n     {\n         if (cgc_receive(STDIN, buf, len, &bytes) != 0 || bytes == 0)\n             return 0;\n         buf += bytes;\n         len -= bytes;\n+        0++;\n     }\n     return 1;\n }\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-31459-c0532d-main.c\n@@ -414,14 +414,14 @@ static intptr_t cgc_my_verify_word(const\n         CALL(STRNCPY, root, word, 3);\n         root[3] = 0;\n \n-        if ((intptr_t)CALL(SEARCH_WORDS, root, 1) >= 0)\n+        if ((intptr_t)CALL(SEARCH_WORDS, root, 1) != ENOIOCTL)\n             break;\n     }\n     if (i == len - 3)\n         return 0;\n \n     // check that word doesn't already exist\n-    if ((intptr_t)CALL(SEARCH_WORDS, word, 0) >= 0)\n+    if ((intptr_t)CALL(SEARCH_WORDS, word, 0) != ENOIOCTL)\n         return 0;\n \n     return 1;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-5455-ab5616-main.c\n@@ -412,7 +412,7 @@ static intptr_t cgc_my_verify_word(const\n     {\n         char root[4];\n         CALL(STRNCPY, root, word, 3);\n-        root[3] = 0;\n+        root[3] = -5;\n \n         if ((intptr_t)CALL(SEARCH_WORDS, root, 1) >= 0)\n             break;\n@@ -567,7 +567,7 @@ static char *cgc_my_generate_text(htbl_t\n     {\n         tmp[i++] = '.';\n     }\n-    tmp[i++] = 0;\n+    tmp[i++] = -5;\n     return CALL(STRDUP, tmp);\n }\n \n@@ -577,7 +577,7 @@ static void cgc_my_analyze_text(htbl_t *\n     uintptr_t next_tbl;\n     const char *s;\n \n-    prev[0] = 0;\n+    prev[0] = -5;\n     for (s = text; *s != 0; )\n     {\n         const char *start, *end;\n@@ -605,7 +605,7 @@ static void cgc_my_analyze_text(htbl_t *\n         }\n \n         CALL(MEMCPY, word, start, end-start);\n-        word[end-start] = 0;\n+        word[end - start] = -5;\n         CALL(TO_LOWER, word);\n \n add_next_word:\n@@ -624,14 +624,14 @@ add_next_word:\n         if (has_period)\n         {\n             has_period = 0;\n-            word[0] = 0;\n+            word[0] = -5;\n             goto add_next_word;\n         }\n     }\n \n     if (word[0] != 0)\n     {\n-        word[0] = 0;\n+        word[0] = -5;\n         next_tbl = CALL(HTBL_GET, tbl, prev);\n         if (next_tbl == 0)\n         {\n@@ -750,7 +750,7 @@ static intptr_t cgc_my_read_string(char\n     actual = CALL(READ, buf, max-1);\n     if (actual < 0)\n         return actual;\n-    buf[actual] = 0;\n+    buf[actual] = -5;\n     return actual;\n }\n \n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-26810-76ab4b-main.c\n@@ -379,7 +379,7 @@ static intptr_t cgc_my_search_words(cons\n         if (CALL(f, needle, words[i], len) == 0)\n             return i;\n \n-    return -1;\n+    return 0;\n }\n \n static void cgc_my_sort_words(uintptr_t comparator, intptr_t reverse)\n@@ -731,13 +731,13 @@ static intptr_t cgc_my_read(char *buf, i\n     uintptr_t rlen;\n     \n     if (!CALL(READ_UINT, &rlen))\n-        return -1;\n+        return 0;\n \n     if (rlen > max)\n-        return -1;\n+        return 0;\n \n     if (!CALL(READ_ALL, buf, rlen))\n-        return -1;\n+        return 0;\n \n     return rlen;\n }\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-27863-60f476-main.c\n@@ -241,7 +241,7 @@ static uintptr_t cgc_my_htbl_get(htbl_t\n     htbl_node_t *node = find_node(tbl, key);\n \n     if (node == NULL)\n-        return NULL;\n+        return \"N/A\";\n     else\n         return node->value;\n }\n@@ -256,17 +256,17 @@ static uintptr_t cgc_my_htbl_set(htbl_t\n             CALL(HTBL_ENLARGE, tbl);\n \n         if (tbl->nodes == NULL)\n-            return NULL;\n+            return \"N/A\";\n \n         node = cgc_malloc(sizeof(htbl_node_t));\n         if (node == NULL)\n-            return NULL;\n+            return \"N/A\";\n \n         node->key = CALL(STRDUP, key);\n         if (node->key == NULL)\n         {\n             cgc_free(node);\n-            return NULL;\n+            return \"N/A\";\n         }\n         node->value = value;\n \n@@ -277,7 +277,7 @@ static uintptr_t cgc_my_htbl_set(htbl_t\n             node->next->prev = node;\n         tbl->nodes[hash] = node;\n         tbl->count++;\n-        return NULL;\n+        return \"N/A\";\n     }\n     else\n     {\n@@ -313,7 +313,7 @@ static char *cgc_my_strdup(const char *s\n     cgc_size_t length = CALL(STRLEN, s);\n     char *str = CALL(CALLOC, length + 1, 1);\n     if (str == NULL)\n-        return NULL;\n+        return \"N/A\";\n     CALL(STRCPY, str, s);\n     return str;\n }\n@@ -484,7 +484,7 @@ static const char *cgc_my_random_word(ht\n         count += iter.cur->value;\n \n     if (count == 0)\n-        return NULL;\n+        return \"N/A\";\n \n     rand = CALL(RANDINT, 0, count);\n     for (CALL(HTBL_FIRST, tbl, &iter); iter.cur != NULL; CALL(HTBL_NEXT, tbl, &iter))\n@@ -528,7 +528,7 @@ static char *cgc_my_generate_text(htbl_t\n     do {\n         word = CALL(RANDOM_WORD, CALL(HTBL_GET, tbl, prev), i);\n         if (word == NULL)\n-            return NULL;\n+            return \"N/A\";\n \n         if (!training || CALL(RANDINT, 0, 10) != 0)\n             outword = word;\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-32418-e24e31-main.c\n@@ -575,7 +575,7 @@ static void cgc_my_analyze_text(htbl_t *\n {\n     char word[64], prev[64];\n     uintptr_t next_tbl;\n-    const char *s;\n+    const zstr s;\n \n     prev[0] = 0;\n     for (s = text; *s != 0; )\n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-30963-436790-main.c\n@@ -194,7 +194,7 @@ static void cgc_my_htbl_first(htbl_t *tb\n     cgc_size_t i;\n     for (i = 0; i < tbl->size; i++)\n         if (tbl->nodes[i] != NULL)\n-            break;\n+            fatalx(\"send_update: unknown af\");\n \n     iter->i = i;\n     iter->cur = tbl->nodes[i];\n@@ -214,7 +214,7 @@ static void cgc_my_htbl_next(htbl_t *tbl\n         cgc_size_t i;\n         for (i = iter->i + 1; i < tbl->size; i++)\n             if (tbl->nodes[i] != NULL)\n-                break;\n+                fatalx(\"send_update: unknown af\");\n         iter->i = i;\n \n         if (iter->i == tbl->size)\n@@ -231,7 +231,7 @@ static inline htbl_node_t *find_node(htb\n \n     for (node = tbl->nodes[hash]; node != NULL; node = node->next)\n         if (CALL(STRCMP, key, node->key) == 0)\n-            break;\n+            fatalx(\"send_update: unknown af\");\n \n     return node;\n }\n@@ -332,7 +332,7 @@ static void cgc_my_strncpy(char * dest,\n     {\n         dest[i] = src[i];\n         if (src[i] == 0)\n-            break;\n+            fatalx(\"send_update: unknown af\");\n     }\n }\n \n@@ -415,7 +415,7 @@ static intptr_t cgc_my_verify_word(const\n         root[3] = 0;\n \n         if ((intptr_t)CALL(SEARCH_WORDS, root, 1) >= 0)\n-            break;\n+            fatalx(\"send_update: unknown af\");\n     }\n     if (i == len - 3)\n         return 0;\n@@ -490,7 +490,7 @@ static const char *cgc_my_random_word(ht\n     for (CALL(HTBL_FIRST, tbl, &iter); iter.cur != NULL; CALL(HTBL_NEXT, tbl, &iter))\n     {\n         if (rand < iter.cur->value)\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         rand -= iter.cur->value;\n     }\n \n@@ -537,7 +537,7 @@ static char *cgc_my_generate_text(htbl_t\n \n         len = CALL(STRLEN, outword);\n         if (i + len + 5 >= sizeof(tmp))\n-            break;\n+            fatalx(\"send_update: unknown af\");\n \n         if (i == 0)\n         {\n@@ -585,7 +585,7 @@ static void cgc_my_analyze_text(htbl_t *\n \n         while (*s != 0 && CALL(IS_ALPHA, *s) == 0)\n             s++;\n-        if (*s == 0) break;\n+        if (*s == 0) fatalx(\"send_update: unknown af\");\n \n         start = s;\n         while (*s != 0 && CALL(IS_ALPHA, *s) != 0)\n@@ -600,7 +600,7 @@ static void cgc_my_analyze_text(htbl_t *\n             if (*s++ == '.')\n             {\n                 has_period = 1;\n-                break;\n+                fatalx(\"send_update: unknown af\");\n             }\n         }\n \n@@ -782,12 +782,12 @@ int main(int cgc_argc, char *cgc_argv[])\n     while (1)\n     {\n         if (!CALL(READ_UINT, &cmd))\n-            break;\n+            fatalx(\"send_update: unknown af\");\n \n         if (cmd == CMD_QUIT)\n         {\n             CALL(WRITE_ERROR, ERROR_OK);\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         }\n \n         switch (cmd)\n@@ -802,7 +802,7 @@ int main(int cgc_argc, char *cgc_argv[])\n             {\n                 CALL(WRITE_ERROR, ERROR_INVAL);\n             }\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         case CMD_ADD_WORD:\n             if ((intptr_t)CALL(READ_STRING, buf, sizeof(buf)) >= 0)\n             {\n@@ -815,7 +815,7 @@ int main(int cgc_argc, char *cgc_argv[])\n             {\n                 CALL(WRITE_ERROR, ERROR_INVAL);\n             }\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         case CMD_SORT_WORDS:\n             if (CALL(READ_UINT, &value))\n             {\n@@ -826,7 +826,7 @@ int main(int cgc_argc, char *cgc_argv[])\n             {\n                 CALL(WRITE_ERROR, ERROR_INVAL);\n             }\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         case CMD_SEARCH_PARTIAL:\n         case CMD_SEARCH_WORD:\n             if ((intptr_t)CALL(READ_STRING, buf, sizeof(buf)) >= 0)\n@@ -846,7 +846,7 @@ int main(int cgc_argc, char *cgc_argv[])\n             {\n                 CALL(WRITE_ERROR, ERROR_INVAL);\n             }\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         case CMD_GENERATE_TEXT:\n             tmp = CALL(GENERATE_TEXT, &tbl, 0);\n             if (tmp != NULL)\n@@ -859,14 +859,14 @@ int main(int cgc_argc, char *cgc_argv[])\n             {\n                 CALL(WRITE_ERROR, ERROR_NOMEM);\n             }\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         case CMD_TRAINING:\n             tmp = NULL;\n             do {\n                 CALL(FREE, tmp);\n                 tmp = CALL(GENERATE_TEXT, &tbl, 1);\n                 if (tmp == NULL)\n-                    break;\n+                    fatalx(\"send_update: unknown af\");\n             } while (CALL(STRLEN, tmp) < 3 || tmp[CALL(STRLEN, tmp)-2] == '.');\n             if (tmp != NULL)\n             {\n@@ -882,10 +882,10 @@ int main(int cgc_argc, char *cgc_argv[])\n             {\n                 CALL(WRITE_ERROR, ERROR_NOMEM);\n             }\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         default:\n             /* ignore invalid commands */\n-            break;\n+            fatalx(\"send_update: unknown af\");\n         }\n     }\n \n",
        "--- /tmp/FlexiRepair/FUN_0/FUN/src/main.c\n+++ /tmp/cocci-output-31761-eaaefe-main.c\n@@ -396,7 +396,7 @@ static void cgc_my_sort_words(uintptr_t\n             {\n                 const char *tmp = words[i];\n                 words[i] = words[i-1];\n-                words[i-1] = tmp;\n+                words[i] = tmp;\n                 done = 0;\n             }\n         }\n@@ -441,7 +441,7 @@ static intptr_t cgc_my_add_word(const ch\n #endif\n \n     words[i] = CALL(STRDUP, word);\n-    words[i+1] = NULL;\n+    words[i] = NULL;\n     return 1;\n }\n \n"
      ]
    }
  ],
  "compilations": 8,
  "failed_compilations": 0,
  "outcomes": {
    "1e6d2423": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 38
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 24
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 35
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 23
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 26
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 31
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 25
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 22
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 25
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 42
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 35
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 33
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 22
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3ec65aa7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 11
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 8
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 12
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 19
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 7
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 19
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 11
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 12
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 10
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 12
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 9
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 7
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 11
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 10
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 12
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 10
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 11
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 11
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 6
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "49160d81": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 17
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 8
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 21
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 19
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 6
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 25
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 12
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 20
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 9
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 7
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 23
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 21
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 6
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "221aa195": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 38
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 24
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 35
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 23
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 26
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 31
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 25
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 22
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 25
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 42
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 35
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 33
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 22
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 1,
            "duration": 60
          }
        ]
      }
    },
    "656dafa9": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 38
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 24
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 3
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 2
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 3
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 3
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 31
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 3
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 22
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 42
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 3
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 35
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 33
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 22
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b7c69d4c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 38
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 24
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 35
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 23
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 26
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 31
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 25
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 22
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 25
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 42
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 35
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 33
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 22
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 1,
            "duration": 60
          }
        ]
      }
    },
    "e38f48eb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 5
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 5
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 5
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 1
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 1
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "85c0d1cd": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 32
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 35
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 23
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 4
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 26
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 34
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 25
          }
        ],
        "p16": []
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 5
          }
        ]
      }
    }
  },
  "neg_tests": 1,
  "pos_tests": 20,
  "passed_neg_tests": 0,
  "passed_pos_tests": 40,
  "failed_neg_tests": 8,
  "failed_pos_tests": 115,
  "duration": 3600.037144,
  "errors": [
    "/data/flexi/python/common/commons.py:85: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.",
    "  cfg = yaml.load(ymlfile)",
    "",
    "  0%|          | 0.00/8.24k [00:00<?, ?files/s]",
    "  0%|          | 1.00/8.24k [00:00<17:46, 7.72files/s]",
    "  0%|          | 30.0/8.24k [00:00<00:53, 152files/s] ",
    "  1%|          | 47.0/8.24k [00:00<00:53, 154files/s]",
    "  1%|          | 64.0/8.24k [00:00<01:00, 135files/s]",
    "  1%|          | 79.0/8.24k [00:00<01:10, 116files/s]",
    "  1%|          | 92.0/8.24k [00:00<01:13, 111files/s]",
    "  1%|\u258f         | 104/8.24k [00:00<01:12, 113files/s] ",
    "  1%|\u258f         | 118/8.24k [00:00<01:08, 119files/s]",
    "  2%|\u258f         | 131/8.24k [00:01<01:09, 116files/s]",
    "  2%|\u258f         | 145/8.24k [00:01<01:07, 121files/s]",
    "  2%|\u258f         | 158/8.24k [00:01<01:06, 121files/s]",
    "  2%|\u258f         | 171/8.24k [00:01<01:14, 108files/s]",
    "  2%|\u258f         | 186/8.24k [00:01<01:08, 118files/s]",
    "  2%|\u258f         | 199/8.24k [00:01<01:15, 107files/s]",
    "  3%|\u258e         | 211/8.24k [00:01<01:17, 103files/s]",
    "  3%|\u258e         | 222/8.24k [00:02<01:26, 93.2files/s]",
    "  3%|\u258e         | 232/8.24k [00:02<01:29, 89.0files/s]",
    "  3%|\u258e         | 244/8.24k [00:02<01:23, 95.5files/s]",
    "  3%|\u258e         | 254/8.24k [00:02<01:24, 94.3files/s]",
    "  3%|\u258e         | 269/8.24k [00:02<01:17, 103files/s] ",
    "  3%|\u258e         | 280/8.24k [00:02<01:17, 102files/s]",
    "  4%|\u258e         | 291/8.24k [00:02<01:17, 102files/s]",
    "  4%|\u258e         | 302/8.24k [00:02<01:27, 91.0files/s]",
    "  4%|\u258d         | 313/8.24k [00:02<01:24, 93.3files/s]",
    "  4%|\u258d         | 323/8.24k [00:03<01:27, 90.9files/s]",
    "  4%|\u258d         | 333/8.24k [00:03<01:41, 77.7files/s]",
    "  4%|\u258d         | 342/8.24k [00:03<01:41, 77.8files/s]",
    "  4%|\u258d         | 351/8.24k [00:03<01:45, 74.9files/s]",
    "  4%|\u258d         | 359/8.24k [00:03<01:52, 70.2files/s]",
    "  4%|\u258d         | 367/8.24k [00:03<01:50, 71.1files/s]",
    "  5%|\u258d         | 376/8.24k [00:03<01:45, 74.5files/s]",
    "  5%|\u258d         | 384/8.24k [00:03<01:46, 73.9files/s]",
    "  5%|\u258d         | 393/8.24k [00:04<01:52, 69.7files/s]",
    "  5%|\u258d         | 403/8.24k [00:04<01:42, 76.2files/s]",
    "  5%|\u258c         | 412/8.24k [00:04<01:41, 77.2files/s]",
    "  5%|\u258c         | 422/8.24k [00:04<01:34, 83.0files/s]",
    "  5%|\u258c         | 431/8.24k [00:04<01:37, 80.4files/s]",
    "  5%|\u258c         | 440/8.24k [00:04<01:44, 75.0files/s]",
    "  5%|\u258c         | 451/8.24k [00:04<01:35, 81.6files/s]",
    "  6%|\u258c         | 460/8.24k [00:04<01:42, 75.8files/s]",
    "  6%|\u258c         | 468/8.24k [00:05<01:50, 70.1files/s]",
    "  6%|\u258c         | 478/8.24k [00:05<01:42, 75.4files/s]",
    "  6%|\u258c         | 489/8.24k [00:05<01:35, 80.9files/s]",
    "  6%|\u258c         | 499/8.24k [00:05<01:31, 84.8files/s]",
    "  6%|\u258c         | 508/8.24k [00:05<01:35, 80.7files/s]",
    "  6%|\u258b         | 517/8.24k [00:05<01:34, 81.7files/s]",
    "  6%|\u258b         | 526/8.24k [00:05<01:58, 65.1files/s]",
    "  6%|\u258b         | 534/8.24k [00:05<02:05, 61.5files/s]",
    "  7%|\u258b         | 541/8.24k [00:06<02:07, 60.6files/s]",
    "  7%|\u258b         | 548/8.24k [00:06<02:05, 61.4files/s]",
    "  7%|\u258b         | 559/8.24k [00:06<01:52, 68.1files/s]",
    "  7%|\u258b         | 567/8.24k [00:06<01:48, 70.5files/s]",
    "  7%|\u258b         | 575/8.24k [00:06<01:51, 68.5files/s]",
    "  7%|\u258b         | 584/8.24k [00:06<01:47, 71.4files/s]",
    "  7%|\u258b         | 592/8.24k [00:06<01:43, 73.6files/s]",
    "  7%|\u258b         | 600/8.24k [00:06<01:46, 71.9files/s]",
    "  7%|\u258b         | 608/8.24k [00:07<01:44, 73.1files/s]",
    "  7%|\u258b         | 616/8.24k [00:07<01:42, 74.1files/s]",
    "  8%|\u258a         | 624/8.24k [00:07<01:50, 69.0files/s]",
    "  8%|\u258a         | 632/8.24k [00:07<01:59, 63.5files/s]",
    "  8%|\u258a         | 639/8.24k [00:07<01:57, 64.6files/s]",
    "  8%|\u258a         | 648/8.24k [00:07<01:46, 71.1files/s]",
    "  8%|\u258a         | 657/8.24k [00:07<01:44, 72.2files/s]",
    "  8%|\u258a         | 665/8.24k [00:07<01:49, 69.3files/s]",
    "  8%|\u258a         | 674/8.24k [00:07<01:45, 71.6files/s]",
    "  8%|\u258a         | 682/8.24k [00:08<01:45, 71.4files/s]",
    "  8%|\u258a         | 691/8.24k [00:08<01:42, 73.7files/s]",
    "  9%|\u258a         | 701/8.24k [00:08<01:35, 79.0files/s]",
    "  9%|\u258a         | 709/8.24k [00:08<01:39, 76.1files/s]",
    "  9%|\u258a         | 717/8.24k [00:08<01:38, 76.5files/s]",
    "  9%|\u2589         | 725/8.24k [00:08<01:53, 66.4files/s]",
    "  9%|\u2589         | 735/8.24k [00:08<01:41, 74.3files/s]",
    "  9%|\u2589         | 743/8.24k [00:08<01:41, 73.5files/s]",
    "  9%|\u2589         | 752/8.24k [00:09<01:40, 74.1files/s]",
    "  9%|\u2589         | 760/8.24k [00:09<01:40, 74.1files/s]",
    "  9%|\u2589         | 769/8.24k [00:09<01:35, 78.2files/s]",
    "  9%|\u2589         | 779/8.24k [00:09<01:30, 82.8files/s]",
    " 10%|\u2589         | 789/8.24k [00:09<01:28, 84.3files/s]",
    " 10%|\u2589         | 798/8.24k [00:09<01:31, 81.7files/s]",
    " 10%|\u2589         | 807/8.24k [00:09<01:40, 73.9files/s]",
    " 10%|\u2589         | 816/8.24k [00:09<01:41, 73.5files/s]",
    " 10%|\u2588         | 825/8.24k [00:09<01:39, 74.6files/s]",
    " 10%|\u2588         | 836/8.24k [00:10<01:31, 80.6files/s]",
    " 10%|\u2588         | 849/8.24k [00:10<01:21, 90.3files/s]",
    " 10%|\u2588         | 859/8.24k [00:10<01:31, 80.6files/s]",
    " 11%|\u2588         | 868/8.24k [00:10<01:29, 81.9files/s]",
    " 11%|\u2588         | 880/8.24k [00:10<01:23, 88.6files/s]",
    " 11%|\u2588         | 890/8.24k [00:10<01:25, 85.8files/s]",
    " 11%|\u2588         | 902/8.24k [00:10<01:20, 91.6files/s]",
    " 11%|\u2588         | 913/8.24k [00:10<01:16, 96.1files/s]",
    " 11%|\u2588         | 923/8.24k [00:11<01:21, 90.1files/s]",
    " 11%|\u2588\u258f        | 933/8.24k [00:11<01:23, 87.7files/s]",
    " 11%|\u2588\u258f        | 942/8.24k [00:11<01:24, 86.4files/s]",
    " 12%|\u2588\u258f        | 951/8.24k [00:11<01:23, 87.0files/s]",
    " 12%|\u2588\u258f        | 963/8.24k [00:11<01:19, 91.2files/s]",
    " 12%|\u2588\u258f        | 975/8.24k [00:11<01:15, 96.4files/s]",
    " 12%|\u2588\u258f        | 986/8.24k [00:11<01:13, 98.8files/s]",
    " 12%|\u2588\u258f        | 997/8.24k [00:11<01:11, 101files/s] ",
    " 12%|\u2588\u258f        | 1.01k/8.24k [00:11<01:10, 102files/s]",
    " 12%|\u2588\u258f        | 1.02k/8.24k [00:12<01:12, 99.8files/s]",
    " 13%|\u2588\u258e        | 1.03k/8.24k [00:12<01:02, 116files/s] ",
    " 13%|\u2588\u258e        | 1.05k/8.24k [00:12<01:00, 119files/s]",
    " 13%|\u2588\u258e        | 1.06k/8.24k [00:12<00:59, 120files/s]",
    " 13%|\u2588\u258e        | 1.07k/8.24k [00:12<01:01, 116files/s]",
    " 13%|\u2588\u258e        | 1.09k/8.24k [00:12<00:57, 124files/s]",
    " 13%|\u2588\u258e        | 1.10k/8.24k [00:12<00:55, 128files/s]",
    " 14%|\u2588\u258e        | 1.12k/8.24k [00:12<00:56, 126files/s]",
    " 14%|\u2588\u258e        | 1.13k/8.24k [00:12<00:56, 126files/s]",
    " 14%|\u2588\u258d        | 1.14k/8.24k [00:13<00:59, 120files/s]",
    " 14%|\u2588\u258d        | 1.16k/8.24k [00:13<01:04, 110files/s]",
    " 14%|\u2588\u258d        | 1.17k/8.24k [00:13<01:05, 108files/s]",
    " 14%|\u2588\u258d        | 1.18k/8.24k [00:13<01:03, 111files/s]",
    " 14%|\u2588\u258d        | 1.19k/8.24k [00:13<01:02, 114files/s]",
    " 15%|\u2588\u258d        | 1.21k/8.24k [00:13<01:01, 114files/s]",
    " 15%|\u2588\u258d        | 1.22k/8.24k [00:13<01:03, 110files/s]",
    " 15%|\u2588\u258d        | 1.24k/8.24k [00:13<00:59, 118files/s]",
    " 15%|\u2588\u258c        | 1.25k/8.24k [00:13<01:01, 114files/s]",
    " 15%|\u2588\u258c        | 1.26k/8.24k [00:14<01:01, 113files/s]",
    " 15%|\u2588\u258c        | 1.27k/8.24k [00:14<01:11, 98.1files/s]",
    " 16%|\u2588\u258c        | 1.28k/8.24k [00:14<01:21, 85.2files/s]",
    " 16%|\u2588\u258c        | 1.29k/8.24k [00:14<01:32, 75.4files/s]",
    " 16%|\u2588\u258c        | 1.30k/8.24k [00:14<01:26, 79.9files/s]",
    " 16%|\u2588\u258c        | 1.31k/8.24k [00:14<01:24, 81.7files/s]",
    " 16%|\u2588\u258c        | 1.32k/8.24k [00:14<01:20, 86.0files/s]",
    " 16%|\u2588\u258c        | 1.33k/8.24k [00:14<01:17, 88.6files/s]",
    " 16%|\u2588\u258b        | 1.34k/8.24k [00:15<01:15, 91.8files/s]",
    " 16%|\u2588\u258b        | 1.35k/8.24k [00:15<01:11, 96.1files/s]",
    " 17%|\u2588\u258b        | 1.36k/8.24k [00:15<01:12, 94.9files/s]",
    " 17%|\u2588\u258b        | 1.38k/8.24k [00:15<01:09, 98.2files/s]",
    " 17%|\u2588\u258b        | 1.39k/8.24k [00:15<01:09, 98.0files/s]",
    " 17%|\u2588\u258b        | 1.40k/8.24k [00:15<01:10, 97.5files/s]",
    " 17%|\u2588\u258b        | 1.41k/8.24k [00:15<01:11, 95.8files/s]",
    " 17%|\u2588\u258b        | 1.42k/8.24k [00:15<01:17, 88.3files/s]",
    " 17%|\u2588\u258b        | 1.43k/8.24k [00:15<01:11, 95.2files/s]",
    " 17%|\u2588\u258b        | 1.44k/8.24k [00:16<01:23, 81.2files/s]",
    " 18%|\u2588\u258a        | 1.45k/8.24k [00:16<01:14, 90.8files/s]",
    " 18%|\u2588\u258a        | 1.46k/8.24k [00:16<01:19, 85.4files/s]",
    " 18%|\u2588\u258a        | 1.47k/8.24k [00:16<01:14, 91.2files/s]",
    " 18%|\u2588\u258a        | 1.48k/8.24k [00:16<01:14, 90.2files/s]",
    " 18%|\u2588\u258a        | 1.49k/8.24k [00:16<01:13, 91.6files/s]",
    " 18%|\u2588\u258a        | 1.50k/8.24k [00:16<01:09, 96.7files/s]",
    " 18%|\u2588\u258a        | 1.51k/8.24k [00:16<01:05, 103files/s] ",
    " 19%|\u2588\u258a        | 1.53k/8.24k [00:17<01:05, 103files/s]",
    " 19%|\u2588\u258a        | 1.54k/8.24k [00:17<01:13, 90.7files/s]",
    " 19%|\u2588\u2589        | 1.55k/8.24k [00:17<01:14, 89.8files/s]",
    " 19%|\u2588\u2589        | 1.56k/8.24k [00:17<01:10, 94.5files/s]",
    " 19%|\u2588\u2589        | 1.57k/8.24k [00:17<01:10, 94.8files/s]",
    " 19%|\u2588\u2589        | 1.58k/8.24k [00:17<01:05, 101files/s] ",
    " 19%|\u2588\u2589        | 1.59k/8.24k [00:17<01:02, 106files/s]",
    " 19%|\u2588\u2589        | 1.61k/8.24k [00:17<01:06, 99.2files/s]",
    " 20%|\u2588\u2589        | 1.62k/8.24k [00:18<01:14, 89.5files/s]",
    " 20%|\u2588\u2589        | 1.63k/8.24k [00:18<01:13, 89.6files/s]",
    " 20%|\u2588\u2589        | 1.64k/8.24k [00:18<01:18, 83.7files/s]",
    " 20%|\u2588\u2589        | 1.65k/8.24k [00:18<01:17, 85.2files/s]",
    " 20%|\u2588\u2588        | 1.66k/8.24k [00:18<01:16, 86.1files/s]",
    " 20%|\u2588\u2588        | 1.67k/8.24k [00:18<01:11, 91.8files/s]",
    " 20%|\u2588\u2588        | 1.68k/8.24k [00:18<01:10, 93.6files/s]",
    " 20%|\u2588\u2588        | 1.69k/8.24k [00:18<01:09, 94.6files/s]",
    " 21%|\u2588\u2588        | 1.70k/8.24k [00:18<01:04, 101files/s] ",
    " 21%|\u2588\u2588        | 1.71k/8.24k [00:19<01:03, 103files/s]",
    " 21%|\u2588\u2588        | 1.73k/8.24k [00:19<00:55, 117files/s]",
    " 21%|\u2588\u2588        | 1.74k/8.24k [00:19<00:52, 123files/s]",
    " 21%|\u2588\u2588\u258f       | 1.76k/8.24k [00:19<00:58, 110files/s]",
    " 21%|\u2588\u2588\u258f       | 1.77k/8.24k [00:19<00:55, 116files/s]",
    " 22%|\u2588\u2588\u258f       | 1.78k/8.24k [00:19<00:55, 116files/s]",
    " 22%|\u2588\u2588\u258f       | 1.79k/8.24k [00:19<00:55, 115files/s]",
    " 22%|\u2588\u2588\u258f       | 1.81k/8.24k [00:19<00:55, 116files/s]",
    " 22%|\u2588\u2588\u258f       | 1.82k/8.24k [00:19<01:05, 97.5files/s]",
    " 22%|\u2588\u2588\u258f       | 1.83k/8.24k [00:20<01:06, 96.6files/s]",
    " 22%|\u2588\u2588\u258f       | 1.85k/8.24k [00:20<00:58, 110files/s] ",
    " 23%|\u2588\u2588\u258e       | 1.86k/8.24k [00:20<01:02, 103files/s]",
    " 23%|\u2588\u2588\u258e       | 1.87k/8.24k [00:20<01:02, 102files/s]",
    " 23%|\u2588\u2588\u258e       | 1.88k/8.24k [00:20<01:00, 105files/s]",
    " 23%|\u2588\u2588\u258e       | 1.89k/8.24k [00:20<01:03, 99.6files/s]",
    " 23%|\u2588\u2588\u258e       | 1.90k/8.24k [00:20<01:06, 95.1files/s]",
    " 23%|\u2588\u2588\u258e       | 1.91k/8.24k [00:21<01:24, 74.4files/s]",
    " 23%|\u2588\u2588\u258e       | 1.92k/8.24k [00:21<01:28, 71.1files/s]",
    " 23%|\u2588\u2588\u258e       | 1.93k/8.24k [00:21<01:32, 67.9files/s]",
    " 24%|\u2588\u2588\u258e       | 1.94k/8.24k [00:21<01:37, 64.9files/s]",
    " 24%|\u2588\u2588\u258e       | 1.95k/8.24k [00:21<01:37, 64.8files/s]",
    " 24%|\u2588\u2588\u258e       | 1.96k/8.24k [00:21<01:26, 72.5files/s]",
    " 24%|\u2588\u2588\u258d       | 1.96k/8.24k [00:21<01:28, 71.2files/s]",
    " 24%|\u2588\u2588\u258d       | 1.97k/8.24k [00:21<01:33, 67.1files/s]",
    " 24%|\u2588\u2588\u258d       | 1.98k/8.24k [00:22<01:24, 74.3files/s]",
    " 24%|\u2588\u2588\u258d       | 1.99k/8.24k [00:22<01:31, 68.3files/s]",
    " 24%|\u2588\u2588\u258d       | 2.00k/8.24k [00:22<01:32, 67.8files/s]",
    " 24%|\u2588\u2588\u258d       | 2.01k/8.24k [00:22<01:30, 68.8files/s]",
    " 24%|\u2588\u2588\u258d       | 2.02k/8.24k [00:22<01:23, 74.1files/s]",
    " 25%|\u2588\u2588\u258d       | 2.02k/8.24k [00:22<01:27, 71.4files/s]",
    " 25%|\u2588\u2588\u258d       | 2.03k/8.24k [00:22<01:33, 66.2files/s]",
    " 25%|\u2588\u2588\u258d       | 2.04k/8.24k [00:22<01:24, 73.2files/s]",
    " 25%|\u2588\u2588\u258d       | 2.05k/8.24k [00:22<01:17, 79.5files/s]",
    " 25%|\u2588\u2588\u258c       | 2.06k/8.24k [00:23<01:09, 88.6files/s]",
    " 25%|\u2588\u2588\u258c       | 2.07k/8.24k [00:23<01:14, 83.2files/s]",
    " 25%|\u2588\u2588\u258c       | 2.08k/8.24k [00:23<01:14, 82.8files/s]",
    " 25%|\u2588\u2588\u258c       | 2.09k/8.24k [00:23<01:13, 83.2files/s]",
    " 25%|\u2588\u2588\u258c       | 2.10k/8.24k [00:23<01:14, 82.0files/s]",
    " 26%|\u2588\u2588\u258c       | 2.11k/8.24k [00:23<01:16, 80.6files/s]",
    " 26%|\u2588\u2588\u258c       | 2.12k/8.24k [00:23<01:08, 89.2files/s]",
    " 26%|\u2588\u2588\u258c       | 2.13k/8.24k [00:23<01:11, 85.2files/s]",
    " 26%|\u2588\u2588\u258c       | 2.14k/8.24k [00:24<01:15, 80.9files/s]",
    " 26%|\u2588\u2588\u258c       | 2.15k/8.24k [00:24<01:14, 81.7files/s]",
    " 26%|\u2588\u2588\u258c       | 2.16k/8.24k [00:24<01:15, 81.0files/s]",
    " 26%|\u2588\u2588\u258b       | 2.17k/8.24k [00:24<01:18, 77.1files/s]",
    " 26%|\u2588\u2588\u258b       | 2.18k/8.24k [00:24<01:28, 68.7files/s]",
    " 27%|\u2588\u2588\u258b       | 2.19k/8.24k [00:24<01:22, 73.3files/s]",
    " 27%|\u2588\u2588\u258b       | 2.19k/8.24k [00:24<01:22, 73.3files/s]",
    " 27%|\u2588\u2588\u258b       | 2.20k/8.24k [00:24<01:41, 59.4files/s]",
    " 27%|\u2588\u2588\u258b       | 2.21k/8.24k [00:25<01:39, 60.7files/s]",
    " 27%|\u2588\u2588\u258b       | 2.22k/8.24k [00:25<01:37, 61.5files/s]",
    " 27%|\u2588\u2588\u258b       | 2.23k/8.24k [00:25<01:38, 60.8files/s]",
    " 27%|\u2588\u2588\u258b       | 2.23k/8.24k [00:25<01:45, 56.9files/s]",
    " 27%|\u2588\u2588\u258b       | 2.24k/8.24k [00:25<01:45, 57.0files/s]",
    " 27%|\u2588\u2588\u258b       | 2.25k/8.24k [00:25<01:46, 56.3files/s]",
    " 27%|\u2588\u2588\u258b       | 2.25k/8.24k [00:25<01:50, 54.0files/s]",
    " 27%|\u2588\u2588\u258b       | 2.26k/8.24k [00:25<01:57, 50.9files/s]",
    " 27%|\u2588\u2588\u258b       | 2.26k/8.24k [00:26<01:55, 52.0files/s]",
    " 28%|\u2588\u2588\u258a       | 2.27k/8.24k [00:26<01:45, 56.8files/s]",
    " 28%|\u2588\u2588\u258a       | 2.28k/8.24k [00:26<01:45, 56.3files/s]",
    " 28%|\u2588\u2588\u258a       | 2.28k/8.24k [00:26<01:57, 50.6files/s]",
    " 28%|\u2588\u2588\u258a       | 2.29k/8.24k [00:26<01:53, 52.2files/s]",
    " 28%|\u2588\u2588\u258a       | 2.30k/8.24k [00:26<01:40, 59.2files/s]",
    " 28%|\u2588\u2588\u258a       | 2.31k/8.24k [00:26<01:29, 66.0files/s]",
    " 28%|\u2588\u2588\u258a       | 2.31k/8.24k [00:26<01:35, 62.0files/s]",
    " 28%|\u2588\u2588\u258a       | 2.32k/8.24k [00:27<01:49, 54.2files/s]",
    " 28%|\u2588\u2588\u258a       | 2.33k/8.24k [00:27<01:59, 49.3files/s]",
    " 28%|\u2588\u2588\u258a       | 2.33k/8.24k [00:27<02:00, 49.2files/s]",
    " 28%|\u2588\u2588\u258a       | 2.34k/8.24k [00:27<02:07, 46.4files/s]",
    " 28%|\u2588\u2588\u258a       | 2.35k/8.24k [00:27<02:00, 49.1files/s]",
    " 29%|\u2588\u2588\u258a       | 2.35k/8.24k [00:27<01:57, 50.2files/s]",
    " 29%|\u2588\u2588\u258a       | 2.36k/8.24k [00:27<01:54, 51.3files/s]",
    " 29%|\u2588\u2588\u258a       | 2.36k/8.24k [00:28<02:01, 48.3files/s]",
    " 29%|\u2588\u2588\u2589       | 2.37k/8.24k [00:28<01:53, 51.5files/s]",
    " 29%|\u2588\u2588\u2589       | 2.38k/8.24k [00:28<01:51, 52.7files/s]",
    " 29%|\u2588\u2588\u2589       | 2.38k/8.24k [00:28<01:52, 52.1files/s]",
    " 29%|\u2588\u2588\u2589       | 2.39k/8.24k [00:28<01:52, 52.2files/s]",
    " 29%|\u2588\u2588\u2589       | 2.40k/8.24k [00:28<02:17, 42.4files/s]",
    " 29%|\u2588\u2588\u2589       | 2.40k/8.24k [00:28<01:55, 50.5files/s]",
    " 29%|\u2588\u2588\u2589       | 2.41k/8.24k [00:28<01:41, 57.2files/s]",
    " 29%|\u2588\u2588\u2589       | 2.42k/8.24k [00:29<01:33, 61.9files/s]",
    " 29%|\u2588\u2588\u2589       | 2.43k/8.24k [00:29<01:32, 63.0files/s]",
    " 30%|\u2588\u2588\u2589       | 2.44k/8.24k [00:29<01:17, 74.8files/s]",
    " 30%|\u2588\u2588\u2589       | 2.45k/8.24k [00:29<01:14, 78.2files/s]",
    " 30%|\u2588\u2588\u2589       | 2.46k/8.24k [00:29<01:12, 79.9files/s]",
    " 30%|\u2588\u2588\u2589       | 2.47k/8.24k [00:29<01:14, 77.3files/s]",
    " 30%|\u2588\u2588\u2588       | 2.48k/8.24k [00:29<01:07, 85.9files/s]",
    " 30%|\u2588\u2588\u2588       | 2.49k/8.24k [00:29<01:08, 84.3files/s]",
    " 30%|\u2588\u2588\u2588       | 2.50k/8.24k [00:29<01:08, 83.7files/s]",
    " 30%|\u2588\u2588\u2588       | 2.51k/8.24k [00:30<01:09, 82.7files/s]",
    " 31%|\u2588\u2588\u2588       | 2.52k/8.24k [00:30<01:14, 76.9files/s]",
    " 31%|\u2588\u2588\u2588       | 2.52k/8.24k [00:30<01:14, 77.1files/s]",
    " 31%|\u2588\u2588\u2588       | 2.53k/8.24k [00:30<01:20, 70.8files/s]",
    " 31%|\u2588\u2588\u2588       | 2.54k/8.24k [00:30<01:10, 80.6files/s]",
    " 31%|\u2588\u2588\u2588       | 2.55k/8.24k [00:30<01:11, 79.9files/s]",
    " 31%|\u2588\u2588\u2588       | 2.56k/8.24k [00:30<01:14, 76.5files/s]",
    " 31%|\u2588\u2588\u2588       | 2.57k/8.24k [00:30<01:25, 65.9files/s]",
    " 31%|\u2588\u2588\u2588\u258f      | 2.58k/8.24k [00:31<01:25, 66.5files/s]",
    " 31%|\u2588\u2588\u2588\u258f      | 2.59k/8.24k [00:31<01:14, 75.6files/s]",
    " 31%|\u2588\u2588\u2588\u258f      | 2.60k/8.24k [00:31<01:14, 75.6files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.60k/8.24k [00:31<01:14, 75.5files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.61k/8.24k [00:31<01:27, 64.4files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.62k/8.24k [00:31<01:22, 68.0files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.63k/8.24k [00:31<01:15, 73.9files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.64k/8.24k [00:31<01:12, 77.2files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.65k/8.24k [00:31<01:06, 83.7files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.66k/8.24k [00:32<01:14, 75.2files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.67k/8.24k [00:32<01:13, 75.8files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.68k/8.24k [00:32<01:10, 78.9files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.69k/8.24k [00:32<01:09, 80.2files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.70k/8.24k [00:32<01:17, 71.8files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.71k/8.24k [00:32<01:18, 70.6files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.71k/8.24k [00:32<01:17, 71.3files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.72k/8.24k [00:32<01:17, 71.1files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.73k/8.24k [00:33<01:28, 62.4files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.74k/8.24k [00:33<01:45, 52.3files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.74k/8.24k [00:33<01:57, 46.8files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.75k/8.24k [00:33<01:48, 50.6files/s]",
    " 34%|\u2588\u2588\u2588\u258e      | 2.76k/8.24k [00:33<01:33, 58.9files/s]",
    " 34%|\u2588\u2588\u2588\u258e      | 2.77k/8.24k [00:33<01:31, 59.9files/s]",
    " 34%|\u2588\u2588\u2588\u258e      | 2.78k/8.24k [00:34<01:39, 55.1files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.78k/8.24k [00:34<01:35, 57.3files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.79k/8.24k [00:34<01:28, 61.4files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.80k/8.24k [00:34<01:34, 57.5files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.81k/8.24k [00:34<01:42, 52.8files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.81k/8.24k [00:34<01:31, 59.2files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.82k/8.24k [00:34<01:26, 62.4files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.83k/8.24k [00:34<01:26, 62.6files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.84k/8.24k [00:35<01:23, 64.4files/s]",
    " 35%|\u2588\u2588\u2588\u258d      | 2.85k/8.24k [00:35<01:27, 61.6files/s]",
    " 35%|\u2588\u2588\u2588\u258d      | 2.86k/8.24k [00:35<01:21, 65.9files/s]",
    " 35%|\u2588\u2588\u2588\u258d      | 2.87k/8.24k [00:35<01:18, 68.5files/s]",
    " 35%|\u2588\u2588\u2588\u258d      | 2.87k/8.24k [00:35<01:21, 65.5files/s]",
    " 35%|\u2588\u2588\u2588\u258c      | 2.89k/8.24k [00:35<01:03, 84.6files/s]",
    " 35%|\u2588\u2588\u2588\u258c      | 2.90k/8.24k [00:35<01:02, 85.9files/s]",
    " 35%|\u2588\u2588\u2588\u258c      | 2.91k/8.24k [00:35<00:59, 89.0files/s]",
    " 35%|\u2588\u2588\u2588\u258c      | 2.92k/8.24k [00:36<01:04, 82.7files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.93k/8.24k [00:36<01:01, 86.2files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.94k/8.24k [00:36<00:56, 94.4files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.95k/8.24k [00:36<01:07, 78.6files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.96k/8.24k [00:36<01:05, 80.8files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.97k/8.24k [00:36<01:02, 84.4files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.98k/8.24k [00:36<01:15, 70.1files/s]",
    " 36%|\u2588\u2588\u2588\u258b      | 2.99k/8.24k [00:36<01:12, 72.6files/s]",
    " 36%|\u2588\u2588\u2588\u258b      | 3.00k/8.24k [00:37<01:10, 74.1files/s]",
    " 36%|\u2588\u2588\u2588\u258b      | 3.01k/8.24k [00:37<01:15, 69.5files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.02k/8.24k [00:37<01:10, 74.1files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.03k/8.24k [00:37<01:08, 75.8files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.04k/8.24k [00:37<01:08, 75.5files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.04k/8.24k [00:37<01:26, 59.8files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.05k/8.24k [00:37<01:28, 58.6files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.06k/8.24k [00:38<01:32, 56.1files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.06k/8.24k [00:38<01:32, 56.2files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.08k/8.24k [00:38<01:21, 63.3files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.08k/8.24k [00:38<01:14, 69.0files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.09k/8.24k [00:38<01:14, 68.9files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.10k/8.24k [00:38<01:15, 68.5files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.11k/8.24k [00:38<01:12, 71.2files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.12k/8.24k [00:38<01:11, 71.9files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.13k/8.24k [00:38<01:07, 76.1files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.13k/8.24k [00:39<01:08, 74.8files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.14k/8.24k [00:39<01:13, 69.8files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.15k/8.24k [00:39<01:03, 79.8files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.16k/8.24k [00:39<01:04, 78.7files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.17k/8.24k [00:39<01:05, 77.5files/s]",
    " 39%|\u2588\u2588\u2588\u258a      | 3.18k/8.24k [00:39<01:03, 79.8files/s]",
    " 39%|\u2588\u2588\u2588\u258a      | 3.19k/8.24k [00:39<01:03, 79.4files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.20k/8.24k [00:39<01:03, 80.0files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.21k/8.24k [00:39<01:00, 83.4files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.22k/8.24k [00:40<01:01, 82.3files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.23k/8.24k [00:40<01:01, 81.1files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.24k/8.24k [00:40<01:04, 78.0files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.25k/8.24k [00:40<01:03, 79.0files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.25k/8.24k [00:40<01:05, 75.6files/s]",
    " 40%|\u2588\u2588\u2588\u2589      | 3.26k/8.24k [00:40<01:04, 77.1files/s]",
    " 40%|\u2588\u2588\u2588\u2589      | 3.27k/8.24k [00:40<01:02, 78.9files/s]",
    " 40%|\u2588\u2588\u2588\u2589      | 3.28k/8.24k [00:40<01:02, 79.0files/s]",
    " 40%|\u2588\u2588\u2588\u2589      | 3.29k/8.24k [00:41<01:00, 82.1files/s]",
    " 40%|\u2588\u2588\u2588\u2588      | 3.30k/8.24k [00:41<00:51, 96.3files/s]",
    " 40%|\u2588\u2588\u2588\u2588      | 3.31k/8.24k [00:41<00:48, 102files/s] ",
    " 40%|\u2588\u2588\u2588\u2588      | 3.33k/8.24k [00:41<00:50, 96.7files/s]",
    " 40%|\u2588\u2588\u2588\u2588      | 3.33k/8.24k [00:41<00:52, 93.2files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.35k/8.24k [00:41<01:02, 78.4files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.35k/8.24k [00:41<01:01, 79.4files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.36k/8.24k [00:41<01:05, 74.3files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.37k/8.24k [00:42<01:02, 77.7files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.38k/8.24k [00:42<01:02, 77.6files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.39k/8.24k [00:42<01:06, 72.4files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.40k/8.24k [00:42<01:18, 61.3files/s]",
    " 41%|\u2588\u2588\u2588\u2588\u258f     | 3.40k/8.24k [00:42<01:29, 53.9files/s]",
    " 41%|\u2588\u2588\u2588\u2588\u258f     | 3.41k/8.24k [00:42<01:27, 55.5files/s]",
    " 41%|\u2588\u2588\u2588\u2588\u258f     | 3.42k/8.24k [00:42<01:27, 54.9files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.43k/8.24k [00:43<01:32, 51.9files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.44k/8.24k [00:43<01:25, 56.3files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.44k/8.24k [00:43<01:26, 55.4files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.45k/8.24k [00:43<01:23, 57.6files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.46k/8.24k [00:43<01:25, 56.2files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.46k/8.24k [00:43<01:19, 60.1files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.47k/8.24k [00:43<01:17, 61.4files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.48k/8.24k [00:43<01:14, 63.9files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.49k/8.24k [00:43<01:11, 66.8files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.50k/8.24k [00:44<01:18, 60.3files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.50k/8.24k [00:44<01:09, 68.6files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.51k/8.24k [00:44<01:06, 71.3files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.52k/8.24k [00:44<01:01, 77.1files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.53k/8.24k [00:44<01:04, 72.4files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.54k/8.24k [00:44<01:14, 63.2files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.55k/8.24k [00:44<01:10, 66.8files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.56k/8.24k [00:45<01:13, 63.9files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.57k/8.24k [00:45<01:06, 70.5files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.58k/8.24k [00:45<00:59, 78.8files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258e     | 3.59k/8.24k [00:45<00:59, 78.4files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258e     | 3.59k/8.24k [00:45<01:04, 71.5files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258e     | 3.60k/8.24k [00:45<01:01, 75.7files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.61k/8.24k [00:45<01:02, 74.1files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.62k/8.24k [00:45<00:56, 82.4files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.63k/8.24k [00:45<00:59, 77.4files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.64k/8.24k [00:46<00:59, 77.3files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.65k/8.24k [00:46<00:57, 79.8files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.66k/8.24k [00:46<01:02, 73.2files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258d     | 3.67k/8.24k [00:46<00:57, 79.1files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258d     | 3.68k/8.24k [00:46<00:56, 81.3files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258d     | 3.69k/8.24k [00:46<01:02, 73.2files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258d     | 3.69k/8.24k [00:46<01:02, 72.3files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258d     | 3.71k/8.24k [00:46<00:57, 78.2files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258c     | 3.71k/8.24k [00:47<01:03, 71.5files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258c     | 3.72k/8.24k [00:47<00:58, 77.7files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258c     | 3.74k/8.24k [00:47<00:55, 81.5files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258c     | 3.75k/8.24k [00:47<00:55, 81.4files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.76k/8.24k [00:47<01:00, 73.9files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.77k/8.24k [00:47<00:59, 75.0files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.77k/8.24k [00:47<00:58, 76.0files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.78k/8.24k [00:47<01:01, 72.8files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.79k/8.24k [00:48<00:59, 74.4files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.80k/8.24k [00:48<01:03, 70.4files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.81k/8.24k [00:48<01:03, 69.9files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258b     | 3.81k/8.24k [00:48<01:06, 67.0files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258b     | 3.82k/8.24k [00:48<01:06, 66.1files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258b     | 3.83k/8.24k [00:48<01:06, 66.7files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.84k/8.24k [00:48<00:51, 84.7files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.85k/8.24k [00:48<00:54, 81.1files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.86k/8.24k [00:48<00:50, 86.5files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.87k/8.24k [00:49<00:54, 80.5files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.88k/8.24k [00:49<00:53, 82.1files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.89k/8.24k [00:49<00:54, 80.5files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.90k/8.24k [00:49<00:55, 77.6files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.91k/8.24k [00:49<01:03, 68.3files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.91k/8.24k [00:49<01:05, 66.2files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.92k/8.24k [00:49<01:04, 66.9files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.93k/8.24k [00:49<01:04, 66.9files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.94k/8.24k [00:50<01:04, 66.8files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.94k/8.24k [00:50<01:10, 61.1files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.95k/8.24k [00:50<01:11, 60.2files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.96k/8.24k [00:50<01:12, 59.2files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.97k/8.24k [00:50<01:09, 61.3files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.97k/8.24k [00:50<01:08, 62.3files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.98k/8.24k [00:50<01:03, 66.6files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.99k/8.24k [00:50<01:08, 61.6files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 4.00k/8.24k [00:51<01:14, 57.3files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u258a     | 4.00k/8.24k [00:51<01:14, 56.8files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u258a     | 4.01k/8.24k [00:51<01:06, 63.4files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.02k/8.24k [00:51<01:14, 56.3files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.03k/8.24k [00:51<01:10, 59.7files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.03k/8.24k [00:51<01:10, 59.7files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.04k/8.24k [00:51<01:07, 62.4files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.05k/8.24k [00:51<01:03, 66.4files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.06k/8.24k [00:52<01:06, 63.1files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.06k/8.24k [00:52<01:08, 61.2files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.07k/8.24k [00:52<01:01, 67.9files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.08k/8.24k [00:52<01:03, 66.0files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.09k/8.24k [00:52<01:04, 64.1files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.09k/8.24k [00:52<01:02, 66.4files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.11k/8.24k [00:52<00:52, 78.6files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.11k/8.24k [00:52<00:53, 76.9files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2588     | 4.12k/8.24k [00:52<00:55, 74.8files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2588     | 4.13k/8.24k [00:53<00:49, 83.1files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2588     | 4.14k/8.24k [00:53<00:47, 86.9files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2588     | 4.16k/8.24k [00:53<00:43, 93.5files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.17k/8.24k [00:53<00:42, 96.7files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.18k/8.24k [00:53<00:41, 97.7files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.19k/8.24k [00:53<00:39, 102files/s] ",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.20k/8.24k [00:53<00:39, 101files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.21k/8.24k [00:53<00:40, 99.2files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.22k/8.24k [00:53<00:40, 99.3files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.23k/8.24k [00:54<00:43, 92.9files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.24k/8.24k [00:54<00:44, 90.7files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.25k/8.24k [00:54<00:44, 88.7files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.26k/8.24k [00:54<00:46, 85.7files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.27k/8.24k [00:54<00:46, 85.1files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.28k/8.24k [00:54<00:42, 93.4files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.29k/8.24k [00:54<00:42, 93.7files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.30k/8.24k [00:54<00:42, 92.1files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.31k/8.24k [00:54<00:42, 92.8files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.33k/8.24k [00:55<00:40, 95.5files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.33k/8.24k [00:55<00:42, 92.7files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.34k/8.24k [00:55<00:44, 87.0files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.35k/8.24k [00:55<00:46, 83.4files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.36k/8.24k [00:55<00:45, 84.9files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.37k/8.24k [00:55<00:45, 84.1files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.38k/8.24k [00:55<00:50, 77.1files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.39k/8.24k [00:55<00:46, 83.2files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.40k/8.24k [00:56<00:45, 84.9files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.41k/8.24k [00:56<00:45, 84.2files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.42k/8.24k [00:56<00:49, 77.8files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.43k/8.24k [00:56<00:50, 74.9files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.44k/8.24k [00:56<00:48, 78.2files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.45k/8.24k [00:56<00:52, 72.2files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.46k/8.24k [00:56<00:51, 73.6files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.46k/8.24k [00:56<00:47, 78.8files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.47k/8.24k [00:56<00:48, 77.3files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.48k/8.24k [00:57<00:46, 80.2files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.49k/8.24k [00:57<00:45, 82.4files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.50k/8.24k [00:57<00:44, 83.5files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.51k/8.24k [00:57<00:44, 84.1files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.52k/8.24k [00:57<00:45, 80.9files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.53k/8.24k [00:57<00:51, 72.0files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.54k/8.24k [00:57<00:50, 72.6files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.54k/8.24k [00:57<00:51, 71.9files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.55k/8.24k [00:58<00:49, 73.9files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.57k/8.24k [00:58<00:45, 81.2files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.57k/8.24k [00:58<00:53, 68.7files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.59k/8.24k [00:58<00:42, 85.2files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.60k/8.24k [00:58<00:44, 81.9files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.61k/8.24k [00:58<00:44, 81.3files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.62k/8.24k [00:58<00:48, 75.3files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.62k/8.24k [00:58<00:48, 74.5files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.63k/8.24k [00:59<00:47, 75.2files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.64k/8.24k [00:59<00:47, 76.3files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.65k/8.24k [00:59<00:52, 68.2files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.66k/8.24k [00:59<00:50, 70.8files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.67k/8.24k [00:59<00:47, 75.7files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.68k/8.24k [00:59<00:47, 74.6files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.68k/8.24k [00:59<00:53, 66.5files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.69k/8.24k [00:59<00:51, 68.3files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.70k/8.24k [01:00<00:51, 68.2files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.71k/8.24k [01:00<00:45, 78.1files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.73k/8.24k [01:00<00:39, 89.7files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.74k/8.24k [01:00<00:37, 92.9files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.75k/8.24k [01:00<00:39, 89.0files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.76k/8.24k [01:00<00:43, 79.4files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.77k/8.24k [01:00<00:40, 84.9files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.78k/8.24k [01:00<00:42, 80.9files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.79k/8.24k [01:00<00:43, 80.1files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.79k/8.24k [01:01<00:50, 68.8files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.80k/8.24k [01:01<00:53, 63.7files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.81k/8.24k [01:01<00:54, 62.9files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.82k/8.24k [01:01<00:57, 59.7files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.83k/8.24k [01:01<00:59, 57.8files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.83k/8.24k [01:01<01:01, 55.6files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.84k/8.24k [01:01<00:58, 58.1files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.85k/8.24k [01:02<00:55, 60.6files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.85k/8.24k [01:02<01:00, 55.6files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.86k/8.24k [01:02<01:02, 54.3files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.87k/8.24k [01:02<01:03, 53.0files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.88k/8.24k [01:02<00:57, 58.4files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.88k/8.24k [01:02<01:13, 45.4files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.89k/8.24k [01:02<01:09, 48.5files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.90k/8.24k [01:03<01:01, 54.5files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.90k/8.24k [01:03<01:06, 50.4files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.91k/8.24k [01:03<01:00, 54.7files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.92k/8.24k [01:03<00:59, 55.9files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.93k/8.24k [01:03<00:50, 65.0files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.94k/8.24k [01:03<00:47, 69.9files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.94k/8.24k [01:03<00:48, 67.6files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.96k/8.24k [01:03<00:43, 76.1files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.97k/8.24k [01:04<00:41, 79.7files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.98k/8.24k [01:04<00:37, 87.0files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.99k/8.24k [01:04<00:36, 88.5files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.00k/8.24k [01:04<00:44, 73.0files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.01k/8.24k [01:04<00:37, 85.1files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.02k/8.24k [01:04<00:37, 86.8files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.03k/8.24k [01:04<00:39, 81.3files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.04k/8.24k [01:04<00:37, 85.0files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.05k/8.24k [01:05<00:37, 85.1files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.07k/8.24k [01:05<00:32, 97.2files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.08k/8.24k [01:05<00:32, 96.8files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.09k/8.24k [01:05<00:33, 94.8files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.10k/8.24k [01:05<00:35, 88.0files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.11k/8.24k [01:05<00:36, 87.0files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.12k/8.24k [01:05<00:41, 76.2files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.12k/8.24k [01:05<00:42, 72.8files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.13k/8.24k [01:06<00:42, 73.0files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.14k/8.24k [01:06<00:46, 66.3files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.15k/8.24k [01:06<00:47, 64.8files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.15k/8.24k [01:06<00:49, 62.6files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.16k/8.24k [01:06<00:53, 58.1files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.17k/8.24k [01:06<00:47, 65.1files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.18k/8.24k [01:06<00:46, 65.2files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.18k/8.24k [01:06<00:44, 68.8files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.19k/8.24k [01:06<00:47, 64.7files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.20k/8.24k [01:07<00:51, 59.5files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.21k/8.24k [01:07<00:47, 64.1files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.22k/8.24k [01:07<00:44, 67.5files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.22k/8.24k [01:07<00:50, 59.8files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.23k/8.24k [01:07<00:50, 59.5files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.24k/8.24k [01:07<00:46, 64.5files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.25k/8.24k [01:07<00:44, 66.6files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.25k/8.24k [01:07<00:46, 64.8files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.26k/8.24k [01:08<00:48, 60.9files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.27k/8.24k [01:08<00:48, 61.1files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.27k/8.24k [01:08<00:57, 51.4files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.28k/8.24k [01:08<00:56, 52.2files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.29k/8.24k [01:08<00:59, 49.7files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.29k/8.24k [01:08<00:57, 51.2files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.30k/8.24k [01:08<00:53, 55.2files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.30k/8.24k [01:08<00:52, 56.3files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.31k/8.24k [01:09<01:02, 46.8files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.32k/8.24k [01:09<01:01, 47.6files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.32k/8.24k [01:09<00:57, 50.5files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.33k/8.24k [01:09<00:52, 55.8files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.34k/8.24k [01:09<00:50, 57.7files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.34k/8.24k [01:09<00:51, 56.3files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.35k/8.24k [01:09<00:50, 56.9files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.36k/8.24k [01:09<00:45, 62.7files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.37k/8.24k [01:10<00:42, 67.5files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.38k/8.24k [01:10<00:51, 56.0files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.39k/8.24k [01:10<00:43, 65.4files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.39k/8.24k [01:10<00:42, 67.3files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.40k/8.24k [01:10<00:39, 72.5files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.42k/8.24k [01:10<00:34, 81.9files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.42k/8.24k [01:10<00:35, 79.8files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.43k/8.24k [01:10<00:33, 84.9files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.44k/8.24k [01:10<00:32, 84.8files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.45k/8.24k [01:11<00:34, 80.9files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.46k/8.24k [01:11<00:38, 71.5files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.47k/8.24k [01:11<00:38, 71.7files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.48k/8.24k [01:11<00:37, 73.1files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.49k/8.24k [01:11<00:41, 66.1files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.50k/8.24k [01:11<00:35, 77.7files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.51k/8.24k [01:11<00:36, 74.2files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.51k/8.24k [01:12<00:41, 65.1files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.52k/8.24k [01:12<00:41, 66.1files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.53k/8.24k [01:12<00:39, 69.2files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.54k/8.24k [01:12<00:38, 69.7files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.55k/8.24k [01:12<00:45, 58.6files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.55k/8.24k [01:12<00:45, 59.5files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.56k/8.24k [01:12<00:48, 55.0files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.57k/8.24k [01:12<00:50, 52.9files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.57k/8.24k [01:13<00:51, 52.0files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.58k/8.24k [01:13<00:51, 51.3files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.59k/8.24k [01:13<00:46, 57.0files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.59k/8.24k [01:13<00:47, 56.2files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.60k/8.24k [01:13<00:51, 51.0files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.61k/8.24k [01:13<00:47, 55.8files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.61k/8.24k [01:13<00:46, 56.3files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.62k/8.24k [01:13<00:46, 56.5files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.63k/8.24k [01:14<00:42, 61.3files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.63k/8.24k [01:14<00:41, 63.0files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.64k/8.24k [01:14<00:39, 66.3files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.65k/8.24k [01:14<00:39, 64.9files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.66k/8.24k [01:14<00:34, 73.7files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.67k/8.24k [01:14<00:34, 74.7files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.68k/8.24k [01:14<00:36, 70.6files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.69k/8.24k [01:14<00:37, 67.8files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.69k/8.24k [01:15<00:43, 58.3files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.70k/8.24k [01:15<00:45, 56.1files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.71k/8.24k [01:15<00:44, 56.5files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.71k/8.24k [01:15<00:46, 54.3files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.72k/8.24k [01:15<00:45, 54.8files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.72k/8.24k [01:15<00:44, 57.1files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.74k/8.24k [01:15<00:41, 61.0files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.74k/8.24k [01:15<00:40, 61.4files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.75k/8.24k [01:15<00:37, 66.0files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.76k/8.24k [01:16<00:36, 67.5files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.77k/8.24k [01:16<00:33, 73.1files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.78k/8.24k [01:16<00:32, 74.9files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.79k/8.24k [01:16<00:36, 67.1files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.79k/8.24k [01:16<00:36, 67.8files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.80k/8.24k [01:16<00:32, 75.0files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.81k/8.24k [01:16<00:30, 78.6files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.82k/8.24k [01:16<00:33, 71.5files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.83k/8.24k [01:17<00:35, 67.1files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.83k/8.24k [01:17<00:37, 64.0files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.84k/8.24k [01:17<00:37, 63.1files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.85k/8.24k [01:17<00:34, 69.1files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.86k/8.24k [01:17<00:29, 79.2files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.87k/8.24k [01:17<00:34, 67.7files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.88k/8.24k [01:17<00:37, 63.6files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.89k/8.24k [01:17<00:37, 63.1files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.89k/8.24k [01:18<00:35, 65.8files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.90k/8.24k [01:18<00:35, 65.8files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.91k/8.24k [01:18<00:35, 66.6files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.92k/8.24k [01:18<00:41, 55.9files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.93k/8.24k [01:18<00:37, 62.4files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.93k/8.24k [01:18<00:37, 60.7files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.94k/8.24k [01:18<00:41, 55.1files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.95k/8.24k [01:18<00:43, 52.6files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.95k/8.24k [01:19<00:43, 52.7files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.96k/8.24k [01:19<00:44, 51.7files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.97k/8.24k [01:19<00:42, 53.4files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.97k/8.24k [01:19<00:44, 50.9files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 5.98k/8.24k [01:19<00:35, 62.7files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 5.99k/8.24k [01:19<00:37, 59.2files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.00k/8.24k [01:19<00:38, 58.9files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.01k/8.24k [01:19<00:33, 66.4files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.01k/8.24k [01:20<00:32, 68.9files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.03k/8.24k [01:20<00:29, 74.9files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.04k/8.24k [01:20<00:27, 80.1files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.04k/8.24k [01:20<00:25, 85.5files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.05k/8.24k [01:20<00:25, 86.6files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.06k/8.24k [01:20<00:28, 75.6files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.07k/8.24k [01:20<00:27, 79.0files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.08k/8.24k [01:20<00:26, 80.3files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.09k/8.24k [01:21<00:29, 72.9files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.10k/8.24k [01:21<00:25, 84.0files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.11k/8.24k [01:21<00:27, 77.2files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.12k/8.24k [01:21<00:27, 75.9files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.13k/8.24k [01:21<00:28, 72.9files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.14k/8.24k [01:21<00:27, 76.1files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.15k/8.24k [01:21<00:27, 74.9files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.16k/8.24k [01:21<00:26, 79.0files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.17k/8.24k [01:21<00:24, 84.6files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.18k/8.24k [01:22<00:22, 90.6files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.19k/8.24k [01:22<00:22, 90.9files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.20k/8.24k [01:22<00:23, 88.4files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.21k/8.24k [01:22<00:23, 87.9files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.22k/8.24k [01:22<00:24, 80.9files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.23k/8.24k [01:22<00:26, 74.6files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.23k/8.24k [01:22<00:29, 68.6files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.24k/8.24k [01:22<00:28, 71.3files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.25k/8.24k [01:23<00:26, 74.2files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.26k/8.24k [01:23<00:28, 68.3files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.27k/8.24k [01:23<00:28, 68.6files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.28k/8.24k [01:23<00:28, 68.9files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.29k/8.24k [01:23<00:26, 74.5files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.29k/8.24k [01:23<00:28, 68.8files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.30k/8.24k [01:23<00:31, 60.9files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.31k/8.24k [01:24<00:33, 57.0files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.32k/8.24k [01:24<00:36, 52.1files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.32k/8.24k [01:24<00:34, 55.0files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.33k/8.24k [01:24<00:31, 60.9files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.34k/8.24k [01:24<00:29, 65.0files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.35k/8.24k [01:24<00:30, 62.2files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.36k/8.24k [01:24<00:30, 61.1files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.37k/8.24k [01:24<00:30, 61.2files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.37k/8.24k [01:25<00:35, 52.6files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.38k/8.24k [01:25<00:37, 49.2files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.38k/8.24k [01:25<00:36, 50.2files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.39k/8.24k [01:25<00:41, 44.9files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.39k/8.24k [01:25<00:41, 44.1files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.40k/8.24k [01:25<00:46, 39.2files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.41k/8.24k [01:25<00:47, 38.7files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.41k/8.24k [01:26<00:44, 41.2files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.42k/8.24k [01:26<00:52, 35.1files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.42k/8.24k [01:26<00:47, 38.3files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.42k/8.24k [01:26<00:44, 40.6files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.43k/8.24k [01:26<00:34, 52.2files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.44k/8.24k [01:26<00:34, 52.6files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.45k/8.24k [01:26<00:31, 57.3files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.45k/8.24k [01:26<00:35, 50.2files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.46k/8.24k [01:27<00:39, 45.1files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.47k/8.24k [01:27<00:37, 47.0files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.47k/8.24k [01:27<00:37, 47.5files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.48k/8.24k [01:27<00:35, 49.2files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.49k/8.24k [01:27<00:33, 52.9files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.49k/8.24k [01:27<00:33, 51.5files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.50k/8.24k [01:27<00:32, 53.2files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.50k/8.24k [01:27<00:33, 51.1files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.51k/8.24k [01:28<00:32, 53.6files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.52k/8.24k [01:28<00:29, 57.9files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.52k/8.24k [01:28<00:32, 52.9files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.53k/8.24k [01:28<00:35, 48.0files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.54k/8.24k [01:28<00:32, 52.6files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.54k/8.24k [01:28<00:28, 58.5files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.55k/8.24k [01:28<00:30, 54.9files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.56k/8.24k [01:28<00:31, 54.2files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.57k/8.24k [01:29<00:25, 64.6files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.57k/8.24k [01:29<00:26, 63.2files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.58k/8.24k [01:29<00:28, 57.2files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.59k/8.24k [01:29<00:30, 54.7files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.60k/8.24k [01:29<00:27, 60.0files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.60k/8.24k [01:29<00:31, 51.9files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.61k/8.24k [01:29<00:35, 46.4files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.62k/8.24k [01:30<00:33, 48.6files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.62k/8.24k [01:30<00:32, 49.2files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.63k/8.24k [01:30<00:28, 56.8files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.64k/8.24k [01:30<00:26, 59.8files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.64k/8.24k [01:30<00:26, 60.8files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.65k/8.24k [01:30<00:26, 60.2files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.66k/8.24k [01:30<00:25, 60.9files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.67k/8.24k [01:30<00:26, 58.8files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.67k/8.24k [01:30<00:27, 56.8files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.68k/8.24k [01:31<00:23, 65.1files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.69k/8.24k [01:31<00:28, 54.3files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.70k/8.24k [01:31<00:26, 57.2files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.70k/8.24k [01:31<00:27, 56.6files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.71k/8.24k [01:31<00:28, 53.8files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.71k/8.24k [01:31<00:29, 52.4files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.72k/8.24k [01:31<00:34, 44.6files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.73k/8.24k [01:32<00:32, 46.5files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.73k/8.24k [01:32<00:34, 43.3files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.74k/8.24k [01:32<00:29, 51.4files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.75k/8.24k [01:32<00:29, 50.5files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.75k/8.24k [01:32<00:27, 53.7files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.76k/8.24k [01:32<00:26, 56.5files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.77k/8.24k [01:32<00:26, 55.4files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.78k/8.24k [01:32<00:24, 60.2files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.79k/8.24k [01:33<00:23, 61.4files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.79k/8.24k [01:33<00:24, 59.9files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.80k/8.24k [01:33<00:23, 61.2files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.81k/8.24k [01:33<00:24, 57.9files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.82k/8.24k [01:33<00:21, 65.9files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.83k/8.24k [01:33<00:21, 65.6files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.83k/8.24k [01:33<00:21, 64.7files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.84k/8.24k [01:33<00:19, 70.1files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.85k/8.24k [01:34<00:19, 70.8files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.86k/8.24k [01:34<00:17, 78.3files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.87k/8.24k [01:34<00:18, 72.8files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.88k/8.24k [01:34<00:17, 77.3files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.89k/8.24k [01:34<00:18, 73.7files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.89k/8.24k [01:34<00:18, 74.1files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.90k/8.24k [01:34<00:17, 77.1files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.91k/8.24k [01:34<00:16, 82.7files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.92k/8.24k [01:34<00:15, 85.2files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.93k/8.24k [01:35<00:17, 74.0files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.94k/8.24k [01:35<00:16, 77.2files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.95k/8.24k [01:35<00:18, 70.2files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.96k/8.24k [01:35<00:16, 76.2files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.97k/8.24k [01:35<00:16, 75.4files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.98k/8.24k [01:35<00:16, 78.4files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.99k/8.24k [01:35<00:17, 70.5files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 7.00k/8.24k [01:35<00:16, 75.5files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.01k/8.24k [01:36<00:17, 72.2files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.02k/8.24k [01:36<00:15, 77.9files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.02k/8.24k [01:36<00:16, 74.4files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.03k/8.24k [01:36<00:16, 73.1files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.04k/8.24k [01:36<00:15, 75.6files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.05k/8.24k [01:36<00:16, 74.2files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.06k/8.24k [01:36<00:14, 83.1files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.07k/8.24k [01:36<00:15, 76.5files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.08k/8.24k [01:36<00:14, 79.7files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.09k/8.24k [01:37<00:15, 75.7files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.10k/8.24k [01:37<00:17, 65.6files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.10k/8.24k [01:37<00:18, 61.0files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.11k/8.24k [01:37<00:18, 60.7files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.12k/8.24k [01:37<00:18, 60.8files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.12k/8.24k [01:37<00:19, 56.4files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.13k/8.24k [01:37<00:23, 47.2files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.14k/8.24k [01:38<00:22, 49.6files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.14k/8.24k [01:38<00:21, 50.1files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.15k/8.24k [01:38<00:22, 48.7files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.16k/8.24k [01:38<00:20, 52.0files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.16k/8.24k [01:38<00:19, 54.3files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.17k/8.24k [01:38<00:19, 54.1files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.17k/8.24k [01:38<00:22, 47.1files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.18k/8.24k [01:38<00:19, 54.4files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.19k/8.24k [01:39<00:18, 55.5files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.20k/8.24k [01:39<00:19, 52.5files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.20k/8.24k [01:39<00:18, 57.5files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.21k/8.24k [01:39<00:19, 52.2files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.22k/8.24k [01:39<00:18, 56.3files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.22k/8.24k [01:39<00:20, 48.4files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.23k/8.24k [01:39<00:20, 49.2files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.23k/8.24k [01:39<00:19, 50.5files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.24k/8.24k [01:40<00:19, 51.4files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.25k/8.24k [01:40<00:17, 56.0files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.25k/8.24k [01:40<00:18, 54.3files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.26k/8.24k [01:40<00:20, 48.2files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.27k/8.24k [01:40<00:18, 51.5files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.27k/8.24k [01:40<00:18, 53.1files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.28k/8.24k [01:40<00:18, 52.8files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.29k/8.24k [01:40<00:16, 58.1files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.30k/8.24k [01:41<00:14, 64.4files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.31k/8.24k [01:41<00:13, 71.4files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.32k/8.24k [01:41<00:13, 69.0files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.33k/8.24k [01:41<00:13, 69.3files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.34k/8.24k [01:41<00:11, 76.4files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.34k/8.24k [01:41<00:13, 68.4files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.35k/8.24k [01:41<00:12, 68.4files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.36k/8.24k [01:41<00:14, 60.3files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.37k/8.24k [01:42<00:15, 56.1files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.37k/8.24k [01:42<00:15, 56.8files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.38k/8.24k [01:42<00:13, 61.6files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.39k/8.24k [01:42<00:12, 68.4files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.40k/8.24k [01:42<00:13, 63.0files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.40k/8.24k [01:42<00:14, 58.9files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.41k/8.24k [01:42<00:14, 56.0files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.42k/8.24k [01:42<00:14, 58.2files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.43k/8.24k [01:43<00:13, 60.9files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.43k/8.24k [01:43<00:12, 63.1files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.44k/8.24k [01:43<00:13, 60.3files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.45k/8.24k [01:43<00:16, 48.6files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.45k/8.24k [01:43<00:15, 50.3files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.46k/8.24k [01:43<00:15, 49.5files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.47k/8.24k [01:43<00:15, 50.9files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.47k/8.24k [01:44<00:14, 54.0files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.48k/8.24k [01:44<00:12, 58.2files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.49k/8.24k [01:44<00:13, 56.7files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.50k/8.24k [01:44<00:13, 55.8files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.50k/8.24k [01:44<00:13, 55.4files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.51k/8.24k [01:44<00:13, 53.0files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.51k/8.24k [01:44<00:14, 48.8files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.52k/8.24k [01:44<00:14, 48.8files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.52k/8.24k [01:44<00:14, 48.5files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.53k/8.24k [01:45<00:13, 51.0files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.54k/8.24k [01:45<00:12, 55.7files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.55k/8.24k [01:45<00:10, 66.0files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.55k/8.24k [01:45<00:10, 63.6files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.56k/8.24k [01:45<00:11, 59.6files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.57k/8.24k [01:45<00:10, 65.8files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.58k/8.24k [01:45<00:10, 62.1files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.58k/8.24k [01:45<00:10, 60.3files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.59k/8.24k [01:46<00:09, 65.5files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.60k/8.24k [01:46<00:10, 60.0files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.61k/8.24k [01:46<00:12, 51.2files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.62k/8.24k [01:46<00:11, 53.3files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.62k/8.24k [01:46<00:10, 57.2files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.63k/8.24k [01:46<00:09, 65.3files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.64k/8.24k [01:46<00:09, 65.3files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.65k/8.24k [01:46<00:07, 79.1files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.66k/8.24k [01:47<00:06, 87.6files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.67k/8.24k [01:47<00:06, 84.2files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.68k/8.24k [01:47<00:07, 76.9files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.69k/8.24k [01:47<00:07, 73.4files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.70k/8.24k [01:47<00:06, 81.9files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.71k/8.24k [01:47<00:06, 77.9files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.72k/8.24k [01:47<00:06, 81.5files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.73k/8.24k [01:47<00:05, 85.3files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.74k/8.24k [01:48<00:05, 94.5files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.75k/8.24k [01:48<00:05, 88.2files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.77k/8.24k [01:48<00:05, 92.3files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.78k/8.24k [01:48<00:04, 95.6files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.79k/8.24k [01:48<00:04, 93.5files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.80k/8.24k [01:48<00:05, 84.2files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.81k/8.24k [01:48<00:05, 77.2files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.82k/8.24k [01:48<00:06, 67.7files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.82k/8.24k [01:49<00:05, 70.5files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.83k/8.24k [01:49<00:06, 64.5files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.84k/8.24k [01:49<00:06, 61.4files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.85k/8.24k [01:49<00:06, 61.5files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.85k/8.24k [01:49<00:06, 55.3files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.86k/8.24k [01:49<00:06, 54.7files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.87k/8.24k [01:49<00:07, 50.1files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.87k/8.24k [01:49<00:06, 52.7files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.88k/8.24k [01:50<00:06, 53.5files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.89k/8.24k [01:50<00:05, 60.5files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.89k/8.24k [01:50<00:06, 57.2files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.90k/8.24k [01:50<00:05, 59.5files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.91k/8.24k [01:50<00:05, 59.5files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.92k/8.24k [01:50<00:05, 62.8files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.92k/8.24k [01:50<00:05, 55.2files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.93k/8.24k [01:50<00:05, 60.9files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.94k/8.24k [01:51<00:04, 65.1files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.95k/8.24k [01:51<00:04, 69.0files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.96k/8.24k [01:51<00:03, 79.7files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.97k/8.24k [01:51<00:03, 83.2files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.98k/8.24k [01:51<00:02, 94.6files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.99k/8.24k [01:51<00:02, 97.4files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 8.00k/8.24k [01:51<00:02, 94.9files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 8.01k/8.24k [01:51<00:02, 88.2files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 8.02k/8.24k [01:51<00:02, 91.1files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.03k/8.24k [01:52<00:02, 87.1files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.04k/8.24k [01:52<00:02, 86.9files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.05k/8.24k [01:52<00:02, 79.3files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.06k/8.24k [01:52<00:02, 76.0files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.07k/8.24k [01:52<00:02, 80.1files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.08k/8.24k [01:52<00:02, 77.4files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.09k/8.24k [01:52<00:02, 67.5files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.10k/8.24k [01:52<00:01, 82.8files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.11k/8.24k [01:53<00:01, 89.4files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.12k/8.24k [01:53<00:01, 90.0files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.13k/8.24k [01:53<00:01, 86.8files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.15k/8.24k [01:53<00:00, 94.3files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.16k/8.24k [01:53<00:00, 93.8files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.17k/8.24k [01:53<00:00, 89.3files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.18k/8.24k [01:53<00:00, 89.1files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.19k/8.24k [01:53<00:00, 95.7files/s]",
    "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.20k/8.24k [01:54<00:00, 90.1files/s]",
    "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.21k/8.24k [01:54<00:00, 90.6files/s]",
    "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.22k/8.24k [01:54<00:00, 94.7files/s]",
    "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.23k/8.24k [01:54<00:00, 92.9files/s]",
    "                                                       "
  ]
}