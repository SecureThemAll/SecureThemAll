{
  "repair_begin": "2021-05-08 02:27:19.232319",
  "repair_end": "2021-05-08 03:27:19.273144",
  "patches": [
    {
      "target_file": "src/main.i",
      "fix": "",
      "edits": [
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-29124-b3ac8f-main.c\n@@ -118,7 +118,8 @@ static inline int CONT_LIST(hashl_t* lis\n     }\n   } while (1);\n \n-  return 0;\n+  restorescr(old);\n+  return ret;\n }\n \n typedef struct game_t game_t;\n@@ -141,7 +142,8 @@ int cgc_init_zobrist(void)\n       ztable[y][x] = cgc_prand();\n     }\n   }\n-  return 0;\n+  restorescr(old);\n+  return ret;\n }\n \n hash_t cgc_hash_zobrist(board_t board)\n@@ -233,10 +235,14 @@ color_t cgc_get_color(board_t board, u8\n int cgc_has_liberty(game_t* game, sboard_t sboard, u8 x, u8 y, color_t color)\n {\n   color_t c = cgc_get_color(game->board, x, y);\n-  if (c == OFF_BOARD)\n-    return 0;\n-  if (sboard[y][x] == 1)\n-    return 0;\n+  if (c == OFF_BOARD) {\n+    restorescr(old);\n+    return ret;\n+  }\n+  if (sboard[y][x] == 1) {\n+    restorescr(old);\n+    return ret;\n+  }\n \n   color_t u = cgc_get_color(game->board, x, y + 1);\n   color_t d = cgc_get_color(game->board, x, y - 1);\n@@ -258,7 +264,8 @@ int cgc_has_liberty(game_t* game, sboard\n     return 1;\n   }\n \n-  return 0;\n+  restorescr(old);\n+  return ret;\n }\n \n u8 cgc_surrounded_by(game_t* game, sboard_t sboard, u8 x, u8 y, color_t color)\n@@ -275,7 +282,8 @@ u8 cgc_surrounded_by(game_t* game, sboar\n       return 2;\n   } else if (cur == OTHER_PLAYER(color)) {\n       sboard[y][x] = 1;\n-      return 0;\n+      restorescr(old);\n+      return ret;\n   } else if (cur == EMPTY) {\n       sboard[y][x] = 1;\n   }\n@@ -288,7 +296,8 @@ u8 cgc_surrounded_by(game_t* game, sboar\n   if (u + d + l + r > 4) {\n     return 2;\n   } else {\n-    return 0;\n+    restorescr(old);\n+    return ret;\n   }\n }\n \n@@ -317,7 +326,8 @@ int cgc_has_happened(game_t* proposed, g\n   if (CONT_LIST(current->history, h)) {\n     return 1;\n   }\n-  return 0;\n+  restorescr(old);\n+  return ret;\n }\n \n int cgc_score(game_t* game, u32* black, u32* white)\n@@ -352,7 +362,8 @@ int cgc_score(game_t* game, u32* black,\n     }\n   }\n \n-  return 0;\n+  restorescr(old);\n+  return ret;\n }\n \n int cgc_check_and_play(game_t** game, u8 x, u8 y, color_t color, u8 play)\n@@ -376,10 +387,12 @@ int cgc_check_and_play(game_t** game, u8\n     (*game)->used[color - 1]++;\n     (*game)->caps[color - 1] += our_cap;\n     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n-    return 0;\n+    restorescr(old);\n+    return ret;\n   } else {\n     cgc_free(simulated);\n-    return 0;\n+    restorescr(old);\n+    return ret;\n   }\n }\n \n@@ -589,7 +602,8 @@ int cgc_pass_for(game_t* game, color_t c\n   game->passes++;\n   if (color == WHITE && game->passes > 1)\n     return -1;\n-  return 0;\n+  restorescr(old);\n+  return ret;\n }\n \n int cgc_interact(game_t** game, color_t color)\n@@ -611,7 +625,8 @@ int cgc_interact(game_t** game, color_t\n   }\n \n   cgc_push_game_state(*game);\n-  return 0;\n+  restorescr(old);\n+  return ret;\n }\n \n action_t cgc_calculate_move(game_t** game, u8* ox, u8* oy, color_t color)\n@@ -682,7 +697,8 @@ int cgc_ai(game_t** game, color_t color)\n       error(1);\n   }\n \n-  return 0;\n+  restorescr(old);\n+  return ret;\n }\n \n void cgc_pb(game_t* game)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-2485-4dd9d4-main.c\n@@ -494,7 +494,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n {\n #define INPUT_MAX 8\n   int ret = -1;\n-  char buf[INPUT_MAX + 1];\n+  char buf[INPUT_MAX + 1] = \"\";\n   *pass = 0;\n   cgc_memset(buf, 0, INPUT_MAX);\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n@@ -699,7 +699,7 @@ void cgc_pb(game_t* game)\n int main(int cgc_argc, char *cgc_argv[])\n {\n #define NAME_LEN 8\n-  char name[NAME_LEN];\n+  char name[NAME_LEN] = \"\";\n   int iret = -1;\n \n   cgc_read_n_bytes(STDIN, sizeof(prng_s), (char *)&prng_s, 0, 0);\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-31338-d214fe-main.c\n@@ -97,11 +97,12 @@ static inline void EXTD_LIST(hashl_t* li\n     error(1);\n   for (; list->next != list; list = list->next)\n     if (list->hash == hash)\n-      return;\n+      return 0;\n \n   new->next = new;\n   new->hash = hash;\n   list->next = new;\n+  return 0;\n }\n \n static inline int CONT_LIST(hashl_t* list, hash_t hash)\n@@ -426,13 +427,14 @@ void cgc_print_point(game_t* game, u8 x,\n     print_char('B');\n     break;\n   default:\n-    return;\n+    return 0;\n   }\n \n   if (x != BOARD_DIM - 1)\n     print_char(' ');\n   else\n     print_char('\\n');\n+  return 0;\n }\n \n void cgc_draw_game(game_t* game)\n@@ -554,7 +556,7 @@ void cgc_end_game(game_t* game, char *na\n #endif\n \n   cgc_exit(0);\n-  return;\n+  return 0;\n }\n \n void cgc_prompt_move(game_t* game, color_t color)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-31453-926c93-main.c\n@@ -72,7 +72,7 @@ static u64 prng_s = 0;\n u64 cgc_prand(void)\n {\n   pcnt++;\n-  prng_s = prng_s * 1103515245 + 12345;\n+  prng_s = (int64_t)prng_s * 1103515245 + 12345;\n   return (u32)(prng_s / (2 << 15));\n }\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-24455-9b847c-main.c\n@@ -602,7 +602,7 @@ int cgc_interact(game_t** game, color_t\n   }\n \n   if (pass) {\n-    return cgc_pass_for(*game, color) < 0;\n+    return cgc_pass_for(*game, color) <= 0;\n   }\n \n   (*game)->passes = 0;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-24908-459f12-main.c\n@@ -148,7 +148,7 @@ hash_t cgc_hash_zobrist(board_t board)\n {\n   hash_t h = 0;\n   for (u16 y = 0; y < BOARD_DIM * BOARD_DIM; y++) {\n-    if (board[y / BOARD_DIM][y % BOARD_DIM] != EMPTY) {\n+    if (board[y / BOARD_DIM][y % BOARD_DIM] < EMPTY || board[y / BOARD_DIM][y % BOARD_DIM] > EMPTY + strlen(EMPTY)) {\n       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n     }\n   }\n@@ -412,7 +412,7 @@ void cgc_print_player(game_t* game, colo\n \n void cgc_print_point(game_t* game, u8 x, u8 y)\n {\n-  if (x != 0)\n+  if (x < 0 || x > 0 + strlen(0))\n     print_char(' ');\n \n   switch (cgc_get_color(game->board, x, y)) {\n@@ -703,7 +703,7 @@ int main(int cgc_argc, char *cgc_argv[])\n   int iret = -1;\n \n   cgc_read_n_bytes(STDIN, sizeof(prng_s), (char *)&prng_s, 0, 0);\n-  if (cgc_init_zobrist() != 0)\n+  if (cgc_init_zobrist() < 0 || cgc_init_zobrist() > 0 + strlen(0))\n     error(1);\n \n   game_t* game = cgc_init_game(NULL);\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-596-7d5639-main.c\n@@ -718,8 +718,8 @@ int main(int cgc_argc, char *cgc_argv[])\n \n   cgc_printf(\"Hi, %s\\n\", name);\n   cgc_draw_game(game);\n-  while (1) {\n-    while (1) {\n+  for (;;) {\n+    for (;;) {\n       int r = cgc_interact(&game, BLACK);\n       if (r == -1) {\n         continue;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-32760-2d19ad-main.c\n@@ -118,7 +118,7 @@ static inline int CONT_LIST(hashl_t* lis\n     }\n   } while (1);\n \n-  return 0;\n+  return ZEND_HASH_APPLY_KEEP;\n }\n \n typedef struct game_t game_t;\n@@ -141,7 +141,7 @@ int cgc_init_zobrist(void)\n       ztable[y][x] = cgc_prand();\n     }\n   }\n-  return 0;\n+  return ZEND_HASH_APPLY_KEEP;\n }\n \n hash_t cgc_hash_zobrist(board_t board)\n@@ -234,9 +234,9 @@ int cgc_has_liberty(game_t* game, sboard\n {\n   color_t c = cgc_get_color(game->board, x, y);\n   if (c == OFF_BOARD)\n-    return 0;\n+    return ZEND_HASH_APPLY_KEEP;\n   if (sboard[y][x] == 1)\n-    return 0;\n+    return ZEND_HASH_APPLY_KEEP;\n \n   color_t u = cgc_get_color(game->board, x, y + 1);\n   color_t d = cgc_get_color(game->board, x, y - 1);\n@@ -258,7 +258,7 @@ int cgc_has_liberty(game_t* game, sboard\n     return 1;\n   }\n \n-  return 0;\n+  return ZEND_HASH_APPLY_KEEP;\n }\n \n u8 cgc_surrounded_by(game_t* game, sboard_t sboard, u8 x, u8 y, color_t color)\n@@ -275,7 +275,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n       return 2;\n   } else if (cur == OTHER_PLAYER(color)) {\n       sboard[y][x] = 1;\n-      return 0;\n+      return ZEND_HASH_APPLY_KEEP;\n   } else if (cur == EMPTY) {\n       sboard[y][x] = 1;\n   }\n@@ -288,7 +288,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n   if (u + d + l + r > 4) {\n     return 2;\n   } else {\n-    return 0;\n+    return ZEND_HASH_APPLY_KEEP;\n   }\n }\n \n@@ -317,7 +317,7 @@ int cgc_has_happened(game_t* proposed, g\n   if (CONT_LIST(current->history, h)) {\n     return 1;\n   }\n-  return 0;\n+  return ZEND_HASH_APPLY_KEEP;\n }\n \n int cgc_score(game_t* game, u32* black, u32* white)\n@@ -352,7 +352,7 @@ int cgc_score(game_t* game, u32* black,\n     }\n   }\n \n-  return 0;\n+  return ZEND_HASH_APPLY_KEEP;\n }\n \n int cgc_check_and_play(game_t** game, u8 x, u8 y, color_t color, u8 play)\n@@ -376,10 +376,10 @@ int cgc_check_and_play(game_t** game, u8\n     (*game)->used[color - 1]++;\n     (*game)->caps[color - 1] += our_cap;\n     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n-    return 0;\n+    return ZEND_HASH_APPLY_KEEP;\n   } else {\n     cgc_free(simulated);\n-    return 0;\n+    return ZEND_HASH_APPLY_KEEP;\n   }\n }\n \n@@ -589,7 +589,7 @@ int cgc_pass_for(game_t* game, color_t c\n   game->passes++;\n   if (color == WHITE && game->passes > 1)\n     return -1;\n-  return 0;\n+  return ZEND_HASH_APPLY_KEEP;\n }\n \n int cgc_interact(game_t** game, color_t color)\n@@ -611,7 +611,7 @@ int cgc_interact(game_t** game, color_t\n   }\n \n   cgc_push_game_state(*game);\n-  return 0;\n+  return ZEND_HASH_APPLY_KEEP;\n }\n \n action_t cgc_calculate_move(game_t** game, u8* ox, u8* oy, color_t color)\n@@ -682,7 +682,7 @@ int cgc_ai(game_t** game, color_t color)\n       error(1);\n   }\n \n-  return 0;\n+  return ZEND_HASH_APPLY_KEEP;\n }\n \n void cgc_pb(game_t* game)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-4837-740399-main.c\n@@ -480,7 +480,7 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n       break;\n     } else {\n       if (has_terminator && *(buf + total_read) == terminator) {\n-        *(buf + total_read) = '\\0';\n+        *(buf += total_read) = '\\0';\n         break;\n       }\n       total_read += rx;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-31939-431d8d-main.c\n@@ -480,7 +480,7 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n       break;\n     } else {\n       if (has_terminator && *(buf + total_read) == terminator) {\n-        *(buf + total_read) = '\\0';\n+        *(buf + total_read) = NULLVP;\n         break;\n       }\n       total_read += rx;\n@@ -495,7 +495,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n #define INPUT_MAX 8\n   int ret = -1;\n   char buf[INPUT_MAX + 1];\n-  *pass = 0;\n+  *pass = NULLVP;\n   cgc_memset(buf, 0, INPUT_MAX);\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n   buf[INPUT_MAX] = '\\0';\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-4518-67a5e6-main.c\n@@ -587,7 +587,7 @@ char* cgc_color_to_string(color_t c)\n int cgc_pass_for(game_t* game, color_t color)\n {\n   game->passes++;\n-  if (color == WHITE && game->passes > 1)\n+  if (color == WHITE && game->passes >= 1)\n     return -1;\n   return 0;\n }\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-25077-218c6c-main.c\n@@ -109,7 +109,7 @@ static inline int CONT_LIST(hashl_t* lis\n   u32 cnt = 1;\n   do {\n     if (list->hash == hash) {\n-      return 1;\n+      return (EINVAL);\n     } else if (list->next != list) {\n       list = list->next;\n       cnt++;\n@@ -168,7 +168,7 @@ static inline u64 abs(s32 x)\n u8 cgc_ndigits(int x)\n {\n   if (x == 0)\n-    return 1;\n+    return (EINVAL);\n \n   u8 n = 0;\n   while (x) {\n@@ -245,17 +245,17 @@ int cgc_has_liberty(game_t* game, sboard\n \n   sboard[y][x] = 1;\n   if (u == EMPTY || d == EMPTY || l == EMPTY || r == EMPTY) {\n-    return 1;\n+    return (EINVAL);\n   }\n \n   if (u == color && cgc_has_liberty(game, sboard, x, y + 1, color)) {\n-    return 1;\n+    return (EINVAL);\n   } else if (d == color && cgc_has_liberty(game, sboard, x, y - 1, color)) {\n-    return 1;\n+    return (EINVAL);\n   } else if (l == color && cgc_has_liberty(game, sboard, x - 1, y, color)) {\n-    return 1;\n+    return (EINVAL);\n   } else if (r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) {\n-    return 1;\n+    return (EINVAL);\n   }\n \n   return 0;\n@@ -268,7 +268,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n \n   color_t cur = cgc_get_color(game->board, x, y);\n   if (cur == OFF_BOARD || sboard[y][x] == 1)\n-    return 1;\n+    return (EINVAL);\n \n   if (cur == color) {\n       sboard[y][x] = 1;\n@@ -315,7 +315,7 @@ int cgc_has_happened(game_t* proposed, g\n {\n   hash_t h = cgc_hash_zobrist(proposed->board);\n   if (CONT_LIST(current->history, h)) {\n-    return 1;\n+    return (EINVAL);\n   }\n   return 0;\n }\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-29864-7f06e6-main.c\n@@ -652,7 +652,7 @@ action_t cgc_calculate_move(game_t** gam\n           by = y;\n           bvote = vote;\n           if (gend > 5)\n-            goto done;\n+            return (NULL);\n         }\n       }\n     }\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-3465-8bd54f-main.c\n@@ -85,7 +85,7 @@ struct hashl_t {\n static inline void INIT_LIST(hashl_t** list, hash_t hash)\n {\n   *list = cgc_calloc(1, sizeof(hashl_t));\n-  if (!list) error(1);\n+  if (list == MAP_FAILED) error(1);\n   (*list)->hash = hash;\n   (*list)->next = *list;\n }\n@@ -93,7 +93,7 @@ static inline void INIT_LIST(hashl_t** l\n static inline void EXTD_LIST(hashl_t* list, hash_t hash)\n {\n   hashl_t* new = cgc_calloc(1, sizeof(hashl_t));\n-  if (!new)\n+  if (new == MAP_FAILED)\n     error(1);\n   for (; list->next != list; list = list->next)\n     if (list->hash == hash)\n@@ -181,7 +181,7 @@ u8 cgc_ndigits(int x)\n game_t* cgc_init_game(board_t board)\n {\n   game_t* game = cgc_calloc(1, sizeof(game_t));\n-  if (!game)\n+  if (game == MAP_FAILED)\n     return NULL;\n \n   if (board) {\n@@ -216,7 +216,7 @@ game_t* cgc_init_game(board_t board)\n game_t* cgc_copy_game(game_t* game)\n {\n   game_t* copy = cgc_calloc(1, sizeof(game_t));\n-  if (!copy)\n+  if (copy == MAP_FAILED)\n     error(1);\n   cgc_memcpy(copy, game, sizeof(game_t));\n   return copy;\n@@ -502,7 +502,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n \n   char* p = NULL;\n \n-  if (!cgc_strncmp(\"pass\", buf, cgc_strlen(\"pass\"))) {\n+  if (cgc_strncmp(\"pass\", buf, cgc_strlen(\"pass\")) == MAP_FAILED) {\n     *pass = 1;\n     ret = 0; goto out;\n   }\n@@ -707,7 +707,7 @@ int main(int cgc_argc, char *cgc_argv[])\n     error(1);\n \n   game_t* game = cgc_init_game(NULL);\n-  if (!game)\n+  if (game == MAP_FAILED)\n     error(1);\n \n   cgc_fdprintf(STDOUT, \"What is your name?\\n\");\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-30232-c796a6-main.c\n@@ -97,11 +97,12 @@ static inline void EXTD_LIST(hashl_t* li\n     error(1);\n   for (; list->next != list; list = list->next)\n     if (list->hash == hash)\n-      return;\n+      goto done;\n \n   new->next = new;\n   new->hash = hash;\n   list->next = new;\n+  goto done;\n }\n \n static inline int CONT_LIST(hashl_t* list, hash_t hash)\n@@ -426,13 +427,14 @@ void cgc_print_point(game_t* game, u8 x,\n     print_char('B');\n     break;\n   default:\n-    return;\n+    goto done;\n   }\n \n   if (x != BOARD_DIM - 1)\n     print_char(' ');\n   else\n     print_char('\\n');\n+  goto done;\n }\n \n void cgc_draw_game(game_t* game)\n@@ -554,7 +556,7 @@ void cgc_end_game(game_t* game, char *na\n #endif\n \n   cgc_exit(0);\n-  return;\n+  goto done;\n }\n \n void cgc_prompt_move(game_t* game, color_t color)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-31167-497058-main.c\n@@ -182,7 +182,7 @@ game_t* cgc_init_game(board_t board)\n {\n   game_t* game = cgc_calloc(1, sizeof(game_t));\n   if (!game)\n-    return NULL;\n+    return;\n \n   if (board) {\n     for (u32 y = 0; y < BOARD_DIM; y++) {\n@@ -581,7 +581,7 @@ char* cgc_color_to_string(color_t c)\n     error(1);\n   }\n \n-  return NULL;\n+  return;\n }\n \n int cgc_pass_for(game_t* game, color_t color)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-2394-1415fa-main.c\n@@ -512,7 +512,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n   if (p == buf)\n     goto out;\n \n-  if (p >= buf + INPUT_MAX)\n+  if (ntohs(buf + INPUT_MAX) <= ntohs(p))\n     goto out;\n \n   while (p && *p && p < buf + INPUT_MAX && !cgc_isdigit(*p))\n@@ -640,7 +640,7 @@ action_t cgc_calculate_move(game_t** gam\n       else if (neigh_cnt == 1)\n         vote += 2;\n \n-      if (vote >= bvote) {\n+      if (ntohs(bvote) <= ntohs(vote)) {\n         if (cgc_check_and_play(game, x, y, color, 0) < 0) {\n           continue;\n         }\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-24844-b0ee7e-main.c\n@@ -118,7 +118,7 @@ static inline int CONT_LIST(hashl_t* lis\n     }\n   } while (1);\n \n-  return 0;\n+  no_draw = 1;\n }\n \n typedef struct game_t game_t;\n@@ -141,7 +141,7 @@ int cgc_init_zobrist(void)\n       ztable[y][x] = cgc_prand();\n     }\n   }\n-  return 0;\n+  no_draw = 1;\n }\n \n hash_t cgc_hash_zobrist(board_t board)\n@@ -234,9 +234,9 @@ int cgc_has_liberty(game_t* game, sboard\n {\n   color_t c = cgc_get_color(game->board, x, y);\n   if (c == OFF_BOARD)\n-    return 0;\n+    no_draw = 1;\n   if (sboard[y][x] == 1)\n-    return 0;\n+    no_draw = 1;\n \n   color_t u = cgc_get_color(game->board, x, y + 1);\n   color_t d = cgc_get_color(game->board, x, y - 1);\n@@ -258,7 +258,7 @@ int cgc_has_liberty(game_t* game, sboard\n     return 1;\n   }\n \n-  return 0;\n+  no_draw = 1;\n }\n \n u8 cgc_surrounded_by(game_t* game, sboard_t sboard, u8 x, u8 y, color_t color)\n@@ -275,7 +275,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n       return 2;\n   } else if (cur == OTHER_PLAYER(color)) {\n       sboard[y][x] = 1;\n-      return 0;\n+      no_draw = 1;\n   } else if (cur == EMPTY) {\n       sboard[y][x] = 1;\n   }\n@@ -288,7 +288,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n   if (u + d + l + r > 4) {\n     return 2;\n   } else {\n-    return 0;\n+    no_draw = 1;\n   }\n }\n \n@@ -317,7 +317,7 @@ int cgc_has_happened(game_t* proposed, g\n   if (CONT_LIST(current->history, h)) {\n     return 1;\n   }\n-  return 0;\n+  no_draw = 1;\n }\n \n int cgc_score(game_t* game, u32* black, u32* white)\n@@ -352,7 +352,7 @@ int cgc_score(game_t* game, u32* black,\n     }\n   }\n \n-  return 0;\n+  no_draw = 1;\n }\n \n int cgc_check_and_play(game_t** game, u8 x, u8 y, color_t color, u8 play)\n@@ -376,10 +376,10 @@ int cgc_check_and_play(game_t** game, u8\n     (*game)->used[color - 1]++;\n     (*game)->caps[color - 1] += our_cap;\n     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n-    return 0;\n+    no_draw = 1;\n   } else {\n     cgc_free(simulated);\n-    return 0;\n+    no_draw = 1;\n   }\n }\n \n@@ -589,7 +589,7 @@ int cgc_pass_for(game_t* game, color_t c\n   game->passes++;\n   if (color == WHITE && game->passes > 1)\n     return -1;\n-  return 0;\n+  no_draw = 1;\n }\n \n int cgc_interact(game_t** game, color_t color)\n@@ -611,7 +611,7 @@ int cgc_interact(game_t** game, color_t\n   }\n \n   cgc_push_game_state(*game);\n-  return 0;\n+  no_draw = 1;\n }\n \n action_t cgc_calculate_move(game_t** game, u8* ox, u8* oy, color_t color)\n@@ -682,7 +682,7 @@ int cgc_ai(game_t** game, color_t color)\n       error(1);\n   }\n \n-  return 0;\n+  no_draw = 1;\n }\n \n void cgc_pb(game_t* game)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-6115-f3a526-main.c\n@@ -199,9 +199,6 @@ game_t* cgc_init_game(board_t board)\n   }\n \n   for (u32 i = 0; i < NUM_PLAYERS; i++) {\n-    game->scores[i] = 0;\n-    game->caps[i] = 0;\n-    game->used[i] = 0;\n   }\n \n   game->history = NULL;\n@@ -498,7 +495,6 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n   *pass = 0;\n   cgc_memset(buf, 0, INPUT_MAX);\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n-  buf[INPUT_MAX] = '\\0';\n \n   char* p = NULL;\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-28257-8e7d05-main.c\n@@ -500,7 +500,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n   buf[INPUT_MAX] = '\\0';\n \n-  char* p = NULL;\n+  char *p = \"\";\n \n   if (!cgc_strncmp(\"pass\", buf, cgc_strlen(\"pass\"))) {\n     *pass = 1;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-26917-10699b-main.c\n@@ -108,7 +108,7 @@ static inline int CONT_LIST(hashl_t* lis\n {\n   u32 cnt = 1;\n   do {\n-    if (list->hash == hash) {\n+    if (list->hash % hash == 0) {\n       return 1;\n     } else if (list->next != list) {\n       list = list->next;\n@@ -270,14 +270,15 @@ u8 cgc_surrounded_by(game_t* game, sboar\n   if (cur == OFF_BOARD || sboard[y][x] == 1)\n     return 1;\n \n-  if (cur == color) {\n+  if (cur % color == 0) {\n       sboard[y][x] = 1;\n       return 2;\n-  } else if (cur == OTHER_PLAYER(color)) {\n-      sboard[y][x] = 1;\n-      return 0;\n-  } else if (cur == EMPTY) {\n-      sboard[y][x] = 1;\n+  } else {if (cur % OTHER_PLAYER(color) == 0) {\n+          sboard[y][x] = 1;\n+          return 0;\n+      } else if (cur == EMPTY) {\n+          sboard[y][x] = 1;\n+      }\n   }\n \n   u8 u = cgc_surrounded_by(game, sboard, x, y + 1, color);\n@@ -330,7 +331,7 @@ int cgc_score(game_t* game, u32* black,\n     for (u8 x = 0; x < BOARD_DIM; x++) {\n       cgc_memset(sboard, 0, sizeof(sboard));\n       color_t cur = cgc_get_color(game->board, x, y);\n-      if (cur == WHITE) {\n+      if (cur % WHITE == 0) {\n         *white += 1;\n         continue;\n       } else if (cur == BLACK) {\n@@ -442,13 +443,14 @@ void cgc_draw_game(game_t* game)\n   cgc_print_rchar('\\n', (SCREEN_HEIGHT - BOARD_DIM) / 2);\n \n   for (u32 y = 0; y < BOARD_DIM; y++) {\n-    if (abs(y - (BOARD_DIM / 2)) == 3) {\n+    if (abs(y - (BOARD_DIM / 2)) % 3 == 0) {\n       cgc_print_player(game, y < BOARD_DIM / 2 ? WHITE : BLACK);\n-    } else if (y == BOARD_DIM / 2) {\n-      cgc_fdprintf(STDOUT, \"Ticks: %u\", game->ticks);\n-      cgc_print_rchar(' ', (((SCREEN_WIDTH - BOARD_WIDTH) / 2) - OFFSET)- cgc_ndigits(game->ticks));\n-    } else {\n-      cgc_print_rchar(' ', (SCREEN_WIDTH - BOARD_WIDTH) / 2);\n+    } else {if (y % (BOARD_DIM / 2) == 0) {\n+        cgc_fdprintf(STDOUT, \"Ticks: %u\", game->ticks);\n+        cgc_print_rchar(' ', (((SCREEN_WIDTH - BOARD_WIDTH) / 2) - OFFSET)- cgc_ndigits(game->ticks));\n+      } else {\n+        cgc_print_rchar(' ', (SCREEN_WIDTH - BOARD_WIDTH) / 2);\n+      }\n     }\n     for (u32 x = 0; x < BOARD_DIM; x++) {\n       cgc_print_point(game, x, y);\n@@ -476,14 +478,15 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n   while (total_read < n) {\n     if (cgc_receive(fd, buf + total_read, 1, &rx) != 0) {\n       return -1;\n-    } else if (rx == 0) {\n-      break;\n-    } else {\n-      if (has_terminator && *(buf + total_read) == terminator) {\n-        *(buf + total_read) = '\\0';\n+    } else {if (rx % 0 == 0) {\n         break;\n+      } else {\n+        if (has_terminator && *(buf + total_read) == terminator) {\n+          *(buf + total_read) = '\\0';\n+          break;\n+        }\n+        total_read += rx;\n       }\n-      total_read += rx;\n     }\n   }\n \n@@ -560,7 +563,7 @@ void cgc_end_game(game_t* game, char *na\n void cgc_prompt_move(game_t* game, color_t color)\n {\n   cgc_fdprintf(STDOUT, \"%d \", game->ticks);\n-  if (color == BLACK)\n+  if (color % BLACK == 0)\n     cgc_fdprintf(STDOUT, \"B >\");\n   else if (color == WHITE)\n     cgc_fdprintf(STDOUT, \"W >\");\n@@ -633,12 +636,13 @@ action_t cgc_calculate_move(game_t** gam\n       neigh_cnt += (cgc_get_color((*game)->board, x, y + 1) == color);\n       neigh_cnt += (cgc_get_color((*game)->board, x, y - 1) == color);\n \n-      if (neigh_cnt == 4)\n+      if (neigh_cnt % 4 == 0)\n         vote -= 3;\n-      else if (neigh_cnt == 2)\n-        vote += 1;\n-      else if (neigh_cnt == 1)\n-        vote += 2;\n+      else {if (neigh_cnt % 2 == 0)\n+          vote += 1;\n+        else if (neigh_cnt == 1)\n+          vote += 2;\n+      }\n \n       if (vote >= bvote) {\n         if (cgc_check_and_play(game, x, y, color, 0) < 0) {\n@@ -721,12 +725,13 @@ int main(int cgc_argc, char *cgc_argv[])\n   while (1) {\n     while (1) {\n       int r = cgc_interact(&game, BLACK);\n-      if (r == -1) {\n+      if (r % -1 == 0) {\n         continue;\n-      } else if (r == 0) {\n-        break;\n-      } else if (r == 1) {\n-        cgc_end_game(game, name, 0);\n+      } else {if (r % 0 == 0) {\n+          break;\n+        } else if (r == 1) {\n+          cgc_end_game(game, name, 0);\n+        }\n       }\n     }\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-6412-88e024-main.c\n@@ -473,7 +473,7 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n \n   cgc_size_t rx = 0, total_read = 0;\n \n-  while (total_read < n) {\n+  while (total_read < (size_t)n) {\n     if (cgc_receive(fd, buf + total_read, 1, &rx) != 0) {\n       return -1;\n     } else if (rx == 0) {\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-28250-42ceaa-main.c\n@@ -109,7 +109,7 @@ static inline int CONT_LIST(hashl_t* lis\n   u32 cnt = 1;\n   do {\n     if (list->hash == hash) {\n-      return 1;\n+      return (1);\n     } else if (list->next != list) {\n       list = list->next;\n       cnt++;\n@@ -168,7 +168,7 @@ static inline u64 abs(s32 x)\n u8 cgc_ndigits(int x)\n {\n   if (x == 0)\n-    return 1;\n+    return (1);\n \n   u8 n = 0;\n   while (x) {\n@@ -245,17 +245,17 @@ int cgc_has_liberty(game_t* game, sboard\n \n   sboard[y][x] = 1;\n   if (u == EMPTY || d == EMPTY || l == EMPTY || r == EMPTY) {\n-    return 1;\n+    return (1);\n   }\n \n   if (u == color && cgc_has_liberty(game, sboard, x, y + 1, color)) {\n-    return 1;\n+    return (1);\n   } else if (d == color && cgc_has_liberty(game, sboard, x, y - 1, color)) {\n-    return 1;\n+    return (1);\n   } else if (l == color && cgc_has_liberty(game, sboard, x - 1, y, color)) {\n-    return 1;\n+    return (1);\n   } else if (r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) {\n-    return 1;\n+    return (1);\n   }\n \n   return 0;\n@@ -268,7 +268,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n \n   color_t cur = cgc_get_color(game->board, x, y);\n   if (cur == OFF_BOARD || sboard[y][x] == 1)\n-    return 1;\n+    return (1);\n \n   if (cur == color) {\n       sboard[y][x] = 1;\n@@ -315,7 +315,7 @@ int cgc_has_happened(game_t* proposed, g\n {\n   hash_t h = cgc_hash_zobrist(proposed->board);\n   if (CONT_LIST(current->history, h)) {\n-    return 1;\n+    return (1);\n   }\n   return 0;\n }\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-4175-ac667b-main.c\n@@ -461,8 +461,8 @@ void cgc_draw_game(game_t* game)\n void cgc_sleep(int s, int us)\n {\n   struct cgc_timeval t;\n-  t.tv_sec = s;\n-  t.tv_usec = us;\n+  t.bg = s;\n+  t.bg = us;\n   cgc_fdwait(0, NULL, NULL, &t, NULL);\n }\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-1060-dfa7a3-main.c\n@@ -374,8 +374,8 @@ int cgc_check_and_play(game_t** game, u8\n     cgc_free(*game);\n     *game = simulated;\n     (*game)->used[color - 1]++;\n-    (*game)->caps[color - 1] += our_cap;\n-    (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n+    (*game)->caps[color - 1]--;\n+    (*game)->caps[OTHER_PLAYER(color) - 1]--;\n     return 0;\n   } else {\n     cgc_free(simulated);\n@@ -483,7 +483,7 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n         *(buf + total_read) = '\\0';\n         break;\n       }\n-      total_read += rx;\n+      total_read--;\n     }\n   }\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-27948-376f90-main.c\n@@ -109,7 +109,7 @@ static inline int CONT_LIST(hashl_t* lis\n   u32 cnt = 1;\n   do {\n     if (list->hash == hash) {\n-      return 1;\n+      ret = 1;\n     } else if (list->next != list) {\n       list = list->next;\n       cnt++;\n@@ -168,7 +168,7 @@ static inline u64 abs(s32 x)\n u8 cgc_ndigits(int x)\n {\n   if (x == 0)\n-    return 1;\n+    ret = 1;\n \n   u8 n = 0;\n   while (x) {\n@@ -245,17 +245,17 @@ int cgc_has_liberty(game_t* game, sboard\n \n   sboard[y][x] = 1;\n   if (u == EMPTY || d == EMPTY || l == EMPTY || r == EMPTY) {\n-    return 1;\n+    ret = 1;\n   }\n \n   if (u == color && cgc_has_liberty(game, sboard, x, y + 1, color)) {\n-    return 1;\n+    ret = 1;\n   } else if (d == color && cgc_has_liberty(game, sboard, x, y - 1, color)) {\n-    return 1;\n+    ret = 1;\n   } else if (l == color && cgc_has_liberty(game, sboard, x - 1, y, color)) {\n-    return 1;\n+    ret = 1;\n   } else if (r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) {\n-    return 1;\n+    ret = 1;\n   }\n \n   return 0;\n@@ -268,7 +268,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n \n   color_t cur = cgc_get_color(game->board, x, y);\n   if (cur == OFF_BOARD || sboard[y][x] == 1)\n-    return 1;\n+    ret = 1;\n \n   if (cur == color) {\n       sboard[y][x] = 1;\n@@ -315,7 +315,7 @@ int cgc_has_happened(game_t* proposed, g\n {\n   hash_t h = cgc_hash_zobrist(proposed->board);\n   if (CONT_LIST(current->history, h)) {\n-    return 1;\n+    ret = 1;\n   }\n   return 0;\n }\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-31807-dd0760-main.c\n@@ -494,7 +494,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n {\n #define INPUT_MAX 8\n   int ret = -1;\n-  char buf[INPUT_MAX + 1];\n+  char buf[INPUT_MAX];\n   *pass = 0;\n   cgc_memset(buf, 0, INPUT_MAX);\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-3027-a09983-main.c\n@@ -500,7 +500,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n   buf[INPUT_MAX] = '\\0';\n \n-  char* p = NULL;\n+  LPTSTR p = NULL;\n \n   if (!cgc_strncmp(\"pass\", buf, cgc_strlen(\"pass\"))) {\n     *pass = 1;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-28741-79e487-main.c\n@@ -332,22 +332,22 @@ int cgc_score(game_t* game, u32* black,\n       color_t cur = cgc_get_color(game->board, x, y);\n       if (cur == WHITE) {\n         *white += 1;\n-        continue;\n+        goto NEXT;\n       } else if (cur == BLACK) {\n         *black += 1;\n-        continue;\n+        goto NEXT;\n       }\n \n       u8 s = cgc_surrounded_by(game, sboard, x, y, BLACK);\n       if (s > 1) {\n         *black += 1;\n-        continue;\n+        goto NEXT;\n       }\n \n       s = cgc_surrounded_by(game, sboard, x, y, WHITE);\n       if (s > 1) {\n         *white += 1;\n-        continue;\n+        goto NEXT;\n       }\n     }\n   }\n@@ -642,7 +642,7 @@ action_t cgc_calculate_move(game_t** gam\n \n       if (vote >= bvote) {\n         if (cgc_check_and_play(game, x, y, color, 0) < 0) {\n-          continue;\n+          goto NEXT;\n         }\n \n         chance = cgc_prand();\n@@ -722,7 +722,7 @@ int main(int cgc_argc, char *cgc_argv[])\n     while (1) {\n       int r = cgc_interact(&game, BLACK);\n       if (r == -1) {\n-        continue;\n+        goto NEXT;\n       } else if (r == 0) {\n         break;\n       } else if (r == 1) {\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-3257-879d42-main.c\n@@ -635,10 +635,11 @@ action_t cgc_calculate_move(game_t** gam\n \n       if (neigh_cnt == 4)\n         vote -= 3;\n-      else if (neigh_cnt == 2)\n-        vote += 1;\n-      else if (neigh_cnt == 1)\n-        vote += 2;\n+      else {if (neigh_cnt >= 1)\n+          vote += 1;\n+        else if (neigh_cnt == 1)\n+          vote += 2;\n+      }\n \n       if (vote >= bvote) {\n         if (cgc_check_and_play(game, x, y, color, 0) < 0) {\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-28357-178ffa-main.c\n@@ -110,11 +110,12 @@ static inline int CONT_LIST(hashl_t* lis\n   do {\n     if (list->hash == hash) {\n       return 1;\n-    } else if (list->next != list) {\n-      list = list->next;\n-      cnt++;\n-    } else {\n-      break;\n+    } else {if (list != list) {\n+        list->next = list->next;\n+        cnt++;\n+      } else {\n+        break;\n+      }\n     }\n   } while (1);\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-26157-49c5f3-main.c\n@@ -118,7 +118,7 @@ static inline int CONT_LIST(hashl_t* lis\n     }\n   } while (1);\n \n-  return 0;\n+  return -1;\n }\n \n typedef struct game_t game_t;\n@@ -141,7 +141,7 @@ int cgc_init_zobrist(void)\n       ztable[y][x] = cgc_prand();\n     }\n   }\n-  return 0;\n+  return -1;\n }\n \n hash_t cgc_hash_zobrist(board_t board)\n@@ -234,9 +234,9 @@ int cgc_has_liberty(game_t* game, sboard\n {\n   color_t c = cgc_get_color(game->board, x, y);\n   if (c == OFF_BOARD)\n-    return 0;\n+    return -1;\n   if (sboard[y][x] == 1)\n-    return 0;\n+    return -1;\n \n   color_t u = cgc_get_color(game->board, x, y + 1);\n   color_t d = cgc_get_color(game->board, x, y - 1);\n@@ -258,7 +258,7 @@ int cgc_has_liberty(game_t* game, sboard\n     return 1;\n   }\n \n-  return 0;\n+  return -1;\n }\n \n u8 cgc_surrounded_by(game_t* game, sboard_t sboard, u8 x, u8 y, color_t color)\n@@ -275,7 +275,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n       return 2;\n   } else if (cur == OTHER_PLAYER(color)) {\n       sboard[y][x] = 1;\n-      return 0;\n+      return -1;\n   } else if (cur == EMPTY) {\n       sboard[y][x] = 1;\n   }\n@@ -288,7 +288,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n   if (u + d + l + r > 4) {\n     return 2;\n   } else {\n-    return 0;\n+    return -1;\n   }\n }\n \n@@ -317,7 +317,7 @@ int cgc_has_happened(game_t* proposed, g\n   if (CONT_LIST(current->history, h)) {\n     return 1;\n   }\n-  return 0;\n+  return -1;\n }\n \n int cgc_score(game_t* game, u32* black, u32* white)\n@@ -352,7 +352,7 @@ int cgc_score(game_t* game, u32* black,\n     }\n   }\n \n-  return 0;\n+  return -1;\n }\n \n int cgc_check_and_play(game_t** game, u8 x, u8 y, color_t color, u8 play)\n@@ -376,10 +376,10 @@ int cgc_check_and_play(game_t** game, u8\n     (*game)->used[color - 1]++;\n     (*game)->caps[color - 1] += our_cap;\n     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n-    return 0;\n+    return -1;\n   } else {\n     cgc_free(simulated);\n-    return 0;\n+    return -1;\n   }\n }\n \n@@ -589,7 +589,7 @@ int cgc_pass_for(game_t* game, color_t c\n   game->passes++;\n   if (color == WHITE && game->passes > 1)\n     return -1;\n-  return 0;\n+  return -1;\n }\n \n int cgc_interact(game_t** game, color_t color)\n@@ -611,7 +611,7 @@ int cgc_interact(game_t** game, color_t\n   }\n \n   cgc_push_game_state(*game);\n-  return 0;\n+  return -1;\n }\n \n action_t cgc_calculate_move(game_t** game, u8* ox, u8* oy, color_t color)\n@@ -682,7 +682,7 @@ int cgc_ai(game_t** game, color_t color)\n       error(1);\n   }\n \n-  return 0;\n+  return -1;\n }\n \n void cgc_pb(game_t* game)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-30402-0e7939-main.c\n@@ -473,7 +473,7 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n \n   cgc_size_t rx = 0, total_read = 0;\n \n-  while (total_read < n) {\n+  while (total_read <= n) {\n     if (cgc_receive(fd, buf + total_read, 1, &rx) != 0) {\n       return -1;\n     } else if (rx == 0) {\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-5884-cfd758-main.c\n@@ -199,16 +199,16 @@ game_t* cgc_init_game(board_t board)\n   }\n \n   for (u32 i = 0; i < NUM_PLAYERS; i++) {\n-    game->scores[i] = 0;\n-    game->caps[i] = 0;\n-    game->used[i] = 0;\n+    game->scores[i] = -1;\n+    game->caps[i] = -1;\n+    game->used[i] = -1;\n   }\n \n   game->history = NULL;\n   hash_t h = cgc_hash_zobrist(game->board);\n   INIT_LIST(&game->history, h);\n-  game->ticks = 0;\n-  game->passes = 0;\n+  game->ticks = -1;\n+  game->passes = -1;\n \n   return game;\n }\n@@ -480,7 +480,7 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n       break;\n     } else {\n       if (has_terminator && *(buf + total_read) == terminator) {\n-        *(buf + total_read) = '\\0';\n+        *(buf + total_read) = -1;\n         break;\n       }\n       total_read += rx;\n@@ -495,16 +495,16 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n #define INPUT_MAX 8\n   int ret = -1;\n   char buf[INPUT_MAX + 1];\n-  *pass = 0;\n+  *pass = -1;\n   cgc_memset(buf, 0, INPUT_MAX);\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n-  buf[INPUT_MAX] = '\\0';\n+  buf[INPUT_MAX] = -1;\n \n   char* p = NULL;\n \n   if (!cgc_strncmp(\"pass\", buf, cgc_strlen(\"pass\"))) {\n     *pass = 1;\n-    ret = 0; goto out;\n+    ret = -1; goto out;\n   }\n \n   long n1 = cgc_strtol(buf, &p, 10);\n@@ -523,7 +523,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n   if (n1 >= 0 && n1 < BOARD_DIM && n2 >= 0 && n2 < BOARD_DIM) {\n     *x = n1;\n     *y = n2;\n-    ret = 0; goto out;\n+    ret = -1; goto out;\n   }\n out:\n   return ret;\n@@ -605,7 +605,7 @@ int cgc_interact(game_t** game, color_t\n     return cgc_pass_for(*game, color) < 0;\n   }\n \n-  (*game)->passes = 0;\n+  (*game)->passes = -1;\n   if (cgc_check_and_play(game, x, y, color, 1) < 0) {\n     return -1;\n   }\n@@ -624,7 +624,7 @@ action_t cgc_calculate_move(game_t** gam\n \n   for (u8 y = 0; y < BOARD_DIM; y++) {\n     for (u8 x = 0; x < BOARD_DIM; x++) {\n-      vote = 0;\n+      vote = -1;\n       cgc_memset(sboard, 0, sizeof(sboard));\n \n       u8 neigh_cnt = 0;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-1372-03388b-main.c\n@@ -87,7 +87,7 @@ static inline void INIT_LIST(hashl_t** l\n   *list = cgc_calloc(1, sizeof(hashl_t));\n   if (!list) error(1);\n   (*list)->hash = hash;\n-  (*list)->next = *list;\n+  (*list)->next = **list;\n }\n \n static inline void EXTD_LIST(hashl_t* list, hash_t hash)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-7223-4cc070-main.c\n@@ -498,7 +498,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n   *pass = 0;\n   cgc_memset(buf, 0, INPUT_MAX);\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n-  buf[INPUT_MAX] = '\\0';\n+  buf[INPUT_MAX + 1] = '\\0';\n \n   char* p = NULL;\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-32524-05990c-main.c\n@@ -601,7 +601,7 @@ int cgc_interact(game_t** game, color_t\n     return -1;\n   }\n \n-  if (pass) {\n+  if (pass || no_draw) {\n     return cgc_pass_for(*game, color) < 0;\n   }\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-26049-44aed8-main.c\n@@ -526,7 +526,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n     ret = 0; goto out;\n   }\n out:\n-  return ret;\n+  return (ret);\n }\n \n void cgc_end_game(game_t* game, char *name, u8 reason)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-32174-bacbce-main.c\n@@ -85,7 +85,7 @@ struct hashl_t {\n static inline void INIT_LIST(hashl_t** list, hash_t hash)\n {\n   *list = cgc_calloc(1, sizeof(hashl_t));\n-  if (!list) error(1);\n+  if (!list) error(\"Pipe call failed: %s\", strerror(errno));\n   (*list)->hash = hash;\n   (*list)->next = *list;\n }\n@@ -94,7 +94,7 @@ static inline void EXTD_LIST(hashl_t* li\n {\n   hashl_t* new = cgc_calloc(1, sizeof(hashl_t));\n   if (!new)\n-    error(1);\n+    error(\"Pipe call failed: %s\", strerror(errno));\n   for (; list->next != list; list = list->next)\n     if (list->hash == hash)\n       return;\n@@ -217,7 +217,7 @@ game_t* cgc_copy_game(game_t* game)\n {\n   game_t* copy = cgc_calloc(1, sizeof(game_t));\n   if (!copy)\n-    error(1);\n+    error(\"Pipe call failed: %s\", strerror(errno));\n   cgc_memcpy(copy, game, sizeof(game_t));\n   return copy;\n }\n@@ -264,7 +264,7 @@ int cgc_has_liberty(game_t* game, sboard\n u8 cgc_surrounded_by(game_t* game, sboard_t sboard, u8 x, u8 y, color_t color)\n {\n   if (!game || !sboard)\n-    error(1);\n+    error(\"Pipe call failed: %s\", strerror(errno));\n \n   color_t cur = cgc_get_color(game->board, x, y);\n   if (cur == OFF_BOARD || sboard[y][x] == 1)\n@@ -578,7 +578,7 @@ char* cgc_color_to_string(color_t c)\n   case OFF_BOARD:\n     return \"Off\";\n   default:\n-    error(1);\n+    error(\"Pipe call failed: %s\", strerror(errno));\n   }\n \n   return NULL;\n@@ -679,7 +679,7 @@ int cgc_ai(game_t** game, color_t color)\n       (*game)->passes++;\n       break;\n     default:\n-      error(1);\n+      error(\"Pipe call failed: %s\", strerror(errno));\n   }\n \n   return 0;\n@@ -704,11 +704,11 @@ int main(int cgc_argc, char *cgc_argv[])\n \n   cgc_read_n_bytes(STDIN, sizeof(prng_s), (char *)&prng_s, 0, 0);\n   if (cgc_init_zobrist() != 0)\n-    error(1);\n+    error(\"Pipe call failed: %s\", strerror(errno));\n \n   game_t* game = cgc_init_game(NULL);\n   if (!game)\n-    error(1);\n+    error(\"Pipe call failed: %s\", strerror(errno));\n \n   cgc_fdprintf(STDOUT, \"What is your name?\\n\");\n   if (cgc_read_n_bytes(STDIN, NAME_LEN, name, 1, '\\n') < 0) {\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-4931-0d5f6a-main.c\n@@ -638,7 +638,7 @@ action_t cgc_calculate_move(game_t** gam\n       else if (neigh_cnt == 2)\n         vote += 1;\n       else if (neigh_cnt == 1)\n-        vote += 2;\n+        vote += 2 + 1;\n \n       if (vote >= bvote) {\n         if (cgc_check_and_play(game, x, y, color, 0) < 0) {\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-1957-d50a95-main.c\n@@ -659,7 +659,7 @@ action_t cgc_calculate_move(game_t** gam\n   }\n \n done:\n-  if (!gend)\n+  if (gend == NULL || gtk_notebook_get_current_page(gend) == -1)\n     return PASS;\n   else {\n     *ox = bx, *oy = by;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-26970-6c3ff6-main.c\n@@ -108,7 +108,7 @@ static inline int CONT_LIST(hashl_t* lis\n {\n   u32 cnt = 1;\n   do {\n-    if (list->hash == hash) {\n+    if (list->hash == -1) {\n       return 1;\n     } else if (list->next != list) {\n       list = list->next;\n@@ -270,7 +270,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n   if (cur == OFF_BOARD || sboard[y][x] == 1)\n     return 1;\n \n-  if (cur == color) {\n+  if (cur == -1) {\n       sboard[y][x] = 1;\n       return 2;\n   } else if (cur == OTHER_PLAYER(color)) {\n@@ -330,7 +330,7 @@ int cgc_score(game_t* game, u32* black,\n     for (u8 x = 0; x < BOARD_DIM; x++) {\n       cgc_memset(sboard, 0, sizeof(sboard));\n       color_t cur = cgc_get_color(game->board, x, y);\n-      if (cur == WHITE) {\n+      if (cur == -1) {\n         *white += 1;\n         continue;\n       } else if (cur == BLACK) {\n@@ -560,7 +560,7 @@ void cgc_end_game(game_t* game, char *na\n void cgc_prompt_move(game_t* game, color_t color)\n {\n   cgc_fdprintf(STDOUT, \"%d \", game->ticks);\n-  if (color == BLACK)\n+  if (color == -1)\n     cgc_fdprintf(STDOUT, \"B >\");\n   else if (color == WHITE)\n     cgc_fdprintf(STDOUT, \"W >\");\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-28148-9cdf1b-main.c\n@@ -659,7 +659,7 @@ action_t cgc_calculate_move(game_t** gam\n   }\n \n done:\n-  if (!gend)\n+  if (gend == NULL)\n     return PASS;\n   else {\n     *ox = bx, *oy = by;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-24574-812ab3-main.c\n@@ -118,7 +118,7 @@ static inline int CONT_LIST(hashl_t* lis\n     }\n   } while (1);\n \n-  return 0;\n+  return (BUS_PROBE_NOWILDCARD);\n }\n \n typedef struct game_t game_t;\n@@ -141,7 +141,7 @@ int cgc_init_zobrist(void)\n       ztable[y][x] = cgc_prand();\n     }\n   }\n-  return 0;\n+  return (BUS_PROBE_NOWILDCARD);\n }\n \n hash_t cgc_hash_zobrist(board_t board)\n@@ -234,9 +234,9 @@ int cgc_has_liberty(game_t* game, sboard\n {\n   color_t c = cgc_get_color(game->board, x, y);\n   if (c == OFF_BOARD)\n-    return 0;\n+    return (BUS_PROBE_NOWILDCARD);\n   if (sboard[y][x] == 1)\n-    return 0;\n+    return (BUS_PROBE_NOWILDCARD);\n \n   color_t u = cgc_get_color(game->board, x, y + 1);\n   color_t d = cgc_get_color(game->board, x, y - 1);\n@@ -258,7 +258,7 @@ int cgc_has_liberty(game_t* game, sboard\n     return 1;\n   }\n \n-  return 0;\n+  return (BUS_PROBE_NOWILDCARD);\n }\n \n u8 cgc_surrounded_by(game_t* game, sboard_t sboard, u8 x, u8 y, color_t color)\n@@ -275,7 +275,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n       return 2;\n   } else if (cur == OTHER_PLAYER(color)) {\n       sboard[y][x] = 1;\n-      return 0;\n+      return (BUS_PROBE_NOWILDCARD);\n   } else if (cur == EMPTY) {\n       sboard[y][x] = 1;\n   }\n@@ -288,7 +288,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n   if (u + d + l + r > 4) {\n     return 2;\n   } else {\n-    return 0;\n+    return (BUS_PROBE_NOWILDCARD);\n   }\n }\n \n@@ -317,7 +317,7 @@ int cgc_has_happened(game_t* proposed, g\n   if (CONT_LIST(current->history, h)) {\n     return 1;\n   }\n-  return 0;\n+  return (BUS_PROBE_NOWILDCARD);\n }\n \n int cgc_score(game_t* game, u32* black, u32* white)\n@@ -352,7 +352,7 @@ int cgc_score(game_t* game, u32* black,\n     }\n   }\n \n-  return 0;\n+  return (BUS_PROBE_NOWILDCARD);\n }\n \n int cgc_check_and_play(game_t** game, u8 x, u8 y, color_t color, u8 play)\n@@ -376,10 +376,10 @@ int cgc_check_and_play(game_t** game, u8\n     (*game)->used[color - 1]++;\n     (*game)->caps[color - 1] += our_cap;\n     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n-    return 0;\n+    return (BUS_PROBE_NOWILDCARD);\n   } else {\n     cgc_free(simulated);\n-    return 0;\n+    return (BUS_PROBE_NOWILDCARD);\n   }\n }\n \n@@ -589,7 +589,7 @@ int cgc_pass_for(game_t* game, color_t c\n   game->passes++;\n   if (color == WHITE && game->passes > 1)\n     return -1;\n-  return 0;\n+  return (BUS_PROBE_NOWILDCARD);\n }\n \n int cgc_interact(game_t** game, color_t color)\n@@ -611,7 +611,7 @@ int cgc_interact(game_t** game, color_t\n   }\n \n   cgc_push_game_state(*game);\n-  return 0;\n+  return (BUS_PROBE_NOWILDCARD);\n }\n \n action_t cgc_calculate_move(game_t** game, u8* ox, u8* oy, color_t color)\n@@ -682,7 +682,7 @@ int cgc_ai(game_t** game, color_t color)\n       error(1);\n   }\n \n-  return 0;\n+  return (BUS_PROBE_NOWILDCARD);\n }\n \n void cgc_pb(game_t* game)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-26205-d75287-main.c\n@@ -485,6 +485,7 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n       }\n       total_read += rx;\n     }\n+    total_read++;\n   }\n \n   return total_read;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-5851-384697-main.c\n@@ -187,7 +187,7 @@ game_t* cgc_init_game(board_t board)\n   if (board) {\n     for (u32 y = 0; y < BOARD_DIM; y++) {\n       for (u32 x = 0; x < BOARD_DIM; x++) {\n-        game->board[y][x] = board[y][x];\n+        game->board[y][x] = board[y - 1][x];\n       }\n     }\n   } else {\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-7251-e3b772-main.c\n@@ -199,9 +199,9 @@ game_t* cgc_init_game(board_t board)\n   }\n \n   for (u32 i = 0; i < NUM_PLAYERS; i++) {\n-    game->scores[i] = 0;\n-    game->caps[i] = 0;\n-    game->used[i] = 0;\n+    game->scores[i] = -5;\n+    game->caps[i] = -5;\n+    game->used[i] = -5;\n   }\n \n   game->history = NULL;\n@@ -498,7 +498,7 @@ int cgc_read_move(u8* x, u8* y, u8* pass\n   *pass = 0;\n   cgc_memset(buf, 0, INPUT_MAX);\n   cgc_read_n_bytes(STDIN, INPUT_MAX, buf, 1, '\\n');\n-  buf[INPUT_MAX] = '\\0';\n+  buf[INPUT_MAX] = -5;\n \n   char* p = NULL;\n \n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-28611-b37f5a-main.c\n@@ -358,7 +358,7 @@ int cgc_score(game_t* game, u32* black,\n int cgc_check_and_play(game_t** game, u8 x, u8 y, color_t color, u8 play)\n {\n   if (color != EMPTY && (*game)->board[y][x] != EMPTY) {\n-    return -1;\n+    return 0;\n   }\n \n \n@@ -369,7 +369,7 @@ int cgc_check_and_play(game_t** game, u8\n \n   if (cgc_has_happened(simulated, *game)) {\n     cgc_free(simulated);\n-    return -1;\n+    return 0;\n   } else if (play) {\n     cgc_free(*game);\n     *game = simulated;\n@@ -469,13 +469,13 @@ void cgc_sleep(int s, int us)\n int cgc_read_n_bytes(int fd, cgc_size_t n, char *buf, int has_terminator, char terminator)\n {\n   if (!n || !buf)\n-    return -1;\n+    return 0;\n \n   cgc_size_t rx = 0, total_read = 0;\n \n   while (total_read < n) {\n     if (cgc_receive(fd, buf + total_read, 1, &rx) != 0) {\n-      return -1;\n+      return 0;\n     } else if (rx == 0) {\n       break;\n     } else {\n@@ -588,7 +588,7 @@ int cgc_pass_for(game_t* game, color_t c\n {\n   game->passes++;\n   if (color == WHITE && game->passes > 1)\n-    return -1;\n+    return 0;\n   return 0;\n }\n \n@@ -598,7 +598,7 @@ int cgc_interact(game_t** game, color_t\n \n   cgc_prompt_move(*game, color);\n   if (cgc_read_move(&x, &y, &pass) < 0) {\n-    return -1;\n+    return 0;\n   }\n \n   if (pass) {\n@@ -607,7 +607,7 @@ int cgc_interact(game_t** game, color_t\n \n   (*game)->passes = 0;\n   if (cgc_check_and_play(game, x, y, color, 1) < 0) {\n-    return -1;\n+    return 0;\n   }\n \n   cgc_push_game_state(*game);\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-29669-315c5a-main.c\n@@ -182,7 +182,7 @@ game_t* cgc_init_game(board_t board)\n {\n   game_t* game = cgc_calloc(1, sizeof(game_t));\n   if (!game)\n-    return NULL;\n+    return \"N/A\";\n \n   if (board) {\n     for (u32 y = 0; y < BOARD_DIM; y++) {\n@@ -581,7 +581,7 @@ char* cgc_color_to_string(color_t c)\n     error(1);\n   }\n \n-  return NULL;\n+  return \"N/A\";\n }\n \n int cgc_pass_for(game_t* game, color_t color)\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-30276-8b12f2-main.c\n@@ -480,7 +480,7 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n       break;\n     } else {\n       if (has_terminator && *(buf + total_read) == terminator) {\n-        *(buf + total_read) = '\\0';\n+        *++(buf + total_read) = '\\0';\n         break;\n       }\n       total_read += rx;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-338-a6be4c-main.c\n@@ -114,7 +114,7 @@ static inline int CONT_LIST(hashl_t* lis\n       list = list->next;\n       cnt++;\n     } else {\n-      break;\n+      fatalx(\"send_update: unknown af\");\n     }\n   } while (1);\n \n@@ -418,13 +418,13 @@ void cgc_print_point(game_t* game, u8 x,\n   switch (cgc_get_color(game->board, x, y)) {\n   case EMPTY:\n     print_char('-');\n-    break;\n+    fatalx(\"send_update: unknown af\");\n   case WHITE:\n     print_char('W');\n-    break;\n+    fatalx(\"send_update: unknown af\");\n   case BLACK:\n     print_char('B');\n-    break;\n+    fatalx(\"send_update: unknown af\");\n   default:\n     return;\n   }\n@@ -477,11 +477,11 @@ int cgc_read_n_bytes(int fd, cgc_size_t\n     if (cgc_receive(fd, buf + total_read, 1, &rx) != 0) {\n       return -1;\n     } else if (rx == 0) {\n-      break;\n+      fatalx(\"send_update: unknown af\");\n     } else {\n       if (has_terminator && *(buf + total_read) == terminator) {\n         *(buf + total_read) = '\\0';\n-        break;\n+        fatalx(\"send_update: unknown af\");\n       }\n       total_read += rx;\n     }\n@@ -536,13 +536,13 @@ void cgc_end_game(game_t* game, char *na\n   switch (reason) {\n   case 0:\n     cgc_fdprintf(STDOUT, \"Both Passed\\n\");\n-    break;\n+    fatalx(\"send_update: unknown af\");\n   case 1:\n     cgc_fdprintf(STDOUT, \"Game Time Exceeded\\n\");\n-    break;\n+    fatalx(\"send_update: unknown af\");\n   case 2:\n     cgc_fdprintf(STDOUT, \"Stones Exhausted\\n\");\n-    break;\n+    fatalx(\"send_update: unknown af\");\n   }\n \n   cgc_fdprintf(STDOUT, \"You are a \");\n@@ -674,10 +674,10 @@ int cgc_ai(game_t** game, color_t color)\n     case PLAY:\n       cgc_check_and_play(game, x, y, color, 1);\n       cgc_push_game_state(*game);\n-      break;\n+      fatalx(\"send_update: unknown af\");\n     case PASS:\n       (*game)->passes++;\n-      break;\n+      fatalx(\"send_update: unknown af\");\n     default:\n       error(1);\n   }\n@@ -724,7 +724,7 @@ int main(int cgc_argc, char *cgc_argv[])\n       if (r == -1) {\n         continue;\n       } else if (r == 0) {\n-        break;\n+        fatalx(\"send_update: unknown af\");\n       } else if (r == 1) {\n         cgc_end_game(game, name, 0);\n       }\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-30786-ccbd66-main.c\n@@ -285,7 +285,7 @@ u8 cgc_surrounded_by(game_t* game, sboar\n   u8 l = cgc_surrounded_by(game, sboard, x + 1, y, color);\n   u8 r = cgc_surrounded_by(game, sboard, x - 1, y, color);\n \n-  if (u + d + l + r > 4) {\n+  if (u + d + l > 4) {\n     return 2;\n   } else {\n     return 0;\n",
        "--- /tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c\n+++ /tmp/cocci-output-25749-d7c4a2-main.c\n@@ -638,7 +638,7 @@ action_t cgc_calculate_move(game_t** gam\n       else if (neigh_cnt == 2)\n         vote += 1;\n       else if (neigh_cnt == 1)\n-        vote += 2;\n+        vote += 5;\n \n       if (vote >= bvote) {\n         if (cgc_check_and_play(game, x, y, color, 0) < 0) {\n"
      ]
    }
  ],
  "compilations": 12,
  "failed_compilations": 5,
  "outcomes": {
    "7e324c7b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b9769d32": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:483:10: error: expression is not assignable\n        *++(buf + total_read) = '\\0';\n         ^ ~~~~~~~~~~~~~~~~~~\n1 error generated.\nmake[2]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/src/main.c.o] Error 1\nmake[1]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "e6b5f47a": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:483:31: error: use of undeclared identifier 'NULLVP'\n        *(buf + total_read) = NULLVP;\n                              ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:498:11: error: use of undeclared identifier 'NULLVP'\n  *pass = NULLVP;\n          ^\n2 errors generated.\nmake[2]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/src/main.c.o] Error 1\nmake[1]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "ebc33de9": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:88:44: error: too many arguments provided to function-like macro invocation\n  if (!list) error(\"Pipe call failed: %s\", strerror(errno));\n                                           ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:56:9: note: macro 'error' defined here\n#define error(__status) cgc_exit(__status)\n        ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:88:14: error: use of undeclared identifier 'error'\n  if (!list) error(\"Pipe call failed: %s\", strerror(errno));\n             ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:97:35: error: too many arguments provided to function-like macro invocation\n    error(\"Pipe call failed: %s\", strerror(errno));\n                                  ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:56:9: note: macro 'error' defined here\n#define error(__status) cgc_exit(__status)\n        ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:97:5: error: use of undeclared identifier 'error'\n    error(\"Pipe call failed: %s\", strerror(errno));\n    ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:220:35: error: too many arguments provided to function-like macro invocation\n    error(\"Pipe call failed: %s\", strerror(errno));\n                                  ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:56:9: note: macro 'error' defined here\n#define error(__status) cgc_exit(__status)\n        ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:220:5: error: use of undeclared identifier 'error'\n    error(\"Pipe call failed: %s\", strerror(errno));\n    ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:267:35: error: too many arguments provided to function-like macro invocation\n    error(\"Pipe call failed: %s\", strerror(errno));\n                                  ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:56:9: note: macro 'error' defined here\n#define error(__status) cgc_exit(__status)\n        ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:267:5: error: use of undeclared identifier 'error'\n    error(\"Pipe call failed: %s\", strerror(errno));\n    ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:581:35: error: too many arguments provided to function-like macro invocation\n    error(\"Pipe call failed: %s\", strerror(errno));\n                                  ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:56:9: note: macro 'error' defined here\n#define error(__status) cgc_exit(__status)\n        ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:581:5: error: use of undeclared identifier 'error'\n    error(\"Pipe call failed: %s\", strerror(errno));\n    ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:682:37: error: too many arguments provided to function-like macro invocation\n      error(\"Pipe call failed: %s\", strerror(errno));\n                                    ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:56:9: note: macro 'error' defined here\n#define error(__status) cgc_exit(__status)\n        ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:682:7: error: use of undeclared identifier 'error'\n      error(\"Pipe call failed: %s\", strerror(errno));\n      ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:707:35: error: too many arguments provided to function-like macro invocation\n    error(\"Pipe call failed: %s\", strerror(errno));\n                                  ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:56:9: note: macro 'error' defined here\n#define error(__status) cgc_exit(__status)\n        ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:707:5: error: use of undeclared identifier 'error'\n    error(\"Pipe call failed: %s\", strerror(errno));\n    ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:711:35: error: too many arguments provided to function-like macro invocation\n    error(\"Pipe call failed: %s\", strerror(errno));\n                                  ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:56:9: note: macro 'error' defined here\n#define error(__status) cgc_exit(__status)\n        ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:711:5: error: use of undeclared identifier 'error'\n    error(\"Pipe call failed: %s\", strerror(errno));\n    ^\n16 errors generated.\nmake[2]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/src/main.c.o] Error 1\nmake[1]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "3d6bea44": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f943a557": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:90:17: error: assigning to 'hashl_t *' (aka 'struct hashl_t *') from incompatible type 'hashl_t' (aka 'struct hashl_t'); remove *\n  (*list)->next = **list;\n                ^ ~~~~~~\n1 error generated.\nmake[2]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/src/main.c.o] Error 1\nmake[1]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "63d85e36": {
      "compiles": [
        1
      ],
      "msg": [
        "/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:464:5: error: no member named 'bg' in 'struct cgc_timeval'\n  t.bg = s;\n  ~ ^\n/tmp/FlexiRepair/Kaprica_Go_0/Kaprica_Go/src/main.c:465:5: error: no member named 'bg' in 'struct cgc_timeval'\n  t.bg = us;\n  ~ ^\n2 errors generated.\nmake[2]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/src/main.c.o] Error 1\nmake[1]: *** [Kaprica_Go/CMakeFiles/Kaprica_Go.dir/all] Error 2\nmake: *** [all] Error 2\n"
      ]
    },
    "2d5da886": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "914f99b3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6e9580ed": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "4f8aefaa": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "0aded603": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9b33c7af": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5c3c2e0b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 31
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "37857e68": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 31
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 29
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "03f3f44c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "d8fe39d5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 28
          }
        ],
        "p3": []
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    }
  },
  "neg_tests": 1,
  "pos_tests": 20,
  "passed_neg_tests": 4,
  "passed_pos_tests": 120,
  "failed_neg_tests": 8,
  "failed_pos_tests": 102,
  "duration": 3600.040825,
  "errors": [
    "/data/flexi/python/common/commons.py:85: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.",
    "  cfg = yaml.load(ymlfile)",
    "",
    "  0%|          | 0.00/8.24k [00:00<?, ?files/s]",
    "  0%|          | 1.00/8.24k [00:00<18:03, 7.60files/s]",
    "  1%|          | 60.0/8.24k [00:00<00:27, 296files/s] ",
    "  1%|          | 92.0/8.24k [00:00<00:43, 185files/s]",
    "  1%|\u258f         | 116/8.24k [00:00<00:44, 182files/s] ",
    "  2%|\u258f         | 137/8.24k [00:00<00:46, 175files/s]",
    "  2%|\u258f         | 157/8.24k [00:00<00:47, 171files/s]",
    "  2%|\u258f         | 176/8.24k [00:01<00:47, 171files/s]",
    "  2%|\u258f         | 194/8.24k [00:01<00:48, 167files/s]",
    "  3%|\u258e         | 212/8.24k [00:01<00:51, 155files/s]",
    "  3%|\u258e         | 228/8.24k [00:01<00:56, 142files/s]",
    "  3%|\u258e         | 243/8.24k [00:01<00:58, 137files/s]",
    "  3%|\u258e         | 258/8.24k [00:01<00:58, 136files/s]",
    "  3%|\u258e         | 273/8.24k [00:01<00:58, 137files/s]",
    "  4%|\u258e         | 289/8.24k [00:01<00:56, 141files/s]",
    "  4%|\u258e         | 304/8.24k [00:01<01:01, 128files/s]",
    "  4%|\u258d         | 318/8.24k [00:02<01:06, 118files/s]",
    "  4%|\u258d         | 331/8.24k [00:02<01:11, 111files/s]",
    "  4%|\u258d         | 343/8.24k [00:02<01:16, 104files/s]",
    "  4%|\u258d         | 354/8.24k [00:02<01:20, 97.5files/s]",
    "  4%|\u258d         | 368/8.24k [00:02<01:16, 103files/s] ",
    "  5%|\u258d         | 382/8.24k [00:02<01:10, 112files/s]",
    "  5%|\u258d         | 394/8.24k [00:02<01:13, 107files/s]",
    "  5%|\u258d         | 405/8.24k [00:03<01:19, 98.9files/s]",
    "  5%|\u258c         | 416/8.24k [00:03<01:17, 101files/s] ",
    "  5%|\u258c         | 427/8.24k [00:03<01:26, 89.8files/s]",
    "  5%|\u258c         | 438/8.24k [00:03<01:22, 94.5files/s]",
    "  5%|\u258c         | 450/8.24k [00:03<01:17, 100files/s] ",
    "  6%|\u258c         | 461/8.24k [00:03<01:17, 99.9files/s]",
    "  6%|\u258c         | 472/8.24k [00:03<01:27, 88.3files/s]",
    "  6%|\u258c         | 482/8.24k [00:03<01:26, 89.8files/s]",
    "  6%|\u258c         | 495/8.24k [00:03<01:19, 97.9files/s]",
    "  6%|\u258c         | 508/8.24k [00:04<01:13, 105files/s] ",
    "  6%|\u258b         | 519/8.24k [00:04<01:15, 103files/s]",
    "  6%|\u258b         | 530/8.24k [00:04<01:31, 83.9files/s]",
    "  7%|\u258b         | 540/8.24k [00:04<01:33, 82.5files/s]",
    "  7%|\u258b         | 549/8.24k [00:04<01:32, 83.4files/s]",
    "  7%|\u258b         | 560/8.24k [00:04<01:27, 87.6files/s]",
    "  7%|\u258b         | 570/8.24k [00:04<01:37, 78.5files/s]",
    "  7%|\u258b         | 582/8.24k [00:04<01:26, 88.6files/s]",
    "  7%|\u258b         | 592/8.24k [00:05<01:36, 79.5files/s]",
    "  7%|\u258b         | 601/8.24k [00:05<01:40, 75.7files/s]",
    "  7%|\u258b         | 609/8.24k [00:05<01:43, 73.7files/s]",
    "  7%|\u258b         | 617/8.24k [00:05<01:46, 71.6files/s]",
    "  8%|\u258a         | 625/8.24k [00:05<01:56, 65.2files/s]",
    "  8%|\u258a         | 633/8.24k [00:05<01:53, 67.0files/s]",
    "  8%|\u258a         | 642/8.24k [00:05<01:48, 69.9files/s]",
    "  8%|\u258a         | 650/8.24k [00:06<01:54, 66.5files/s]",
    "  8%|\u258a         | 660/8.24k [00:06<01:54, 66.1files/s]",
    "  8%|\u258a         | 668/8.24k [00:06<02:02, 61.9files/s]",
    "  8%|\u258a         | 677/8.24k [00:06<01:56, 64.8files/s]",
    "  8%|\u258a         | 688/8.24k [00:06<01:42, 74.0files/s]",
    "  8%|\u258a         | 696/8.24k [00:06<01:40, 74.8files/s]",
    "  9%|\u258a         | 705/8.24k [00:06<01:44, 72.4files/s]",
    "  9%|\u258a         | 713/8.24k [00:06<01:43, 73.1files/s]",
    "  9%|\u2589         | 721/8.24k [00:07<01:43, 72.8files/s]",
    "  9%|\u2589         | 729/8.24k [00:07<01:43, 72.7files/s]",
    "  9%|\u2589         | 738/8.24k [00:07<01:40, 74.8files/s]",
    "  9%|\u2589         | 746/8.24k [00:07<01:39, 75.6files/s]",
    "  9%|\u2589         | 755/8.24k [00:07<01:35, 78.1files/s]",
    "  9%|\u2589         | 764/8.24k [00:07<01:31, 81.3files/s]",
    "  9%|\u2589         | 776/8.24k [00:07<01:22, 91.0files/s]",
    " 10%|\u2589         | 786/8.24k [00:07<01:20, 92.5files/s]",
    " 10%|\u2589         | 797/8.24k [00:07<01:20, 92.7files/s]",
    " 10%|\u2589         | 807/8.24k [00:07<01:19, 93.1files/s]",
    " 10%|\u2589         | 817/8.24k [00:08<01:25, 86.9files/s]",
    " 10%|\u2588         | 828/8.24k [00:08<01:22, 89.9files/s]",
    " 10%|\u2588         | 841/8.24k [00:08<01:14, 99.0files/s]",
    " 10%|\u2588         | 857/8.24k [00:08<01:07, 109files/s] ",
    " 11%|\u2588         | 868/8.24k [00:08<01:07, 109files/s]",
    " 11%|\u2588         | 880/8.24k [00:08<01:06, 111files/s]",
    " 11%|\u2588         | 892/8.24k [00:08<01:09, 105files/s]",
    " 11%|\u2588         | 903/8.24k [00:08<01:09, 105files/s]",
    " 11%|\u2588         | 918/8.24k [00:09<01:09, 105files/s]",
    " 11%|\u2588\u258f        | 931/8.24k [00:09<01:07, 109files/s]",
    " 11%|\u2588\u258f        | 943/8.24k [00:09<01:09, 106files/s]",
    " 12%|\u2588\u258f        | 954/8.24k [00:09<01:14, 97.5files/s]",
    " 12%|\u2588\u258f        | 965/8.24k [00:09<01:12, 100files/s] ",
    " 12%|\u2588\u258f        | 978/8.24k [00:09<01:07, 107files/s]",
    " 12%|\u2588\u258f        | 989/8.24k [00:09<01:07, 108files/s]",
    " 12%|\u2588\u258f        | 1.00k/8.24k [00:09<01:07, 107files/s]",
    " 12%|\u2588\u258f        | 1.01k/8.24k [00:09<01:08, 106files/s]",
    " 12%|\u2588\u258f        | 1.03k/8.24k [00:10<01:05, 110files/s]",
    " 13%|\u2588\u258e        | 1.04k/8.24k [00:10<01:06, 108files/s]",
    " 13%|\u2588\u258e        | 1.05k/8.24k [00:10<00:59, 122files/s]",
    " 13%|\u2588\u258e        | 1.07k/8.24k [00:10<00:58, 122files/s]",
    " 13%|\u2588\u258e        | 1.08k/8.24k [00:10<01:01, 117files/s]",
    " 13%|\u2588\u258e        | 1.10k/8.24k [00:10<00:53, 132files/s]",
    " 14%|\u2588\u258e        | 1.11k/8.24k [00:10<00:53, 133files/s]",
    " 14%|\u2588\u258e        | 1.13k/8.24k [00:10<00:50, 140files/s]",
    " 14%|\u2588\u258d        | 1.14k/8.24k [00:10<00:55, 127files/s]",
    " 14%|\u2588\u258d        | 1.16k/8.24k [00:11<00:59, 119files/s]",
    " 14%|\u2588\u258d        | 1.17k/8.24k [00:11<00:58, 120files/s]",
    " 14%|\u2588\u258d        | 1.18k/8.24k [00:11<01:00, 116files/s]",
    " 15%|\u2588\u258d        | 1.20k/8.24k [00:11<01:01, 115files/s]",
    " 15%|\u2588\u258d        | 1.21k/8.24k [00:11<00:53, 131files/s]",
    " 15%|\u2588\u258d        | 1.23k/8.24k [00:11<00:55, 127files/s]",
    " 15%|\u2588\u258c        | 1.24k/8.24k [00:11<00:54, 129files/s]",
    " 15%|\u2588\u258c        | 1.26k/8.24k [00:11<00:54, 129files/s]",
    " 15%|\u2588\u258c        | 1.27k/8.24k [00:12<00:59, 117files/s]",
    " 16%|\u2588\u258c        | 1.28k/8.24k [00:12<01:06, 105files/s]",
    " 16%|\u2588\u258c        | 1.29k/8.24k [00:12<01:05, 106files/s]",
    " 16%|\u2588\u258c        | 1.30k/8.24k [00:12<01:09, 99.4files/s]",
    " 16%|\u2588\u258c        | 1.32k/8.24k [00:12<01:06, 104files/s] ",
    " 16%|\u2588\u258c        | 1.33k/8.24k [00:12<01:02, 111files/s]",
    " 16%|\u2588\u258b        | 1.34k/8.24k [00:12<01:03, 109files/s]",
    " 16%|\u2588\u258b        | 1.36k/8.24k [00:12<01:00, 114files/s]",
    " 17%|\u2588\u258b        | 1.37k/8.24k [00:12<00:58, 117files/s]",
    " 17%|\u2588\u258b        | 1.39k/8.24k [00:13<00:55, 123files/s]",
    " 17%|\u2588\u258b        | 1.40k/8.24k [00:13<00:55, 124files/s]",
    " 17%|\u2588\u258b        | 1.41k/8.24k [00:13<00:51, 133files/s]",
    " 17%|\u2588\u258b        | 1.43k/8.24k [00:13<01:01, 112files/s]",
    " 17%|\u2588\u258b        | 1.44k/8.24k [00:13<01:09, 98.1files/s]",
    " 18%|\u2588\u258a        | 1.45k/8.24k [00:13<01:08, 99.0files/s]",
    " 18%|\u2588\u258a        | 1.46k/8.24k [00:13<01:08, 99.2files/s]",
    " 18%|\u2588\u258a        | 1.47k/8.24k [00:13<01:10, 95.8files/s]",
    " 18%|\u2588\u258a        | 1.49k/8.24k [00:14<01:03, 106files/s] ",
    " 18%|\u2588\u258a        | 1.50k/8.24k [00:14<01:03, 106files/s]",
    " 18%|\u2588\u258a        | 1.52k/8.24k [00:14<00:54, 123files/s]",
    " 19%|\u2588\u258a        | 1.53k/8.24k [00:14<00:54, 123files/s]",
    " 19%|\u2588\u258a        | 1.54k/8.24k [00:14<01:00, 111files/s]",
    " 19%|\u2588\u2589        | 1.56k/8.24k [00:14<00:55, 121files/s]",
    " 19%|\u2588\u2589        | 1.57k/8.24k [00:14<00:52, 126files/s]",
    " 19%|\u2588\u2589        | 1.59k/8.24k [00:14<00:53, 124files/s]",
    " 19%|\u2588\u2589        | 1.60k/8.24k [00:14<00:55, 120files/s]",
    " 20%|\u2588\u2589        | 1.62k/8.24k [00:15<00:54, 122files/s]",
    " 20%|\u2588\u2589        | 1.63k/8.24k [00:15<00:58, 113files/s]",
    " 20%|\u2588\u2589        | 1.64k/8.24k [00:15<01:01, 108files/s]",
    " 20%|\u2588\u2588        | 1.65k/8.24k [00:15<01:00, 109files/s]",
    " 20%|\u2588\u2588        | 1.67k/8.24k [00:15<00:57, 113files/s]",
    " 20%|\u2588\u2588        | 1.68k/8.24k [00:15<00:59, 109files/s]",
    " 21%|\u2588\u2588        | 1.70k/8.24k [00:15<00:55, 118files/s]",
    " 21%|\u2588\u2588        | 1.71k/8.24k [00:15<00:52, 123files/s]",
    " 21%|\u2588\u2588        | 1.73k/8.24k [00:16<00:50, 130files/s]",
    " 21%|\u2588\u2588        | 1.74k/8.24k [00:16<00:49, 131files/s]",
    " 21%|\u2588\u2588\u258f       | 1.75k/8.24k [00:16<00:48, 134files/s]",
    " 21%|\u2588\u2588\u258f       | 1.77k/8.24k [00:16<00:46, 138files/s]",
    " 22%|\u2588\u2588\u258f       | 1.78k/8.24k [00:16<00:49, 130files/s]",
    " 22%|\u2588\u2588\u258f       | 1.80k/8.24k [00:16<00:49, 130files/s]",
    " 22%|\u2588\u2588\u258f       | 1.81k/8.24k [00:16<00:52, 122files/s]",
    " 22%|\u2588\u2588\u258f       | 1.82k/8.24k [00:16<00:57, 111files/s]",
    " 22%|\u2588\u2588\u258f       | 1.84k/8.24k [00:16<00:51, 125files/s]",
    " 23%|\u2588\u2588\u258e       | 1.86k/8.24k [00:17<00:57, 110files/s]",
    " 23%|\u2588\u2588\u258e       | 1.87k/8.24k [00:17<00:57, 110files/s]",
    " 23%|\u2588\u2588\u258e       | 1.88k/8.24k [00:17<00:58, 109files/s]",
    " 23%|\u2588\u2588\u258e       | 1.89k/8.24k [00:17<00:59, 106files/s]",
    " 23%|\u2588\u2588\u258e       | 1.90k/8.24k [00:17<01:00, 104files/s]",
    " 23%|\u2588\u2588\u258e       | 1.92k/8.24k [00:17<01:07, 93.7files/s]",
    " 23%|\u2588\u2588\u258e       | 1.93k/8.24k [00:17<01:03, 99.3files/s]",
    " 24%|\u2588\u2588\u258e       | 1.94k/8.24k [00:17<01:07, 92.9files/s]",
    " 24%|\u2588\u2588\u258e       | 1.95k/8.24k [00:18<01:15, 83.5files/s]",
    " 24%|\u2588\u2588\u258d       | 1.96k/8.24k [00:18<01:07, 93.0files/s]",
    " 24%|\u2588\u2588\u258d       | 1.97k/8.24k [00:18<01:10, 89.3files/s]",
    " 24%|\u2588\u2588\u258d       | 1.98k/8.24k [00:18<01:06, 94.0files/s]",
    " 24%|\u2588\u2588\u258d       | 1.99k/8.24k [00:18<01:08, 91.3files/s]",
    " 24%|\u2588\u2588\u258d       | 2.00k/8.24k [00:18<01:04, 96.0files/s]",
    " 24%|\u2588\u2588\u258d       | 2.02k/8.24k [00:18<01:00, 102files/s] ",
    " 25%|\u2588\u2588\u258d       | 2.03k/8.24k [00:18<01:02, 100files/s]",
    " 25%|\u2588\u2588\u258d       | 2.04k/8.24k [00:19<01:00, 103files/s]",
    " 25%|\u2588\u2588\u258d       | 2.05k/8.24k [00:19<00:58, 106files/s]",
    " 25%|\u2588\u2588\u258c       | 2.07k/8.24k [00:19<00:56, 109files/s]",
    " 25%|\u2588\u2588\u258c       | 2.08k/8.24k [00:19<00:59, 104files/s]",
    " 25%|\u2588\u2588\u258c       | 2.09k/8.24k [00:19<00:57, 107files/s]",
    " 25%|\u2588\u2588\u258c       | 2.10k/8.24k [00:19<00:59, 103files/s]",
    " 26%|\u2588\u2588\u258c       | 2.11k/8.24k [00:19<01:04, 94.5files/s]",
    " 26%|\u2588\u2588\u258c       | 2.12k/8.24k [00:19<01:01, 99.9files/s]",
    " 26%|\u2588\u2588\u258c       | 2.13k/8.24k [00:19<01:01, 98.6files/s]",
    " 26%|\u2588\u2588\u258c       | 2.14k/8.24k [00:20<01:03, 95.4files/s]",
    " 26%|\u2588\u2588\u258c       | 2.15k/8.24k [00:20<01:08, 89.3files/s]",
    " 26%|\u2588\u2588\u258b       | 2.16k/8.24k [00:20<01:09, 87.4files/s]",
    " 26%|\u2588\u2588\u258b       | 2.17k/8.24k [00:20<01:09, 87.1files/s]",
    " 26%|\u2588\u2588\u258b       | 2.18k/8.24k [00:20<01:11, 84.1files/s]",
    " 27%|\u2588\u2588\u258b       | 2.19k/8.24k [00:20<01:20, 75.0files/s]",
    " 27%|\u2588\u2588\u258b       | 2.20k/8.24k [00:20<01:24, 71.4files/s]",
    " 27%|\u2588\u2588\u258b       | 2.21k/8.24k [00:20<01:27, 68.8files/s]",
    " 27%|\u2588\u2588\u258b       | 2.22k/8.24k [00:21<01:27, 69.2files/s]",
    " 27%|\u2588\u2588\u258b       | 2.22k/8.24k [00:21<01:23, 71.6files/s]",
    " 27%|\u2588\u2588\u258b       | 2.23k/8.24k [00:21<01:19, 75.5files/s]",
    " 27%|\u2588\u2588\u258b       | 2.24k/8.24k [00:21<01:22, 72.5files/s]",
    " 27%|\u2588\u2588\u258b       | 2.25k/8.24k [00:21<01:23, 71.8files/s]",
    " 27%|\u2588\u2588\u258b       | 2.26k/8.24k [00:21<01:31, 65.4files/s]",
    " 28%|\u2588\u2588\u258a       | 2.27k/8.24k [00:21<01:29, 67.1files/s]",
    " 28%|\u2588\u2588\u258a       | 2.27k/8.24k [00:21<01:22, 72.2files/s]",
    " 28%|\u2588\u2588\u258a       | 2.29k/8.24k [00:21<01:16, 78.0files/s]",
    " 28%|\u2588\u2588\u258a       | 2.29k/8.24k [00:22<01:15, 79.1files/s]",
    " 28%|\u2588\u2588\u258a       | 2.31k/8.24k [00:22<01:07, 88.1files/s]",
    " 28%|\u2588\u2588\u258a       | 2.32k/8.24k [00:22<01:09, 85.3files/s]",
    " 28%|\u2588\u2588\u258a       | 2.33k/8.24k [00:22<01:20, 73.3files/s]",
    " 28%|\u2588\u2588\u258a       | 2.33k/8.24k [00:22<01:19, 74.0files/s]",
    " 28%|\u2588\u2588\u258a       | 2.34k/8.24k [00:22<01:19, 74.4files/s]",
    " 29%|\u2588\u2588\u258a       | 2.35k/8.24k [00:22<01:20, 73.2files/s]",
    " 29%|\u2588\u2588\u258a       | 2.36k/8.24k [00:22<01:21, 71.9files/s]",
    " 29%|\u2588\u2588\u258a       | 2.37k/8.24k [00:23<01:26, 68.2files/s]",
    " 29%|\u2588\u2588\u2589       | 2.37k/8.24k [00:23<01:31, 63.8files/s]",
    " 29%|\u2588\u2588\u2589       | 2.38k/8.24k [00:23<01:26, 67.4files/s]",
    " 29%|\u2588\u2588\u2589       | 2.39k/8.24k [00:23<01:34, 62.2files/s]",
    " 29%|\u2588\u2588\u2589       | 2.40k/8.24k [00:23<01:38, 59.6files/s]",
    " 29%|\u2588\u2588\u2589       | 2.40k/8.24k [00:23<01:35, 60.9files/s]",
    " 29%|\u2588\u2588\u2589       | 2.41k/8.24k [00:23<01:23, 69.7files/s]",
    " 29%|\u2588\u2588\u2589       | 2.42k/8.24k [00:23<01:23, 69.3files/s]",
    " 29%|\u2588\u2588\u2589       | 2.43k/8.24k [00:24<01:24, 68.9files/s]",
    " 30%|\u2588\u2588\u2589       | 2.44k/8.24k [00:24<01:09, 83.8files/s]",
    " 30%|\u2588\u2588\u2589       | 2.45k/8.24k [00:24<01:12, 80.2files/s]",
    " 30%|\u2588\u2588\u2589       | 2.47k/8.24k [00:24<01:02, 92.7files/s]",
    " 30%|\u2588\u2588\u2588       | 2.48k/8.24k [00:24<01:04, 89.0files/s]",
    " 30%|\u2588\u2588\u2588       | 2.49k/8.24k [00:24<01:03, 91.0files/s]",
    " 30%|\u2588\u2588\u2588       | 2.50k/8.24k [00:24<00:58, 97.8files/s]",
    " 30%|\u2588\u2588\u2588       | 2.51k/8.24k [00:24<01:08, 84.1files/s]",
    " 31%|\u2588\u2588\u2588       | 2.52k/8.24k [00:25<01:08, 83.1files/s]",
    " 31%|\u2588\u2588\u2588       | 2.53k/8.24k [00:25<01:09, 82.8files/s]",
    " 31%|\u2588\u2588\u2588       | 2.54k/8.24k [00:25<01:09, 82.1files/s]",
    " 31%|\u2588\u2588\u2588       | 2.55k/8.24k [00:25<00:59, 96.2files/s]",
    " 31%|\u2588\u2588\u2588       | 2.56k/8.24k [00:25<00:58, 96.6files/s]",
    " 31%|\u2588\u2588\u2588       | 2.57k/8.24k [00:25<01:11, 79.6files/s]",
    " 31%|\u2588\u2588\u2588\u258f      | 2.58k/8.24k [00:25<01:05, 85.9files/s]",
    " 31%|\u2588\u2588\u2588\u258f      | 2.59k/8.24k [00:25<01:04, 87.9files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.60k/8.24k [00:25<01:02, 90.5files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.61k/8.24k [00:26<01:07, 83.0files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.62k/8.24k [00:26<01:11, 78.8files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.63k/8.24k [00:26<01:07, 83.4files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.64k/8.24k [00:26<01:03, 88.6files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.65k/8.24k [00:26<01:00, 93.0files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.67k/8.24k [00:26<01:05, 85.5files/s]",
    " 32%|\u2588\u2588\u2588\u258f      | 2.67k/8.24k [00:26<01:08, 81.6files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.68k/8.24k [00:26<01:10, 78.6files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.69k/8.24k [00:27<01:08, 81.0files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.70k/8.24k [00:27<01:09, 79.6files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.71k/8.24k [00:27<01:03, 87.6files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.72k/8.24k [00:27<01:02, 87.9files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.73k/8.24k [00:27<01:01, 89.3files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.74k/8.24k [00:27<01:04, 85.1files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.75k/8.24k [00:27<01:11, 77.2files/s]",
    " 33%|\u2588\u2588\u2588\u258e      | 2.76k/8.24k [00:27<01:08, 80.5files/s]",
    " 34%|\u2588\u2588\u2588\u258e      | 2.77k/8.24k [00:28<01:02, 86.9files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.78k/8.24k [00:28<01:03, 86.3files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.79k/8.24k [00:28<01:01, 88.9files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.81k/8.24k [00:28<00:52, 103files/s] ",
    " 34%|\u2588\u2588\u2588\u258d      | 2.82k/8.24k [00:28<00:55, 97.0files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.83k/8.24k [00:28<00:55, 97.6files/s]",
    " 34%|\u2588\u2588\u2588\u258d      | 2.84k/8.24k [00:28<00:52, 103files/s] ",
    " 35%|\u2588\u2588\u2588\u258d      | 2.85k/8.24k [00:28<00:55, 97.2files/s]",
    " 35%|\u2588\u2588\u2588\u258d      | 2.86k/8.24k [00:28<00:56, 95.6files/s]",
    " 35%|\u2588\u2588\u2588\u258d      | 2.87k/8.24k [00:28<00:55, 96.1files/s]",
    " 35%|\u2588\u2588\u2588\u258d      | 2.88k/8.24k [00:29<00:52, 102files/s] ",
    " 35%|\u2588\u2588\u2588\u258c      | 2.89k/8.24k [00:29<00:52, 101files/s]",
    " 35%|\u2588\u2588\u2588\u258c      | 2.90k/8.24k [00:29<00:55, 95.5files/s]",
    " 35%|\u2588\u2588\u2588\u258c      | 2.91k/8.24k [00:29<00:57, 91.9files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.93k/8.24k [00:29<00:54, 97.7files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.94k/8.24k [00:29<00:54, 97.7files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.95k/8.24k [00:29<00:55, 95.3files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.96k/8.24k [00:29<00:55, 95.1files/s]",
    " 36%|\u2588\u2588\u2588\u258c      | 2.97k/8.24k [00:30<00:51, 102files/s] ",
    " 36%|\u2588\u2588\u2588\u258c      | 2.98k/8.24k [00:30<01:01, 85.7files/s]",
    " 36%|\u2588\u2588\u2588\u258b      | 2.99k/8.24k [00:30<00:57, 90.6files/s]",
    " 36%|\u2588\u2588\u2588\u258b      | 3.00k/8.24k [00:30<00:59, 87.9files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.01k/8.24k [00:30<00:57, 90.7files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.02k/8.24k [00:30<00:57, 90.7files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.03k/8.24k [00:30<00:59, 87.3files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.04k/8.24k [00:30<01:09, 75.0files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.05k/8.24k [00:31<01:07, 77.2files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.06k/8.24k [00:31<01:10, 73.8files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.07k/8.24k [00:31<01:06, 77.5files/s]",
    " 37%|\u2588\u2588\u2588\u258b      | 3.08k/8.24k [00:31<00:58, 88.7files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.09k/8.24k [00:31<00:57, 88.9files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.10k/8.24k [00:31<00:56, 90.5files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.11k/8.24k [00:31<01:05, 78.4files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.12k/8.24k [00:31<01:06, 76.9files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.13k/8.24k [00:31<01:03, 80.1files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.14k/8.24k [00:32<00:59, 86.3files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.15k/8.24k [00:32<00:56, 90.3files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.16k/8.24k [00:32<00:57, 88.3files/s]",
    " 38%|\u2588\u2588\u2588\u258a      | 3.17k/8.24k [00:32<00:59, 85.4files/s]",
    " 39%|\u2588\u2588\u2588\u258a      | 3.18k/8.24k [00:32<00:57, 87.6files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.20k/8.24k [00:32<00:54, 92.9files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.21k/8.24k [00:32<00:51, 97.1files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.22k/8.24k [00:32<00:53, 93.8files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.23k/8.24k [00:33<00:53, 93.5files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.24k/8.24k [00:33<00:56, 88.9files/s]",
    " 39%|\u2588\u2588\u2588\u2589      | 3.25k/8.24k [00:33<00:57, 87.3files/s]",
    " 40%|\u2588\u2588\u2588\u2589      | 3.26k/8.24k [00:33<00:56, 87.6files/s]",
    " 40%|\u2588\u2588\u2588\u2589      | 3.27k/8.24k [00:33<00:56, 87.5files/s]",
    " 40%|\u2588\u2588\u2588\u2589      | 3.28k/8.24k [00:33<00:54, 91.5files/s]",
    " 40%|\u2588\u2588\u2588\u2589      | 3.29k/8.24k [00:33<00:50, 98.8files/s]",
    " 40%|\u2588\u2588\u2588\u2588      | 3.30k/8.24k [00:33<00:46, 106files/s] ",
    " 40%|\u2588\u2588\u2588\u2588      | 3.32k/8.24k [00:33<00:44, 110files/s]",
    " 40%|\u2588\u2588\u2588\u2588      | 3.33k/8.24k [00:34<00:46, 105files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.34k/8.24k [00:34<00:44, 110files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.35k/8.24k [00:34<00:50, 95.9files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.36k/8.24k [00:34<00:50, 96.1files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.37k/8.24k [00:34<00:50, 97.1files/s]",
    " 41%|\u2588\u2588\u2588\u2588      | 3.39k/8.24k [00:34<00:46, 104files/s] ",
    " 41%|\u2588\u2588\u2588\u2588      | 3.40k/8.24k [00:34<00:45, 107files/s]",
    " 41%|\u2588\u2588\u2588\u2588\u258f     | 3.41k/8.24k [00:34<00:47, 101files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.42k/8.24k [00:34<00:49, 97.2files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.43k/8.24k [00:35<00:57, 84.3files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.44k/8.24k [00:35<00:52, 91.8files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.45k/8.24k [00:35<00:54, 87.1files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.46k/8.24k [00:35<00:50, 94.8files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.48k/8.24k [00:35<00:49, 95.6files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.48k/8.24k [00:35<00:49, 95.6files/s]",
    " 42%|\u2588\u2588\u2588\u2588\u258f     | 3.50k/8.24k [00:35<00:54, 87.3files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.51k/8.24k [00:35<00:48, 98.5files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.52k/8.24k [00:36<00:51, 91.3files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.53k/8.24k [00:36<00:47, 98.2files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.54k/8.24k [00:36<00:46, 101files/s] ",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.55k/8.24k [00:36<00:48, 96.9files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.56k/8.24k [00:36<00:52, 89.3files/s]",
    " 43%|\u2588\u2588\u2588\u2588\u258e     | 3.57k/8.24k [00:36<00:51, 91.3files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258e     | 3.59k/8.24k [00:36<00:45, 101files/s] ",
    " 44%|\u2588\u2588\u2588\u2588\u258e     | 3.60k/8.24k [00:36<00:52, 88.2files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.61k/8.24k [00:37<00:53, 87.2files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.62k/8.24k [00:37<00:51, 89.0files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.63k/8.24k [00:37<00:52, 88.2files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.64k/8.24k [00:37<00:52, 87.4files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.65k/8.24k [00:37<00:52, 87.0files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.66k/8.24k [00:37<00:51, 89.8files/s]",
    " 44%|\u2588\u2588\u2588\u2588\u258d     | 3.67k/8.24k [00:37<00:52, 87.2files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258d     | 3.68k/8.24k [00:37<00:48, 94.6files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258d     | 3.69k/8.24k [00:37<00:43, 104files/s] ",
    " 45%|\u2588\u2588\u2588\u2588\u258d     | 3.70k/8.24k [00:38<00:48, 94.0files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258c     | 3.71k/8.24k [00:38<00:45, 99.9files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258c     | 3.73k/8.24k [00:38<00:46, 97.0files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258c     | 3.74k/8.24k [00:38<00:46, 97.4files/s]",
    " 45%|\u2588\u2588\u2588\u2588\u258c     | 3.75k/8.24k [00:38<00:45, 98.3files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.76k/8.24k [00:38<00:46, 96.8files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.77k/8.24k [00:38<00:45, 97.3files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.78k/8.24k [00:38<00:48, 92.9files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.79k/8.24k [00:38<00:48, 92.2files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258c     | 3.80k/8.24k [00:39<00:43, 102files/s] ",
    " 46%|\u2588\u2588\u2588\u2588\u258b     | 3.81k/8.24k [00:39<00:49, 90.3files/s]",
    " 46%|\u2588\u2588\u2588\u2588\u258b     | 3.83k/8.24k [00:39<00:44, 100files/s] ",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.84k/8.24k [00:39<00:43, 102files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.85k/8.24k [00:39<00:41, 106files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.86k/8.24k [00:39<00:40, 108files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.88k/8.24k [00:39<00:40, 106files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.89k/8.24k [00:39<00:44, 97.0files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.90k/8.24k [00:40<00:51, 84.4files/s]",
    " 47%|\u2588\u2588\u2588\u2588\u258b     | 3.91k/8.24k [00:40<00:52, 83.3files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.92k/8.24k [00:40<00:53, 80.9files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.93k/8.24k [00:40<00:52, 82.3files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.94k/8.24k [00:40<00:56, 76.4files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.94k/8.24k [00:40<00:56, 75.8files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.95k/8.24k [00:40<00:57, 74.4files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.96k/8.24k [00:40<00:58, 72.8files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.97k/8.24k [00:41<00:57, 74.0files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.98k/8.24k [00:41<00:59, 71.7files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.98k/8.24k [00:41<00:57, 74.5files/s]",
    " 48%|\u2588\u2588\u2588\u2588\u258a     | 3.99k/8.24k [00:41<00:56, 74.6files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u258a     | 4.00k/8.24k [00:41<00:58, 72.9files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u258a     | 4.01k/8.24k [00:41<00:54, 77.2files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.02k/8.24k [00:41<00:57, 73.8files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.03k/8.24k [00:41<00:52, 80.2files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.04k/8.24k [00:41<00:51, 81.4files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.05k/8.24k [00:41<00:48, 86.1files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.05k/8.24k [00:42<00:50, 83.1files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.07k/8.24k [00:42<00:54, 76.4files/s]",
    " 49%|\u2588\u2588\u2588\u2588\u2589     | 4.08k/8.24k [00:42<00:50, 82.0files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.09k/8.24k [00:42<00:48, 86.1files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.10k/8.24k [00:42<00:45, 91.6files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.11k/8.24k [00:42<00:47, 86.7files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2589     | 4.12k/8.24k [00:42<00:48, 84.7files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2588     | 4.13k/8.24k [00:42<00:40, 100files/s] ",
    " 50%|\u2588\u2588\u2588\u2588\u2588     | 4.14k/8.24k [00:43<00:39, 103files/s]",
    " 50%|\u2588\u2588\u2588\u2588\u2588     | 4.16k/8.24k [00:43<00:38, 107files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.17k/8.24k [00:43<00:34, 117files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.18k/8.24k [00:43<00:34, 116files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.20k/8.24k [00:43<00:35, 113files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.21k/8.24k [00:43<00:35, 115files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588     | 4.22k/8.24k [00:43<00:34, 115files/s]",
    " 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.23k/8.24k [00:43<00:36, 108files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.24k/8.24k [00:43<00:39, 100files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.25k/8.24k [00:44<00:39, 100files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.27k/8.24k [00:44<00:36, 108files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.28k/8.24k [00:44<00:37, 107files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.29k/8.24k [00:44<00:33, 117files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.31k/8.24k [00:44<00:38, 101files/s]",
    " 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 4.32k/8.24k [00:44<00:33, 116files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.33k/8.24k [00:44<00:34, 114files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.35k/8.24k [00:44<00:37, 104files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.36k/8.24k [00:45<00:37, 102files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.37k/8.24k [00:45<00:36, 106files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.38k/8.24k [00:45<00:38, 101files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.39k/8.24k [00:45<00:40, 94.9files/s]",
    " 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.40k/8.24k [00:45<00:43, 87.7files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.41k/8.24k [00:45<00:45, 83.8files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 4.42k/8.24k [00:45<00:43, 86.8files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.43k/8.24k [00:45<00:41, 90.8files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.44k/8.24k [00:45<00:42, 88.9files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.46k/8.24k [00:46<00:38, 97.9files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.47k/8.24k [00:46<00:39, 96.0files/s]",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.48k/8.24k [00:46<00:37, 100files/s] ",
    " 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.49k/8.24k [00:46<00:37, 101files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.50k/8.24k [00:46<00:42, 88.2files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.51k/8.24k [00:46<00:42, 87.9files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.52k/8.24k [00:46<00:44, 83.3files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 4.53k/8.24k [00:46<00:43, 84.4files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.54k/8.24k [00:47<00:42, 86.3files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.55k/8.24k [00:47<00:40, 92.0files/s]",
    " 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.56k/8.24k [00:47<00:39, 93.7files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.57k/8.24k [00:47<00:40, 90.3files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.58k/8.24k [00:47<00:40, 90.2files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.59k/8.24k [00:47<00:39, 91.3files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.60k/8.24k [00:47<00:40, 89.6files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.61k/8.24k [00:47<00:38, 93.3files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 4.63k/8.24k [00:47<00:36, 98.9files/s]",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.64k/8.24k [00:48<00:33, 109files/s] ",
    " 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.65k/8.24k [00:48<00:32, 112files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.66k/8.24k [00:48<00:33, 107files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.67k/8.24k [00:48<00:33, 106files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.69k/8.24k [00:48<00:33, 107files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.70k/8.24k [00:48<00:36, 96.8files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.71k/8.24k [00:48<00:33, 105files/s] ",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.72k/8.24k [00:48<00:33, 104files/s]",
    " 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 4.74k/8.24k [00:48<00:31, 112files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.75k/8.24k [00:49<00:32, 108files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.76k/8.24k [00:49<00:32, 106files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.77k/8.24k [00:49<00:32, 107files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.78k/8.24k [00:49<00:33, 102files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.79k/8.24k [00:49<00:38, 88.4files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.80k/8.24k [00:49<00:40, 85.4files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.81k/8.24k [00:49<00:41, 83.2files/s]",
    " 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.82k/8.24k [00:49<00:44, 76.9files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.83k/8.24k [00:50<00:45, 75.7files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 4.84k/8.24k [00:50<00:42, 80.1files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.85k/8.24k [00:50<00:42, 78.9files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.86k/8.24k [00:50<00:47, 71.2files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.86k/8.24k [00:50<00:48, 69.7files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.87k/8.24k [00:50<00:46, 72.4files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.88k/8.24k [00:50<00:53, 62.6files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.89k/8.24k [00:50<00:52, 63.8files/s]",
    " 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.90k/8.24k [00:51<00:53, 62.2files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.90k/8.24k [00:51<00:53, 62.1files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.91k/8.24k [00:51<00:52, 63.3files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.92k/8.24k [00:51<00:49, 66.5files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.93k/8.24k [00:51<00:52, 63.5files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 4.94k/8.24k [00:51<00:45, 73.1files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.95k/8.24k [00:51<00:45, 72.7files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.95k/8.24k [00:51<00:45, 72.1files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.96k/8.24k [00:52<00:43, 75.8files/s]",
    " 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.97k/8.24k [00:52<00:41, 79.4files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 4.99k/8.24k [00:52<00:34, 95.6files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.00k/8.24k [00:52<00:33, 95.9files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.01k/8.24k [00:52<00:30, 106files/s] ",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.02k/8.24k [00:52<00:30, 107files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 5.04k/8.24k [00:52<00:27, 118files/s]",
    " 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.05k/8.24k [00:52<00:26, 119files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.07k/8.24k [00:52<00:25, 126files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.08k/8.24k [00:52<00:25, 122files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.09k/8.24k [00:53<00:25, 123files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.11k/8.24k [00:53<00:26, 118files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.12k/8.24k [00:53<00:30, 103files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.13k/8.24k [00:53<00:35, 86.4files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.14k/8.24k [00:53<00:36, 84.8files/s]",
    " 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 5.15k/8.24k [00:53<00:35, 88.0files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.16k/8.24k [00:53<00:36, 83.6files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.17k/8.24k [00:54<00:38, 80.5files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.18k/8.24k [00:54<00:39, 77.4files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.19k/8.24k [00:54<00:32, 95.0files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.20k/8.24k [00:54<00:32, 92.5files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.21k/8.24k [00:54<00:37, 81.2files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.22k/8.24k [00:54<00:38, 78.1files/s]",
    " 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.23k/8.24k [00:54<00:39, 75.9files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.24k/8.24k [00:54<00:37, 79.1files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 5.25k/8.24k [00:55<00:38, 77.0files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.26k/8.24k [00:55<00:40, 73.9files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.27k/8.24k [00:55<00:42, 70.6files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.28k/8.24k [00:55<00:46, 63.9files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.28k/8.24k [00:55<00:43, 67.3files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.29k/8.24k [00:55<00:44, 65.9files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.30k/8.24k [00:55<00:50, 58.3files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.30k/8.24k [00:56<00:55, 53.1files/s]",
    " 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.31k/8.24k [00:56<00:51, 56.8files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.32k/8.24k [00:56<00:47, 61.1files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.33k/8.24k [00:56<00:41, 70.0files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.34k/8.24k [00:56<00:36, 79.2files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 5.35k/8.24k [00:56<00:38, 75.9files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.36k/8.24k [00:56<00:35, 81.8files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.37k/8.24k [00:56<00:35, 80.5files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.38k/8.24k [00:56<00:33, 85.0files/s]",
    " 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.39k/8.24k [00:57<00:31, 91.1files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.40k/8.24k [00:57<00:29, 97.4files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.42k/8.24k [00:57<00:26, 105files/s] ",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.43k/8.24k [00:57<00:26, 108files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.44k/8.24k [00:57<00:24, 114files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 5.46k/8.24k [00:57<00:25, 110files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.47k/8.24k [00:57<00:27, 100files/s]",
    " 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.48k/8.24k [00:57<00:28, 97.6files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.49k/8.24k [00:57<00:28, 95.9files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.50k/8.24k [00:58<00:32, 84.5files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.51k/8.24k [00:58<00:30, 89.2files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.52k/8.24k [00:58<00:30, 88.4files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.53k/8.24k [00:58<00:27, 98.7files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.54k/8.24k [00:58<00:30, 87.8files/s]",
    " 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 5.55k/8.24k [00:58<00:33, 79.5files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.56k/8.24k [00:58<00:40, 66.3files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.57k/8.24k [00:59<00:39, 67.3files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.58k/8.24k [00:59<00:39, 66.8files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.58k/8.24k [00:59<00:42, 62.0files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.59k/8.24k [00:59<00:39, 66.2files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.60k/8.24k [00:59<00:41, 63.7files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.61k/8.24k [00:59<00:38, 68.7files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.62k/8.24k [00:59<00:34, 76.0files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.63k/8.24k [00:59<00:35, 73.9files/s]",
    " 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.64k/8.24k [01:00<00:37, 69.5files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.65k/8.24k [01:00<00:36, 71.3files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 5.66k/8.24k [01:00<00:35, 71.9files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.67k/8.24k [01:00<00:33, 77.9files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.67k/8.24k [01:00<00:31, 82.6files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.68k/8.24k [01:00<00:29, 87.2files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.69k/8.24k [01:00<00:30, 82.6files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.70k/8.24k [01:00<00:32, 78.2files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.71k/8.24k [01:00<00:36, 69.5files/s]",
    " 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.72k/8.24k [01:01<00:35, 70.5files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.73k/8.24k [01:01<00:36, 68.5files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.74k/8.24k [01:01<00:35, 70.7files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.74k/8.24k [01:01<00:34, 71.4files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.75k/8.24k [01:01<00:34, 71.3files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 5.76k/8.24k [01:01<00:33, 73.4files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.77k/8.24k [01:01<00:31, 79.1files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.78k/8.24k [01:01<00:28, 86.5files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.79k/8.24k [01:02<00:26, 91.1files/s]",
    " 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.80k/8.24k [01:02<00:26, 92.3files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.82k/8.24k [01:02<00:26, 91.9files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.83k/8.24k [01:02<00:28, 83.8files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.84k/8.24k [01:02<00:28, 83.9files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.85k/8.24k [01:02<00:27, 86.8files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.86k/8.24k [01:02<00:26, 90.3files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 5.87k/8.24k [01:02<00:26, 88.1files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.88k/8.24k [01:03<00:27, 85.6files/s]",
    " 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.89k/8.24k [01:03<00:27, 84.0files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.90k/8.24k [01:03<00:29, 80.6files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.91k/8.24k [01:03<00:30, 76.2files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.92k/8.24k [01:03<00:31, 74.2files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.93k/8.24k [01:03<00:28, 80.0files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.94k/8.24k [01:03<00:30, 75.8files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.94k/8.24k [01:03<00:33, 68.4files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.95k/8.24k [01:04<00:34, 67.1files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.96k/8.24k [01:04<00:34, 66.9files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.97k/8.24k [01:04<00:33, 67.0files/s]",
    " 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 5.97k/8.24k [01:04<00:35, 64.2files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 5.98k/8.24k [01:04<00:35, 64.4files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 5.99k/8.24k [01:04<00:32, 69.2files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.00k/8.24k [01:04<00:30, 73.7files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.01k/8.24k [01:04<00:29, 74.8files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.01k/8.24k [01:04<00:29, 74.5files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.03k/8.24k [01:05<00:25, 86.1files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.04k/8.24k [01:05<00:22, 97.3files/s]",
    " 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.05k/8.24k [01:05<00:22, 99.0files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.06k/8.24k [01:05<00:21, 103files/s] ",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 6.08k/8.24k [01:05<00:20, 105files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.09k/8.24k [01:05<00:21, 97.9files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.10k/8.24k [01:05<00:21, 98.0files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.11k/8.24k [01:05<00:21, 98.3files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.12k/8.24k [01:05<00:24, 85.1files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.13k/8.24k [01:06<00:25, 83.5files/s]",
    " 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.14k/8.24k [01:06<00:24, 85.0files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.15k/8.24k [01:06<00:24, 87.0files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.16k/8.24k [01:06<00:24, 83.8files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 6.17k/8.24k [01:06<00:19, 104files/s] ",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.18k/8.24k [01:06<00:19, 103files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.20k/8.24k [01:06<00:21, 94.7files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.21k/8.24k [01:06<00:20, 97.3files/s]",
    " 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.22k/8.24k [01:06<00:20, 96.5files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.23k/8.24k [01:07<00:22, 90.5files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.24k/8.24k [01:07<00:21, 93.8files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.25k/8.24k [01:07<00:20, 95.1files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.26k/8.24k [01:07<00:21, 92.2files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.27k/8.24k [01:07<00:23, 83.5files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 6.28k/8.24k [01:07<00:23, 81.9files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.29k/8.24k [01:07<00:23, 83.6files/s]",
    " 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.30k/8.24k [01:07<00:20, 92.9files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.31k/8.24k [01:08<00:20, 92.1files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.32k/8.24k [01:08<00:20, 92.7files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.33k/8.24k [01:08<00:21, 87.3files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.34k/8.24k [01:08<00:20, 91.5files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.35k/8.24k [01:08<00:20, 92.8files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.36k/8.24k [01:08<00:20, 91.7files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.37k/8.24k [01:08<00:20, 90.9files/s]",
    " 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 6.38k/8.24k [01:08<00:21, 88.5files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.39k/8.24k [01:08<00:22, 84.1files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.40k/8.24k [01:09<00:22, 82.9files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.41k/8.24k [01:09<00:24, 74.3files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.42k/8.24k [01:09<00:27, 66.4files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.43k/8.24k [01:09<00:24, 72.9files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.43k/8.24k [01:09<00:24, 73.8files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.44k/8.24k [01:09<00:23, 77.0files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.45k/8.24k [01:09<00:21, 81.8files/s]",
    " 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.46k/8.24k [01:09<00:23, 75.0files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.47k/8.24k [01:10<00:23, 76.5files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 6.48k/8.24k [01:10<00:21, 82.2files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.49k/8.24k [01:10<00:20, 87.2files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.50k/8.24k [01:10<00:20, 85.8files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.51k/8.24k [01:10<00:19, 87.2files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.52k/8.24k [01:10<00:21, 81.4files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.53k/8.24k [01:10<00:20, 82.0files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.54k/8.24k [01:10<00:20, 82.0files/s]",
    " 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.55k/8.24k [01:10<00:20, 83.4files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.56k/8.24k [01:11<00:21, 77.3files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.57k/8.24k [01:11<00:20, 82.0files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.58k/8.24k [01:11<00:18, 88.5files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 6.59k/8.24k [01:11<00:18, 88.0files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.60k/8.24k [01:11<00:17, 92.6files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.61k/8.24k [01:11<00:17, 95.7files/s]",
    " 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.62k/8.24k [01:11<00:16, 97.6files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.64k/8.24k [01:11<00:14, 109files/s] ",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.65k/8.24k [01:11<00:16, 99.0files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.66k/8.24k [01:12<00:17, 92.0files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.67k/8.24k [01:12<00:18, 87.0files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.68k/8.24k [01:12<00:19, 78.7files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 6.69k/8.24k [01:12<00:22, 68.8files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.70k/8.24k [01:12<00:22, 68.8files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.71k/8.24k [01:12<00:21, 73.0files/s]",
    " 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.71k/8.24k [01:12<00:22, 69.3files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.72k/8.24k [01:13<00:24, 62.6files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.73k/8.24k [01:13<00:23, 65.5files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.74k/8.24k [01:13<00:20, 72.4files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.75k/8.24k [01:13<00:23, 63.1files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.76k/8.24k [01:13<00:23, 63.9files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.77k/8.24k [01:13<00:21, 68.4files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.77k/8.24k [01:13<00:21, 67.9files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.78k/8.24k [01:14<00:22, 65.3files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.79k/8.24k [01:14<00:23, 61.1files/s]",
    " 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 6.80k/8.24k [01:14<00:23, 62.6files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.81k/8.24k [01:14<00:20, 71.0files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.82k/8.24k [01:14<00:20, 70.9files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.83k/8.24k [01:14<00:17, 82.2files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.84k/8.24k [01:14<00:16, 86.1files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.85k/8.24k [01:14<00:15, 88.9files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.86k/8.24k [01:14<00:16, 83.0files/s]",
    " 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.87k/8.24k [01:15<00:15, 88.5files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.88k/8.24k [01:15<00:17, 76.0files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.89k/8.24k [01:15<00:17, 75.8files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 6.90k/8.24k [01:15<00:16, 80.2files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.91k/8.24k [01:15<00:15, 86.8files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.92k/8.24k [01:15<00:15, 87.1files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.94k/8.24k [01:15<00:13, 94.2files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.95k/8.24k [01:15<00:13, 94.8files/s]",
    " 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.96k/8.24k [01:16<00:13, 95.5files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.97k/8.24k [01:16<00:12, 99.5files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 6.99k/8.24k [01:16<00:12, 97.0files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 7.00k/8.24k [01:16<00:12, 98.3files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.01k/8.24k [01:16<00:12, 99.0files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.02k/8.24k [01:16<00:12, 96.7files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.03k/8.24k [01:16<00:12, 93.7files/s]",
    " 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.04k/8.24k [01:16<00:12, 94.1files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.05k/8.24k [01:17<00:12, 94.2files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.06k/8.24k [01:17<00:12, 91.5files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.07k/8.24k [01:17<00:12, 92.4files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.08k/8.24k [01:17<00:12, 89.5files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.09k/8.24k [01:17<00:12, 89.4files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 7.10k/8.24k [01:17<00:14, 77.7files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.11k/8.24k [01:17<00:14, 76.9files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.12k/8.24k [01:17<00:14, 78.2files/s]",
    " 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.13k/8.24k [01:18<00:15, 69.6files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.13k/8.24k [01:18<00:14, 74.4files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.14k/8.24k [01:18<00:14, 73.8files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.15k/8.24k [01:18<00:14, 75.0files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.16k/8.24k [01:18<00:13, 77.5files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.17k/8.24k [01:18<00:13, 80.6files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.18k/8.24k [01:18<00:12, 82.0files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.19k/8.24k [01:18<00:13, 80.0files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.20k/8.24k [01:18<00:14, 73.2files/s]",
    " 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 7.21k/8.24k [01:19<00:15, 67.7files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.22k/8.24k [01:19<00:13, 73.5files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.23k/8.24k [01:19<00:12, 80.0files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.24k/8.24k [01:19<00:12, 80.5files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.25k/8.24k [01:19<00:13, 74.9files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.25k/8.24k [01:19<00:13, 71.6files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.26k/8.24k [01:19<00:13, 73.3files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.27k/8.24k [01:19<00:13, 72.6files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.28k/8.24k [01:20<00:13, 70.4files/s]",
    " 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.29k/8.24k [01:20<00:13, 72.1files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.29k/8.24k [01:20<00:12, 74.2files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 7.30k/8.24k [01:20<00:12, 75.6files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.31k/8.24k [01:20<00:11, 83.8files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.32k/8.24k [01:20<00:10, 87.8files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.34k/8.24k [01:20<00:09, 96.5files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.35k/8.24k [01:20<00:09, 94.7files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.36k/8.24k [01:20<00:10, 85.9files/s]",
    " 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.37k/8.24k [01:21<00:11, 75.2files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.37k/8.24k [01:21<00:11, 72.2files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.38k/8.24k [01:21<00:11, 72.7files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.39k/8.24k [01:21<00:10, 79.7files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.40k/8.24k [01:21<00:10, 78.6files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 7.41k/8.24k [01:21<00:11, 74.0files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.42k/8.24k [01:21<00:09, 83.7files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.44k/8.24k [01:21<00:08, 89.6files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.45k/8.24k [01:22<00:09, 86.3files/s]",
    " 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.46k/8.24k [01:22<00:09, 83.0files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.46k/8.24k [01:22<00:09, 81.2files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.47k/8.24k [01:22<00:10, 76.2files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.48k/8.24k [01:22<00:09, 77.8files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.49k/8.24k [01:22<00:10, 74.8files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.50k/8.24k [01:22<00:09, 77.6files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.51k/8.24k [01:22<00:10, 71.1files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 7.52k/8.24k [01:23<00:10, 68.3files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.53k/8.24k [01:23<00:09, 75.3files/s]",
    " 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.53k/8.24k [01:23<00:10, 68.3files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.54k/8.24k [01:23<00:09, 71.1files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.55k/8.24k [01:23<00:09, 71.8files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.56k/8.24k [01:23<00:09, 71.0files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.57k/8.24k [01:23<00:08, 81.0files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.58k/8.24k [01:23<00:07, 85.6files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.59k/8.24k [01:23<00:07, 84.1files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.60k/8.24k [01:24<00:08, 76.4files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.61k/8.24k [01:24<00:07, 82.4files/s]",
    " 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 7.62k/8.24k [01:24<00:07, 85.9files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.63k/8.24k [01:24<00:06, 94.1files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.64k/8.24k [01:24<00:06, 98.3files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.65k/8.24k [01:24<00:05, 100files/s] ",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.67k/8.24k [01:24<00:05, 95.9files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.67k/8.24k [01:24<00:06, 92.1files/s]",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.69k/8.24k [01:24<00:05, 104files/s] ",
    " 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.70k/8.24k [01:25<00:05, 105files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.71k/8.24k [01:25<00:05, 102files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 7.72k/8.24k [01:25<00:04, 106files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.74k/8.24k [01:25<00:04, 114files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.75k/8.24k [01:25<00:04, 109files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.76k/8.24k [01:25<00:04, 116files/s]",
    " 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.78k/8.24k [01:25<00:04, 114files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.79k/8.24k [01:25<00:04, 112files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.80k/8.24k [01:26<00:04, 103files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.81k/8.24k [01:26<00:04, 86.9files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 7.82k/8.24k [01:26<00:04, 88.3files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.83k/8.24k [01:26<00:04, 89.5files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.84k/8.24k [01:26<00:04, 86.6files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.85k/8.24k [01:26<00:05, 70.5files/s]",
    " 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.86k/8.24k [01:26<00:04, 81.0files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.87k/8.24k [01:27<00:05, 71.4files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.88k/8.24k [01:27<00:04, 72.6files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.89k/8.24k [01:27<00:05, 69.8files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.90k/8.24k [01:27<00:04, 74.0files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.91k/8.24k [01:27<00:04, 75.5files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.92k/8.24k [01:27<00:04, 76.5files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 7.92k/8.24k [01:27<00:04, 69.3files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.94k/8.24k [01:27<00:03, 78.7files/s]",
    " 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.95k/8.24k [01:27<00:03, 80.4files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.96k/8.24k [01:28<00:03, 90.9files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.97k/8.24k [01:28<00:03, 88.2files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.98k/8.24k [01:28<00:02, 98.6files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 7.99k/8.24k [01:28<00:02, 93.9files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 8.00k/8.24k [01:28<00:02, 91.8files/s]",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 8.02k/8.24k [01:28<00:02, 104files/s] ",
    " 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 8.03k/8.24k [01:28<00:02, 105files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.04k/8.24k [01:28<00:01, 101files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.05k/8.24k [01:28<00:01, 96.1files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.06k/8.24k [01:29<00:01, 92.4files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.07k/8.24k [01:29<00:01, 90.5files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.08k/8.24k [01:29<00:01, 93.1files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.09k/8.24k [01:29<00:01, 92.9files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.10k/8.24k [01:29<00:01, 94.0files/s]",
    " 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.11k/8.24k [01:29<00:01, 81.7files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 8.12k/8.24k [01:29<00:01, 86.1files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.14k/8.24k [01:29<00:01, 99.2files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.15k/8.24k [01:30<00:00, 101files/s] ",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.16k/8.24k [01:30<00:00, 98.7files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.17k/8.24k [01:30<00:00, 103files/s] ",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.18k/8.24k [01:30<00:00, 105files/s]",
    " 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.20k/8.24k [01:30<00:00, 104files/s]",
    "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.21k/8.24k [01:30<00:00, 90.1files/s]",
    "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.22k/8.24k [01:30<00:00, 92.7files/s]",
    "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.23k/8.24k [01:30<00:00, 85.3files/s]",
    "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 8.24k/8.24k [01:31<00:00, 83.9files/s]",
    "                                                       "
  ]
}