{
  "repair_begin": "2021-05-07 11:13:27.884788",
  "repair_end": "2021-05-07 11:13:43.619729",
  "patches": [
    {
      "target_file": "src/ui.c",
      "fix": "",
      "edits": []
    }
  ],
  "compilations": 0,
  "failed_compilations": 1,
  "outcomes": {
    "sanity_check": {
      "compiles": [
        1
      ],
      "msg": [
        "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:539:13: error: expected parameter declarator\n        cgc_printf(\"@s\",prompt);\n                   ^\n/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:539:13: error: expected ')'\n/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:539:12: note: to match this '('\n        cgc_printf(\"@s\",prompt);\n                  ^\n/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:539:2: error: conflicting types for 'cgc_printf'\n        cgc_printf(\"@s\",prompt);\n        ^\n/data/CquenceR/Dive_Logger_0/Dive_Logger/lib/cgc_stdlib.h:99:5: note: previous declaration is here\nint cgc_printf( const char *fmt, ... );\n    ^\n/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:540:14: error: initializer element is not a compile-time constant\n        selection = cgc_GetPositiveInt();\n                    ^~~~~~~~~~~~~~~~~~~~\n/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:543:2: error: expected identifier or '('\n        if (  (selection >= 1 )&&( selection <= count )  ){\n        ^\n/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:545:3: error: expected identifier or '('\n        }else {\n         ^\n/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:549:2: error: expected identifier or '('\n        return DiveEntryListThis;\n        ^\n/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:550:1: error: extraneous closing brace ('}')\n}\n^\n8 errors generated.\nmake[2]: *** [Dive_Logger/CMakeFiles/Dive_Logger.dir/build.make:115: Dive_Logger/CMakeFiles/Dive_Logger.dir/src/ui.c.o] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:301: Dive_Logger/CMakeFiles/Dive_Logger.dir/all] Error 2\nmake: *** [Makefile:84: all] Error 2\n"
      ]
    }
  },
  "neg_tests": 2,
  "pos_tests": 20,
  "passed_neg_tests": 0,
  "passed_pos_tests": 0,
  "failed_neg_tests": 0,
  "failed_pos_tests": 0,
  "duration": 15.734941,
  "errors": [
    "\u001b[1;31m/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:539:13: error: expected parameter declarator",
    "        cgc_printf(\"@s\",prompt);",
    "                   ^",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:539:13: error: expected ')'",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:539:12: note: to match this '('",
    "        cgc_printf(\"@s\",prompt);",
    "                  ^",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:539:2: error: conflicting types for 'cgc_printf'",
    "        cgc_printf(\"@s\",prompt);",
    "        ^",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/lib/cgc_stdlib.h:99:5: note: previous declaration is here",
    "int cgc_printf( const char *fmt, ... );",
    "    ^",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:540:14: error: initializer element is not a compile-time constant",
    "        selection = cgc_GetPositiveInt();",
    "                    ^~~~~~~~~~~~~~~~~~~~",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:543:2: error: expected identifier or '('",
    "        if (  (selection >= 1 )&&( selection <= count )  ){",
    "        ^",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:545:3: error: expected identifier or '('",
    "        }else {",
    "         ^",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:549:2: error: expected identifier or '('",
    "        return DiveEntryListThis;",
    "        ^",
    "/data/CquenceR/Dive_Logger_0/Dive_Logger/src/ui.c:550:1: error: extraneous closing brace ('}')",
    "}",
    "^",
    "8 errors generated.",
    "make[2]: *** [Dive_Logger/CMakeFiles/Dive_Logger.dir/build.make:115: Dive_Logger/CMakeFiles/Dive_Logger.dir/src/ui.c.o] Error 1",
    "make[1]: *** [CMakeFiles/Makefile2:301: Dive_Logger/CMakeFiles/Dive_Logger.dir/all] Error 2",
    "make: *** [Makefile:84: all] Error 2\u001b[0m",
    "",
    ""
  ]
}