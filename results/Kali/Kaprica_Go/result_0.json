{
  "repair_begin": "2021-05-06 23:01:49.175131",
  "repair_end": "2021-05-07 00:01:49.206201",
  "patches": [
    {
      "target_file": "src/main.c",
      "fix": "",
      "edits": [
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n253a255,257\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n336a338,340\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n742,743c743,745\n<     if (game->ticks > MAX_TICKS)\n<       cgc_end_game(game, name, 1);\n---\n>     //prophet generated patch\n>     if ((game->ticks > 150) || 1)\n>         cgc_end_game(game, name, 1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n290a292,294\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n548c549,552\n<   cgc_fdprintf(STDOUT, \"You are a \");\n---\n>   //prophet generated patch\n>   if (1)\n>       return;\n>   cgc_fdprintf(1, \"You are a \");\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n549c550,552\n<   cgc_fdprintf(STDOUT, ((game->scores[BLACK - 1] > game->scores[WHITE - 1])) ? \"Winner, \" : \"Loser, \");\n---\n>   //prophet generated patch\n>   if (!1)\n>       cgc_fdprintf(1, ((game->scores[BLACK - 1] > game->scores[WHITE - 1])) ? \"Winner, \" : \"Loser, \");\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n535a537,539\n>   //prophet generated patch\n>   if (1)\n>       return;\n537,545c541,549\n<   case 0:\n<     cgc_fdprintf(STDOUT, \"Both Passed\\n\");\n<     break;\n<   case 1:\n<     cgc_fdprintf(STDOUT, \"Game Time Exceeded\\n\");\n<     break;\n<   case 2:\n<     cgc_fdprintf(STDOUT, \"Stones Exhausted\\n\");\n<     break;\n---\n>     case 0:\n>       cgc_fdprintf(1, \"Both Passed\\n\");\n>       break;\n>     case 1:\n>       cgc_fdprintf(1, \"Game Time Exceeded\\n\");\n>       break;\n>     case 2:\n>       cgc_fdprintf(1, \"Stones Exhausted\\n\");\n>       break;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n544a546,548\n>     //prophet generated patch\n>     if (1)\n>         return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n342,344c343,346\n<       if (s > 1) {\n<         *black += 1;\n<         continue;\n---\n>       //prophet generated patch\n>       if ((s > 1) && !1) {\n>           *black += 1;\n>           continue;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n257a259,261\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n151,152c152,154\n<     if (board[y / BOARD_DIM][y % BOARD_DIM] != EMPTY) {\n<       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n---\n>     //prophet generated patch\n>     if ((board[y / 19][y % 19] != EMPTY) || 1) {\n>         h ^= ztable[y][board[y / 19][y % 19] - 1];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n276a278,280\n>       //prophet generated patch\n>       if (1)\n>           return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n236,237c237,239\n<   if (c == OFF_BOARD)\n<     return 0;\n---\n>   //prophet generated patch\n>   if ((c == OFF_BOARD) || 1)\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n373a375,377\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n304,306c305,308\n<       if (cgc_get_color(frozen->board, x, y) == color && !cgc_has_liberty(frozen, sboard, x, y, color)) {\n<         cnt++;\n<         SET_BOARD(game->board, x, y, EMPTY);\n---\n>       //prophet generated patch\n>       if ((cgc_get_color(frozen->board, x, y) == color && !cgc_has_liberty(frozen, sboard, x, y, color)) && !1) {\n>           cnt++;\n>           (game->board[y][x] = EMPTY);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n331c332,335\n<       cgc_memset(sboard, 0, sizeof(sboard));\n---\n>       //prophet generated patch\n>       if (1)\n>           return -1;\n>       cgc_memset(sboard, 0, sizeof (sboard));\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n745c746,750\n<       cgc_end_game(game, name, 2);\n---\n>       //prophet generated patch\n>       {\n>           if (!1)\n>               cgc_end_game(game, name, 2);\n>       }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n266,267c267,269\n<   if (!game || !sboard)\n<     error(1);\n---\n>   //prophet generated patch\n>   if ((!game || !sboard) && !1)\n>       cgc_exit(1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n253a255,257\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n279a281,283\n>       //prophet generated patch\n>       if (1)\n>           return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n227,228c228,230\n<   if (x >= BOARD_DIM || x < 0 || y >= BOARD_DIM || y < 0)\n<     return OFF_BOARD;\n---\n>   //prophet generated patch\n>   if ((x >= 19 || x < 0 || y >= 19 || y < 0) || 1)\n>       return OFF_BOARD;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n370,372c371,374\n<   if (cgc_has_happened(simulated, *game)) {\n<     cgc_free(simulated);\n<     return -1;\n---\n>   //prophet generated patch\n>   if ((cgc_has_happened(simulated, *game)) || 1) {\n>       cgc_free(simulated);\n>       return -1;\n374,379c376,381\n<     cgc_free(*game);\n<     *game = simulated;\n<     (*game)->used[color - 1]++;\n<     (*game)->caps[color - 1] += our_cap;\n<     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n<     return 0;\n---\n>       cgc_free(*game);\n>       *game = simulated;\n>       (*game)->used[color - 1]++;\n>       (*game)->caps[color - 1] += our_cap;\n>       (*game)->caps[(color == WHITE ? BLACK : WHITE) - 1] += thr_cap;\n>       return 0;\n381,382c383,384\n<     cgc_free(simulated);\n<     return 0;\n---\n>       cgc_free(simulated);\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n536,546c537,549\n<   switch (reason) {\n<   case 0:\n<     cgc_fdprintf(STDOUT, \"Both Passed\\n\");\n<     break;\n<   case 1:\n<     cgc_fdprintf(STDOUT, \"Game Time Exceeded\\n\");\n<     break;\n<   case 2:\n<     cgc_fdprintf(STDOUT, \"Stones Exhausted\\n\");\n<     break;\n<   }\n---\n>   //prophet generated patch\n>   if (!1)\n>       switch (reason) {\n>         case 0:\n>           cgc_fdprintf(1, \"Both Passed\\n\");\n>           break;\n>         case 1:\n>           cgc_fdprintf(1, \"Game Time Exceeded\\n\");\n>           break;\n>         case 2:\n>           cgc_fdprintf(1, \"Stones Exhausted\\n\");\n>           break;\n>       }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n273a275,277\n>       //prophet generated patch\n>       if (1)\n>           return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n744,745c745,747\n<     if (game->used[BLACK - 1] > MAX_STONES || game->used[WHITE - 1] > MAX_STONES)\n<       cgc_end_game(game, name, 2);\n---\n>     //prophet generated patch\n>     if ((game->used[BLACK - 1] > 90 || game->used[WHITE - 1] > 90) || 1)\n>         cgc_end_game(game, name, 2);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n109a111,113\n>   //prophet generated patch\n>   if (1)\n>       return 0;\n111,118c115,122\n<     if (list->hash == hash) {\n<       return 1;\n<     } else if (list->next != list) {\n<       list = list->next;\n<       cnt++;\n<     } else {\n<       break;\n<     }\n---\n>       if (list->hash == hash) {\n>           return 1;\n>       } else if (list->next != list) {\n>           list = list->next;\n>           cnt++;\n>       } else {\n>           break;\n>       }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n111,112c112,114\n<     if (list->hash == hash) {\n<       return 1;\n---\n>     //prophet generated patch\n>     if ((list->hash == hash) || 1) {\n>         return 1;\n114,115c116,117\n<       list = list->next;\n<       cnt++;\n---\n>         list = list->next;\n>         cnt++;\n117c119\n<       break;\n---\n>         break;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n303c304,307\n<       cgc_memset(sboard, 0, sizeof(sboard));\n---\n>       //prophet generated patch\n>       if (1)\n>           return 0;\n>       cgc_memset(sboard, 0, sizeof (sboard));\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n238,239c239,241\n<   if (sboard[y][x] == 1)\n<     return 0;\n---\n>   //prophet generated patch\n>   if ((sboard[y][x] == 1) || 1)\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n251,252c252,254\n<   if (u == color && cgc_has_liberty(game, sboard, x, y + 1, color)) {\n<     return 1;\n---\n>   //prophet generated patch\n>   if ((u == color && cgc_has_liberty(game, sboard, x, y + 1, color)) && !1) {\n>       return 1;\n254c256\n<     return 1;\n---\n>       return 1;\n256c258\n<     return 1;\n---\n>       return 1;\n258c260\n<     return 1;\n---\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n330,351c331,353\n<     for (u8 x = 0; x < BOARD_DIM; x++) {\n<       cgc_memset(sboard, 0, sizeof(sboard));\n<       color_t cur = cgc_get_color(game->board, x, y);\n<       if (cur == WHITE) {\n<         *white += 1;\n<         continue;\n<       } else if (cur == BLACK) {\n<         *black += 1;\n<         continue;\n<       }\n< \n<       u8 s = cgc_surrounded_by(game, sboard, x, y, BLACK);\n<       if (s > 1) {\n<         *black += 1;\n<         continue;\n<       }\n< \n<       s = cgc_surrounded_by(game, sboard, x, y, WHITE);\n<       if (s > 1) {\n<         *white += 1;\n<         continue;\n<       }\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     for (u8 x = 0; x < 19; x++) {\n>         cgc_memset(sboard, 0, sizeof (sboard));\n>         color_t cur = cgc_get_color(game->board, x, y);\n>         if (cur == WHITE) {\n>             *white += 1;\n>             continue;\n>         } else if (cur == BLACK) {\n>             *black += 1;\n>             continue;\n>         }\n>         u8 s = cgc_surrounded_by(game, sboard, x, y, BLACK);\n>         if (s > 1) {\n>             *black += 1;\n>             continue;\n>         }\n>         s = cgc_surrounded_by(game, sboard, x, y, WHITE);\n>         if (s > 1) {\n>             *white += 1;\n>             continue;\n>         }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n96,97c97,99\n<   if (!new)\n<     error(1);\n---\n>   //prophet generated patch\n>   if ((!new) && !1)\n>       cgc_exit(1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n316a318,320\n>   //prophet generated patch\n>   if (1)\n>       return 0;\n318c322\n<     return 1;\n---\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n150,153c151,157\n<   for (u16 y = 0; y < BOARD_DIM * BOARD_DIM; y++) {\n<     if (board[y / BOARD_DIM][y % BOARD_DIM] != EMPTY) {\n<       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n<     }\n---\n>   //prophet generated patch\n>   if (1)\n>       return 0;\n>   for (u16 y = 0; y < 19 * 19; y++) {\n>       if (board[y / 19][y % 19] != EMPTY) {\n>           h ^= ztable[y][board[y / 19][y % 19] - 1];\n>       }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n742,743c743,745\n<     if (game->ticks > MAX_TICKS)\n<       cgc_end_game(game, name, 1);\n---\n>     //prophet generated patch\n>     if ((game->ticks > 150) && !1)\n>         cgc_end_game(game, name, 1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n373,383c374,387\n<   } else if (play) {\n<     cgc_free(*game);\n<     *game = simulated;\n<     (*game)->used[color - 1]++;\n<     (*game)->caps[color - 1] += our_cap;\n<     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n<     return 0;\n<   } else {\n<     cgc_free(simulated);\n<     return 0;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((play) || 1) {\n>         cgc_free(*game);\n>         *game = simulated;\n>         (*game)->used[color - 1]++;\n>         (*game)->caps[color - 1] += our_cap;\n>         (*game)->caps[(color == WHITE ? BLACK : WHITE) - 1] += thr_cap;\n>         return 0;\n>     } else {\n>         cgc_free(simulated);\n>         return 0;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n247a249,251\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n290a292,294\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n152c153,156\n<       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n---\n>       //prophet generated patch\n>       if (1)\n>           return -1;\n>       h ^= ztable[y][board[y / 19][y % 19] - 1];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n316a318,320\n>   //prophet generated patch\n>   if (1)\n>       return -1;\n318c322\n<     return 1;\n---\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n151,152c152,156\n<     if (board[y / BOARD_DIM][y % BOARD_DIM] != EMPTY) {\n<       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (board[y / 19][y % 19] != EMPTY) {\n>         h ^= ztable[y][board[y / 19][y % 19] - 1];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n227,228c228,230\n<   if (x >= BOARD_DIM || x < 0 || y >= BOARD_DIM || y < 0)\n<     return OFF_BOARD;\n---\n>   //prophet generated patch\n>   if ((x >= 19 || x < 0 || y >= 19 || y < 0) && !1)\n>       return OFF_BOARD;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n150,153c151,157\n<   for (u16 y = 0; y < BOARD_DIM * BOARD_DIM; y++) {\n<     if (board[y / BOARD_DIM][y % BOARD_DIM] != EMPTY) {\n<       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n<     }\n---\n>   //prophet generated patch\n>   if (1)\n>       return -1;\n>   for (u16 y = 0; y < 19 * 19; y++) {\n>       if (board[y / 19][y % 19] != EMPTY) {\n>           h ^= ztable[y][board[y / 19][y % 19] - 1];\n>       }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n553c554,556\n<   cgc_fdprintf(STDOUT, name);\n---\n>   //prophet generated patch\n>   if (!1)\n>       cgc_fdprintf(1, name);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n247,248c248,250\n<   if (u == EMPTY || d == EMPTY || l == EMPTY || r == EMPTY) {\n<     return 1;\n---\n>   //prophet generated patch\n>   if ((u == EMPTY || d == EMPTY || l == EMPTY || r == EMPTY) && !1) {\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n151,152c152,156\n<     if (board[y / BOARD_DIM][y % BOARD_DIM] != EMPTY) {\n<       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (board[y / 19][y % 19] != EMPTY) {\n>         h ^= ztable[y][board[y / 19][y % 19] - 1];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n288,289c289,291\n<   if (u + d + l + r > 4) {\n<     return 2;\n---\n>   //prophet generated patch\n>   if ((u + d + l + r > 4) && !1) {\n>       return 2;\n291c293\n<     return 0;\n---\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n152c153,156\n<       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n---\n>       //prophet generated patch\n>       if (1)\n>           return 0;\n>       h ^= ztable[y][board[y / 19][y % 19] - 1];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n276,281c277,285\n<   } else if (cur == OTHER_PLAYER(color)) {\n<       sboard[y][x] = 1;\n<       return 0;\n<   } else if (cur == EMPTY) {\n<       sboard[y][x] = 1;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((cur == (color == WHITE ? BLACK : WHITE)) && !1) {\n>         sboard[y][x] = 1;\n>         return 0;\n>     } else if (cur == EMPTY) {\n>         sboard[y][x] = 1;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n325a327,329\n>   //prophet generated patch\n>   if (1)\n>       return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n247a249,251\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n348,350c349,352\n<       if (s > 1) {\n<         *white += 1;\n<         continue;\n---\n>       //prophet generated patch\n>       if ((s > 1) || 1) {\n>           *white += 1;\n>           continue;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n265a267,269\n>   //prophet generated patch\n>   if (1)\n>       return -1;\n267c271\n<     error(1);\n---\n>       cgc_exit(1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n333a335,337\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n96,97c97,99\n<   if (!new)\n<     error(1);\n---\n>   //prophet generated patch\n>   if ((!new) || 1)\n>       cgc_exit(1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n342a344,346\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n342a344,346\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n251,252c252,254\n<   if (u == color && cgc_has_liberty(game, sboard, x, y + 1, color)) {\n<     return 1;\n---\n>   //prophet generated patch\n>   if ((u == color && cgc_has_liberty(game, sboard, x, y + 1, color)) || 1) {\n>       return 1;\n254c256\n<     return 1;\n---\n>       return 1;\n256c258\n<     return 1;\n---\n>       return 1;\n258c260\n<     return 1;\n---\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n235a237,239\n>   //prophet generated patch\n>   if (1)\n>       return 0;\n237c241\n<     return 0;\n---\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n745c746,751\n<       cgc_end_game(game, name, 2);\n---\n>       //prophet generated patch\n>       {\n>           if (1)\n>               return -1;\n>           cgc_end_game(game, name, 2);\n>       }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n273a275,277\n>       //prophet generated patch\n>       if (1)\n>           return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n330,351c331,353\n<     for (u8 x = 0; x < BOARD_DIM; x++) {\n<       cgc_memset(sboard, 0, sizeof(sboard));\n<       color_t cur = cgc_get_color(game->board, x, y);\n<       if (cur == WHITE) {\n<         *white += 1;\n<         continue;\n<       } else if (cur == BLACK) {\n<         *black += 1;\n<         continue;\n<       }\n< \n<       u8 s = cgc_surrounded_by(game, sboard, x, y, BLACK);\n<       if (s > 1) {\n<         *black += 1;\n<         continue;\n<       }\n< \n<       s = cgc_surrounded_by(game, sboard, x, y, WHITE);\n<       if (s > 1) {\n<         *white += 1;\n<         continue;\n<       }\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     for (u8 x = 0; x < 19; x++) {\n>         cgc_memset(sboard, 0, sizeof (sboard));\n>         color_t cur = cgc_get_color(game->board, x, y);\n>         if (cur == WHITE) {\n>             *white += 1;\n>             continue;\n>         } else if (cur == BLACK) {\n>             *black += 1;\n>             continue;\n>         }\n>         u8 s = cgc_surrounded_by(game, sboard, x, y, BLACK);\n>         if (s > 1) {\n>             *black += 1;\n>             continue;\n>         }\n>         s = cgc_surrounded_by(game, sboard, x, y, WHITE);\n>         if (s > 1) {\n>             *white += 1;\n>             continue;\n>         }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n288a290,292\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n288,289c289,291\n<   if (u + d + l + r > 4) {\n<     return 2;\n---\n>   //prophet generated patch\n>   if ((u + d + l + r > 4) || 1) {\n>       return 2;\n291c293\n<     return 0;\n---\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n744,745c745,747\n<     if (game->used[BLACK - 1] > MAX_STONES || game->used[WHITE - 1] > MAX_STONES)\n<       cgc_end_game(game, name, 2);\n---\n>     //prophet generated patch\n>     if ((game->used[BLACK - 1] > 90 || game->used[WHITE - 1] > 90) && !1)\n>         cgc_end_game(game, name, 2);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n270,271c271,273\n<   if (cur == OFF_BOARD || sboard[y][x] == 1)\n<     return 1;\n---\n>   //prophet generated patch\n>   if ((cur == OFF_BOARD || sboard[y][x] == 1) || 1)\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n279,281c280,285\n<   } else if (cur == EMPTY) {\n<       sboard[y][x] = 1;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((cur == EMPTY) && !1) {\n>         sboard[y][x] = 1;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n535c536,538\n<   cgc_fdprintf(STDOUT, \"Game Over \");\n---\n>   //prophet generated patch\n>   if (!1)\n>       cgc_fdprintf(1, \"Game Over \");\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n548c549,551\n<   cgc_fdprintf(STDOUT, \"You are a \");\n---\n>   //prophet generated patch\n>   if (!1)\n>       cgc_fdprintf(1, \"You are a \");\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n257,259c258,263\n<   } else if (r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) {\n<     return 1;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) && !1) {\n>         return 1;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n348,350c349,352\n<       if (s > 1) {\n<         *white += 1;\n<         continue;\n---\n>       //prophet generated patch\n>       if ((s > 1) && !1) {\n>           *white += 1;\n>           continue;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n227,228c228,232\n<   if (x >= BOARD_DIM || x < 0 || y >= BOARD_DIM || y < 0)\n<     return OFF_BOARD;\n---\n>   //prophet generated patch\n>   if (1)\n>       return -1;\n>   if (x >= 19 || x < 0 || y >= 19 || y < 0)\n>       return OFF_BOARD;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n331c332,335\n<       cgc_memset(sboard, 0, sizeof(sboard));\n---\n>       //prophet generated patch\n>       if (1)\n>           return 0;\n>       cgc_memset(sboard, 0, sizeof (sboard));\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n111,112c112,114\n<     if (list->hash == hash) {\n<       return 1;\n---\n>     //prophet generated patch\n>     if ((list->hash == hash) && !1) {\n>         return 1;\n114,115c116,117\n<       list = list->next;\n<       cnt++;\n---\n>         list = list->next;\n>         cnt++;\n117c119\n<       break;\n---\n>         break;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n288a290,292\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n325a327,329\n>   //prophet generated patch\n>   if (1)\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n342,344c343,346\n<       if (s > 1) {\n<         *black += 1;\n<         continue;\n---\n>       //prophet generated patch\n>       if ((s > 1) || 1) {\n>           *black += 1;\n>           continue;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n534c535,537\n<   cgc_free(game);\n---\n>   //prophet generated patch\n>   if (!1)\n>       cgc_free(game);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n317,318c318,320\n<   if (CONT_LIST(current->history, h)) {\n<     return 1;\n---\n>   //prophet generated patch\n>   if ((CONT_LIST(current->history, h)) || 1) {\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n744,745c745,749\n<     if (game->used[BLACK - 1] > MAX_STONES || game->used[WHITE - 1] > MAX_STONES)\n<       cgc_end_game(game, name, 2);\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (game->used[BLACK - 1] > 90 || game->used[WHITE - 1] > 90)\n>         cgc_end_game(game, name, 2);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n317,318c318,320\n<   if (CONT_LIST(current->history, h)) {\n<     return 1;\n---\n>   //prophet generated patch\n>   if ((CONT_LIST(current->history, h)) && !1) {\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n279a281,283\n>       //prophet generated patch\n>       if (1)\n>           return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n744,745c745,748\n<     if (game->used[BLACK - 1] > MAX_STONES || game->used[WHITE - 1] > MAX_STONES)\n<       cgc_end_game(game, name, 2);\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (game->used[BLACK - 1] > 90 || game->used[WHITE - 1] > 90)\n>             cgc_end_game(game, name, 2);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n258c259,261\n<     return 1;\n---\n>     //prophet generated patch\n>     if (!1)\n>         return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n227,228c228,232\n<   if (x >= BOARD_DIM || x < 0 || y >= BOARD_DIM || y < 0)\n<     return OFF_BOARD;\n---\n>   //prophet generated patch\n>   if (1)\n>       return 0;\n>   if (x >= 19 || x < 0 || y >= 19 || y < 0)\n>       return OFF_BOARD;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n302,307c303,311\n<     for (u8 x = 0; x < BOARD_DIM; x++) {\n<       cgc_memset(sboard, 0, sizeof(sboard));\n<       if (cgc_get_color(frozen->board, x, y) == color && !cgc_has_liberty(frozen, sboard, x, y, color)) {\n<         cnt++;\n<         SET_BOARD(game->board, x, y, EMPTY);\n<       }\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     for (u8 x = 0; x < 19; x++) {\n>         cgc_memset(sboard, 0, sizeof (sboard));\n>         if (cgc_get_color(frozen->board, x, y) == color && !cgc_has_liberty(frozen, sboard, x, y, color)) {\n>             cnt++;\n>             (game->board[y][x] = EMPTY);\n>         }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n109a111,113\n>   //prophet generated patch\n>   if (1)\n>       return -1;\n111,118c115,122\n<     if (list->hash == hash) {\n<       return 1;\n<     } else if (list->next != list) {\n<       list = list->next;\n<       cnt++;\n<     } else {\n<       break;\n<     }\n---\n>       if (list->hash == hash) {\n>           return 1;\n>       } else if (list->next != list) {\n>           list = list->next;\n>           cnt++;\n>       } else {\n>           break;\n>       }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n95a97,99\n>   //prophet generated patch\n>   if (1)\n>       return;\n97c101\n<     error(1);\n---\n>       cgc_exit(1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n535c536,539\n<   cgc_fdprintf(STDOUT, \"Game Over \");\n---\n>   //prophet generated patch\n>   if (1)\n>       return;\n>   cgc_fdprintf(1, \"Game Over \");\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n110a112,114\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n112c116\n<       return 1;\n---\n>         return 1;\n114,115c118,119\n<       list = list->next;\n<       cnt++;\n---\n>         list = list->next;\n>         cnt++;\n117c121\n<       break;\n---\n>         break;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n745c746,751\n<       cgc_end_game(game, name, 2);\n---\n>       //prophet generated patch\n>       {\n>           if (1)\n>               return 0;\n>           cgc_end_game(game, name, 2);\n>       }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n159a161,163\n>   //prophet generated patch\n>   if (1)\n>       return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n116a118,120\n>       //prophet generated patch\n>       if (1)\n>           return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n257a259,261\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n276a278,280\n>       //prophet generated patch\n>       if (1)\n>           return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n302,307c303,311\n<     for (u8 x = 0; x < BOARD_DIM; x++) {\n<       cgc_memset(sboard, 0, sizeof(sboard));\n<       if (cgc_get_color(frozen->board, x, y) == color && !cgc_has_liberty(frozen, sboard, x, y, color)) {\n<         cnt++;\n<         SET_BOARD(game->board, x, y, EMPTY);\n<       }\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     for (u8 x = 0; x < 19; x++) {\n>         cgc_memset(sboard, 0, sizeof (sboard));\n>         if (cgc_get_color(frozen->board, x, y) == color && !cgc_has_liberty(frozen, sboard, x, y, color)) {\n>             cnt++;\n>             (game->board[y][x] = EMPTY);\n>         }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n113,115c114,118\n<     } else if (list->next != list) {\n<       list = list->next;\n<       cnt++;\n---\n>     } else //prophet generated patch\n> {\n>     if ((list->next != list) || 1) {\n>         list = list->next;\n>         cnt++;\n117c120\n<       break;\n---\n>         break;\n118a122\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n238,239c239,241\n<   if (sboard[y][x] == 1)\n<     return 0;\n---\n>   //prophet generated patch\n>   if ((sboard[y][x] == 1) && !1)\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n247,248c248,250\n<   if (u == EMPTY || d == EMPTY || l == EMPTY || r == EMPTY) {\n<     return 1;\n---\n>   //prophet generated patch\n>   if ((u == EMPTY || d == EMPTY || l == EMPTY || r == EMPTY) || 1) {\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n110a112,114\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n112c116\n<       return 1;\n---\n>         return 1;\n114,115c118,119\n<       list = list->next;\n<       cnt++;\n---\n>         list = list->next;\n>         cnt++;\n117c121\n<       break;\n---\n>         break;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n370,372c371,374\n<   if (cgc_has_happened(simulated, *game)) {\n<     cgc_free(simulated);\n<     return -1;\n---\n>   //prophet generated patch\n>   if ((cgc_has_happened(simulated, *game)) && !1) {\n>       cgc_free(simulated);\n>       return -1;\n374,379c376,381\n<     cgc_free(*game);\n<     *game = simulated;\n<     (*game)->used[color - 1]++;\n<     (*game)->caps[color - 1] += our_cap;\n<     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n<     return 0;\n---\n>       cgc_free(*game);\n>       *game = simulated;\n>       (*game)->used[color - 1]++;\n>       (*game)->caps[color - 1] += our_cap;\n>       (*game)->caps[(color == WHITE ? BLACK : WHITE) - 1] += thr_cap;\n>       return 0;\n381,382c383,384\n<     cgc_free(simulated);\n<     return 0;\n---\n>       cgc_free(simulated);\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n113a115,117\n>       //prophet generated patch\n>       if (1)\n>           return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n113a115,117\n>       //prophet generated patch\n>       if (1)\n>           return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n151,152c152,154\n<     if (board[y / BOARD_DIM][y % BOARD_DIM] != EMPTY) {\n<       h ^= ztable[y][board[y / BOARD_DIM][y % BOARD_DIM] - 1];\n---\n>     //prophet generated patch\n>     if ((board[y / 19][y % 19] != EMPTY) && !1) {\n>         h ^= ztable[y][board[y / 19][y % 19] - 1];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n304,306c305,308\n<       if (cgc_get_color(frozen->board, x, y) == color && !cgc_has_liberty(frozen, sboard, x, y, color)) {\n<         cnt++;\n<         SET_BOARD(game->board, x, y, EMPTY);\n---\n>       //prophet generated patch\n>       if ((cgc_get_color(frozen->board, x, y) == color && !cgc_has_liberty(frozen, sboard, x, y, color)) || 1) {\n>           cnt++;\n>           (game->board[y][x] = EMPTY);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n116a118,120\n>       //prophet generated patch\n>       if (1)\n>           return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n265a267,269\n>   //prophet generated patch\n>   if (1)\n>       return 0;\n267c271\n<     error(1);\n---\n>       cgc_exit(1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n336c337,339\n<       } else if (cur == BLACK) {\n---\n>       } else //prophet generated patch\n> {\n>     if ((cur == BLACK) || 1) {\n339c342,343\n<       }\n---\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n545c546,548\n<     break;\n---\n>     //prophet generated patch\n>     if (!1)\n>         break;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n236,237c237,239\n<   if (c == OFF_BOARD)\n<     return 0;\n---\n>   //prophet generated patch\n>   if ((c == OFF_BOARD) && !1)\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n303c304,307\n<       cgc_memset(sboard, 0, sizeof(sboard));\n---\n>       //prophet generated patch\n>       if (1)\n>           return -1;\n>       cgc_memset(sboard, 0, sizeof (sboard));\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n266,267c267,269\n<   if (!game || !sboard)\n<     error(1);\n---\n>   //prophet generated patch\n>   if ((!game || !sboard) || 1)\n>       cgc_exit(1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n273c274,275\n<   if (cur == color) {\n---\n>   //prophet generated patch\n>   if ((cur == color) || 1) {\n276c278\n<   } else if (cur == OTHER_PLAYER(color)) {\n---\n>   } else if (cur == (color == WHITE ? BLACK : WHITE)) {\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n333a335,337\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n273c274,275\n<   if (cur == color) {\n---\n>   //prophet generated patch\n>   if ((cur == color) && !1) {\n276c278\n<   } else if (cur == OTHER_PLAYER(color)) {\n---\n>   } else if (cur == (color == WHITE ? BLACK : WHITE)) {\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n373a375,377\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n333,335c334,337\n<       if (cur == WHITE) {\n<         *white += 1;\n<         continue;\n---\n>       //prophet generated patch\n>       if ((cur == WHITE) || 1) {\n>           *white += 1;\n>           continue;\n337,338c339,340\n<         *black += 1;\n<         continue;\n---\n>           *black += 1;\n>           continue;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n276,281c277,285\n<   } else if (cur == OTHER_PLAYER(color)) {\n<       sboard[y][x] = 1;\n<       return 0;\n<   } else if (cur == EMPTY) {\n<       sboard[y][x] = 1;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((cur == (color == WHITE ? BLACK : WHITE)) || 1) {\n>         sboard[y][x] = 1;\n>         return 0;\n>     } else if (cur == EMPTY) {\n>         sboard[y][x] = 1;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n113,115c114,118\n<     } else if (list->next != list) {\n<       list = list->next;\n<       cnt++;\n---\n>     } else //prophet generated patch\n> {\n>     if ((list->next != list) && !1) {\n>         list = list->next;\n>         cnt++;\n117c120\n<       break;\n---\n>         break;\n118a122\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n373,383c374,387\n<   } else if (play) {\n<     cgc_free(*game);\n<     *game = simulated;\n<     (*game)->used[color - 1]++;\n<     (*game)->caps[color - 1] += our_cap;\n<     (*game)->caps[OTHER_PLAYER(color) - 1] += thr_cap;\n<     return 0;\n<   } else {\n<     cgc_free(simulated);\n<     return 0;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((play) && !1) {\n>         cgc_free(*game);\n>         *game = simulated;\n>         (*game)->used[color - 1]++;\n>         (*game)->caps[color - 1] += our_cap;\n>         (*game)->caps[(color == WHITE ? BLACK : WHITE) - 1] += thr_cap;\n>         return 0;\n>     } else {\n>         cgc_free(simulated);\n>         return 0;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n549c550,553\n<   cgc_fdprintf(STDOUT, ((game->scores[BLACK - 1] > game->scores[WHITE - 1])) ? \"Winner, \" : \"Loser, \");\n---\n>   //prophet generated patch\n>   if (1)\n>       return;\n>   cgc_fdprintf(1, ((game->scores[BLACK - 1] > game->scores[WHITE - 1])) ? \"Winner, \" : \"Loser, \");\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n279,281c280,285\n<   } else if (cur == EMPTY) {\n<       sboard[y][x] = 1;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((cur == EMPTY) || 1) {\n>         sboard[y][x] = 1;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n336a338,340\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n553c554,557\n<   cgc_fdprintf(STDOUT, name);\n---\n>   //prophet generated patch\n>   if (1)\n>       return;\n>   cgc_fdprintf(1, name);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n253,259c254,263\n<   } else if (d == color && cgc_has_liberty(game, sboard, x, y - 1, color)) {\n<     return 1;\n<   } else if (l == color && cgc_has_liberty(game, sboard, x - 1, y, color)) {\n<     return 1;\n<   } else if (r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) {\n<     return 1;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((d == color && cgc_has_liberty(game, sboard, x, y - 1, color)) || 1) {\n>         return 1;\n>     } else if (l == color && cgc_has_liberty(game, sboard, x - 1, y, color)) {\n>         return 1;\n>     } else if (r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) {\n>         return 1;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n270,271c271,273\n<   if (cur == OFF_BOARD || sboard[y][x] == 1)\n<     return 1;\n---\n>   //prophet generated patch\n>   if ((cur == OFF_BOARD || sboard[y][x] == 1) && !1)\n>       return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n235a237,239\n>   //prophet generated patch\n>   if (1)\n>       return -1;\n237c241\n<     return 0;\n---\n>       return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n533a535,537\n>   //prophet generated patch\n>   if (1)\n>       return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n333,335c334,337\n<       if (cur == WHITE) {\n<         *white += 1;\n<         continue;\n---\n>       //prophet generated patch\n>       if ((cur == WHITE) && !1) {\n>           *white += 1;\n>           continue;\n337,338c339,340\n<         *black += 1;\n<         continue;\n---\n>           *black += 1;\n>           continue;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n253,259c254,263\n<   } else if (d == color && cgc_has_liberty(game, sboard, x, y - 1, color)) {\n<     return 1;\n<   } else if (l == color && cgc_has_liberty(game, sboard, x - 1, y, color)) {\n<     return 1;\n<   } else if (r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) {\n<     return 1;\n<   }\n---\n>   } else //prophet generated patch\n> {\n>     if ((d == color && cgc_has_liberty(game, sboard, x, y - 1, color)) && !1) {\n>         return 1;\n>     } else if (l == color && cgc_has_liberty(game, sboard, x - 1, y, color)) {\n>         return 1;\n>     } else if (r == color && cgc_has_liberty(game, sboard, x + 1, y, color)) {\n>         return 1;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n336c337,339\n<       } else if (cur == BLACK) {\n---\n>       } else //prophet generated patch\n> {\n>     if ((cur == BLACK) && !1) {\n339c342,343\n<       }\n---\n>     }\n> }\n"
      ]
    }
  ],
  "compilations": 134,
  "failed_compilations": 0,
  "outcomes": {
    "sanity_check": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "fault_localization": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 13
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 16
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 14
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 7
          }
        ]
      }
    },
    "f9c41ffb": {
      "compiles": [
        0
      ]
    },
    "714bd958": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "b4c14beb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "b769893b": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "d054565d": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "98d84724": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "124135ab": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "8fef3618": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "30718aba": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "52d785d7": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "bcdf8510": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "ae4e407c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "063da6e6": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "3c46347c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 2
          }
        ]
      }
    },
    "b48ed5bc": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "5249afb3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "0514306a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "efacb75e": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "1a5df964": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "364206d0": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "e536a6ab": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "d5f1be22": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f072f2a4": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 2
          }
        ]
      }
    },
    "45801e61": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "4e334a6c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "6575a2ff": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "bf10e09e": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ae5110b0": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0fed6438": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "cccb20b6": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "59cc1835": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "0f8fcd9d": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "149fd194": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "134b6a7b": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "06d36d6b": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "b8268343": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "6d51ba48": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "25c7e4ca": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "58144ea3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "ee937860": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "939ae6bb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "afa8d257": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 1
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "7f41a921": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "cba7103c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "4b502595": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "b453d901": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "79148c10": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "70657eba": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 2
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "7a11bc2b": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "c379ab8e": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "5ef39493": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "407fc8b8": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "c79913f2": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "038dc37a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "f09d615a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "3a0208f3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "09997a13": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1d87ef48": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "53f3ee5f": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "fe3cf891": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "e6274388": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "54c01455": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "126137d9": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "b94235c8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "da82bbec": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "875ffd43": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "b742e8fe": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "ad23b0bc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "bc3b0b39": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "ee549938": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "2a5ec924": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "fc9d697e": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "29ee496b": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "1fd4f762": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "67b0afaa": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "3931afba": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "9a0fbf15": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "7bcd77b3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "7d41a9e7": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "879e2600": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "48ab17de": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "f84daf94": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "29c01436": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "05afcc98": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "23f71959": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "af3acb39": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "b16c6e39": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "78111ca2": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "9237646a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "90e154b3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "645a6b90": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "fb73ea6a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "6613bb80": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "b776b974": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "94aedecb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "8443a54e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "a0290961": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "a2d6c1c3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 1
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "bb928608": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "a7589bca": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "d14d8416": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "a37473f8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "edfe2938": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "5ddd345a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "87184f4b": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "3a728c52": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 2
          }
        ]
      }
    },
    "bd8838e0": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "bcbf7867": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "7e6f9a73": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "6b95d835": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "35750d3b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "1e471f29": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "079a42a7": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "6a6519ff": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "f8008482": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "6af38494": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "0e56d313": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "b210c8f5": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "bfe6038f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "4538a14c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "faf6a61d": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "11c934a3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "d23f3b61": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "c081ec96": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "9e518382": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "b8ba6527": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "074abbcf": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "023d60e2": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "2ecb6b00": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    },
    "4497f5fb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "15392364": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 30
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1be392bf": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": []
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 47
          }
        ]
      }
    }
  },
  "neg_tests": 1,
  "pos_tests": 20,
  "passed_neg_tests": 42,
  "passed_pos_tests": 40,
  "failed_neg_tests": 91,
  "failed_pos_tests": 41,
  "duration": 3600.03107,
  "errors": [
    "Neg Processing: 21",
    "Processing: 0 : 1",
    "Processing: 1 : 2",
    "Processing: 2 : 3",
    "Processing: 3 : 4",
    "Processing: 4 : 5",
    "Processing: 5 : 6",
    "Processing: 6 : 7",
    "Processing: 7 : 8",
    "Processing: 8 : 9",
    "Processing: 9 : 10",
    "Processing: 10 : 11",
    "Processing: 11 : 12",
    "Processing: 12 : 13",
    "Processing: 13 : 14",
    "Processing: 14 : 15",
    "Processing: 15 : 16",
    "Processing: 16 : 17",
    "Processing: 17 : 18",
    "Processing: 18 : 19",
    "Processing: 19 : 20",
    "going to directory /tmp/Kali/Kaprica_Go_0/workdir/src",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/Kaprica_Go_0/workdir/src: 'linker' input unused",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash"
  ]
}