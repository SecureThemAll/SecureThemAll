{
  "repair_begin": "2021-05-07 05:00:21.468566",
  "repair_end": "2021-05-07 06:00:21.515472",
  "patches": [
    {
      "target_file": "src/service.c",
      "fix": "",
      "edits": [
        " \n92,93c93,96\n<         inst->op2 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         inst->op2 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n312c313,317\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n---\n>             //prophet generated patch\n>             if (!1)\n>               case 32:\n>                 *dst = op1 * op2;\n>  break;\n",
        " \n159,161c160,162\n<         if (inst.opcode & INST_MASK_OP2 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op2)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n---\n>         //prophet generated patch\n>         if ((inst.opcode & 8 && (2048 + 2048 - sizeof(unsigned int) < inst.op2)) && !1) {\n>             ret = -27;\n",
        " \n383,388c384,388\n<     if (BYTECODE_SZ - sizeof(uint32_t) < bytecode_len) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] BYTECODE_SZ < bytecode_len; bailing...\\n\");\n< #endif\n<         goto bail;\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (2048 - sizeof(unsigned int) < bytecode_len) {\n>             goto bail;\n>         }\n",
        " \n174a176,178\n> //prophet generated patch\n> if (1)\n>     return -1;\n176,183c180\n< #ifdef DEBUG\n<     if (ERRNO_VFRY_REJECT_OFF == ret) {\n<         fprintf(stderr, \n<             \"[D] bytecode_vrfy() | REJECT due to offset check\\n\");\n<     }\n< #endif\n< \n<     return ret;\n---\n> return ret;\n",
        " \n46,53c47,49\n<     if (inst_len > len) {\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | insufficient bytes provided; \"\n<             \"required: 0x%02x (%d), available: 0x%02x (%d)\\n\", \n<             inst_len, inst_len, len, len);\n< #endif\n<         ret = ERRNO_INSUFFICIENT_BYTES;\n---\n>     //prophet generated patch\n>     if ((inst_len > len) || 1) {\n>         ret = -32;\n",
        " \n81,98c82,88\n<     if (inst->opcode & INST_MASK_OP2) { \n<         inst->op2 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif\n<     } else { \n<         inst->op2 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (inst->opcode & 8) {\n>         inst->op2 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>     } else {\n>         inst->op2 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n309,326c310,335\n<         switch(inst.opcode & INST_MASK_OPCODE) {\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n<             case OPCODE_SUB: *dst = op1 - op2; break;\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n<             case OPCODE_DIV: \n<                 if (0 == op2) { op2 = 0xf000f000; }\n<                 *dst = op1 / op2; \n<                 break;\n<             // NOTE: that OUT instructions ignore both op1 and op2.\n<             case OPCODE_OUT: *out = acc; break;\n<             default:\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | INVALID opcode; bailing...\\n\");\n< #endif  \n<                 ret = ERRNO_INVALID_OPCODE;\n<                 goto bail;\n<                 break;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         switch (inst.opcode & 240) {\n>           case 0:\n>             *dst = op1 + op2;\n>             break;\n>           case 16:\n>             *dst = op1 - op2;\n>             break;\n>           case 32:\n>             *dst = op1 * op2;\n>             break;\n>           case 48:\n>             if (0 == op2) {\n>                 op2 = 4026593280U;\n>             }\n>             *dst = op1 / op2;\n>             break;\n>           case 240:\n>             *out = acc;\n>             break;\n>           default:\n>             ret = -62;\n>             goto bail;\n>             break;\n",
        " \n303c304,306\n<             op2 = inst.op2;\n---\n>             //prophet generated patch\n>             if (!1)\n>                 op2 = inst.op2;\n",
        " \n312c313,318\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n---\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n>             case 32:\n>             *dst = op1 * op2;\n>  break;\n",
        " \n125a127,129\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        " \n110a112,114\n> //prophet generated patch\n> if (1)\n>     return -1;\n112c116\n<     return ret;\n---\n> return ret;\n",
        " \n391c392,394\n<     rx_bytes = 0;\n---\n>     //prophet generated patch\n>     if (!1)\n>         rx_bytes = 0;\n",
        " \n414,417c415,418\n<     if (SUCCESS != (ret = cgc_bytecode_exec(space+SCRATCH_SZ, bytecode_len, space, &out))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode execution failed; bailing...\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (0 != (ret = cgc_bytecode_exec(space + 2048, bytecode_len, space, &out))) {\n",
        " \n232,233c233,235\n<         if (inst.opcode & INST_MASK_DST) {\n<             dst = (uint32_t *)(scratch + inst.op1);\n---\n>         //prophet generated patch\n>         if ((inst.opcode & 1) || 1) {\n>             dst = (unsigned int *)(scratch + inst.op1);\n",
        " \n81,98c82,88\n<     if (inst->opcode & INST_MASK_OP2) { \n<         inst->op2 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif\n<     } else { \n<         inst->op2 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (inst->opcode & 8) {\n>         inst->op2 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>     } else {\n>         inst->op2 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n159,161c160,164\n<         if (inst.opcode & INST_MASK_OP2 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op2)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         if (inst.opcode & 8 && (2048 + 2048 - sizeof(unsigned int) < inst.op2)) {\n>             ret = -27;\n",
        " \n292,301c293,297\n<         if (inst.opcode & INST_MASK_OP2) {\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | scratch + inst.op2 = 0x%08x; op2 = *(scratch + inst.op2) = 0x%08x\\n\", \n<                 scratch + inst.op2, op2);\n< #endif  \n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         if (inst.opcode & 8) {\n>             op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n",
        " \n392,396c393,395\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)(space+SCRATCH_SZ), bytecode_len, &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_receive_all(0, (void *)(space + 2048), bytecode_len, &rx_bytes))) || 1) {\n>         ret = -63;\n",
        " \n390a392,394\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        " \n251a253,255\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n",
        " \n150,154c151,156\n<         if (inst.opcode & INST_MASK_OP1 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op1)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n<             goto bail;\n<         }\n---\n>         //prophet generated patch\n>         if (!1)\n>             if (inst.opcode & 4 && (2048 + 2048 - sizeof(unsigned int) < inst.op1)) {\n>                 ret = -27;\n>                 goto bail;\n>             }\n",
        " \n36a38,40\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        " \n232,236c233,239\n<         if (inst.opcode & INST_MASK_DST) {\n<             dst = (uint32_t *)(scratch + inst.op1);\n<         } else {\n<             dst = &acc;\n<         }\n---\n>         //prophet generated patch\n>         if (!1)\n>             if (inst.opcode & 1) {\n>                 dst = (unsigned int *)(scratch + inst.op1);\n>             } else {\n>                 dst = &acc;\n>             }\n",
        " \n43c44,47\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP2) { //prophet generated patch\n> if (!1)\n>     inst_len += 4;\n>  } else { inst_len += INST_IMM_SZ; }\n",
        " \n413c414,417\n<     uint32_t out = OUT_DEFAULT;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned int out = 3735928559U;\n",
        " \n310c311,315\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n---\n>             //prophet generated patch\n>             if (!1)\n>               case 0:\n>                 *dst = op1 + op2;\n>  break;\n",
        " \n199c200,203\n<     uint32_t acc = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned int acc = 0;\n",
        " \n59,79c60,68\n<     if (inst->opcode & INST_MASK_OP1) { \n<         inst->op1 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;  \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif  \n<         cursor += 4;  \n<     } else { \n<         inst->op1 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n<         cursor += 2;\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (inst->opcode & 4) {\n>             inst->op1 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>             cursor += 4;\n>         } else {\n>             inst->op1 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n>             cursor += 2;\n>         }\n",
        " \n125c126,129\n<     uint8_t *cursor = bytes;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned char *cursor = bytes;\n",
        " \n130,162c131,149\n<     while (len) {\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"\\n[D] bytecode_vrfy() | instruction #%d\\n\", inst_count);\n< #endif\n< \n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_vrfy() | non-SUCCESS from inst_decode' bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n<             goto bail;\n<         }\n< \n<         // Verify offsets fall within allowed bounds.\n< \n< \n< \n<         if (inst.opcode & INST_MASK_OP1 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op1)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n<             goto bail;\n<         }\n< \n< \n< \n< \n<         if (inst.opcode & INST_MASK_OP2 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op2)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n<             goto bail;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     while (len)\n>         {\n>             if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>                 ret = -67;\n>                 goto bail;\n>             }\n>             if (inst.opcode & 4 && (2048 + 2048 - sizeof(unsigned int) < inst.op1)) {\n>                 ret = -27;\n>                 goto bail;\n>             }\n>             if (inst.opcode & 8 && (2048 + 2048 - sizeof(unsigned int) < inst.op2)) {\n>                 ret = -27;\n>                 goto bail;\n>             }\n>             cursor += inst.len;\n>             len -= inst.len;\n164,173d150\n< \n<         // These *shouldn't* under/overflow due to (inst_len > len) check in inst_decode().\n<         cursor += inst.len;\n<         len -= inst.len;\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_vrfy() | len = %d\\n\", len);\n<         inst_count++;\n< #endif\n<     }\n",
        " \n81,98c82,86\n<     if (inst->opcode & INST_MASK_OP2) { \n<         inst->op2 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif\n<     } else { \n<         inst->op2 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n---\n>     //prophet generated patch\n>     if ((inst->opcode & 8) && !1) {\n>         inst->op2 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>     } else {\n>         inst->op2 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n414,419c415,419\n<     if (SUCCESS != (ret = cgc_bytecode_exec(space+SCRATCH_SZ, bytecode_len, space, &out))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode execution failed; bailing...\\n\");\n< #endif\n<         goto bail;\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (0 != (ret = cgc_bytecode_exec(space + 2048, bytecode_len, space, &out))) {\n>             goto bail;\n>         }\n",
        " \n166a168,170\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n",
        " \n165a167,169\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n",
        " \n125a127,129\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        " \n252c253,255\n<             op1 = acc;\n---\n>             //prophet generated patch\n>             if (!1)\n>                 op1 = acc;\n",
        " \n254,262c255,259\n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n---\n>         } else //prophet generated patch\n> {\n>     if (!1)\n>         if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>             ret = -62;\n264,267c261\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n---\n>         } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n269,282c263,265\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n---\n>         } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>             if (inst.opcode & 4) {\n>                 op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n284d266\n<                 // op1 is an immediate.\n287a270\n> }\n",
        " \n92,93c93,95\n<         inst->op2 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n---\n>         //prophet generated patch\n>         if (!1)\n>             inst->op2 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n127c128,131\n<     uint8_t *dst = NULL;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned char *dst = (0);\n",
        " \n198c199,202\n<     uint8_t *cursor = bytes;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned char *cursor = bytes;\n",
        " \n369a371,373\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        " \n293,296c294,297\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n---\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n>             op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n",
        " \n159,161c160,162\n<         if (inst.opcode & INST_MASK_OP2 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op2)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n---\n>         //prophet generated patch\n>         if ((inst.opcode & 8 && (2048 + 2048 - sizeof(unsigned int) < inst.op2)) || 1) {\n>             ret = -27;\n",
        " \n159,161c160,164\n<         if (inst.opcode & INST_MASK_OP2 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op2)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         if (inst.opcode & 8 && (2048 + 2048 - sizeof(unsigned int) < inst.op2)) {\n>             ret = -27;\n",
        " \n414,417c415,416\n<     if (SUCCESS != (ret = cgc_bytecode_exec(space+SCRATCH_SZ, bytecode_len, space, &out))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode execution failed; bailing...\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_bytecode_exec(space + 2048, bytecode_len, space, &out))) || 1) {\n",
        " \n130,173c131,149\n<     while (len) {\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"\\n[D] bytecode_vrfy() | instruction #%d\\n\", inst_count);\n< #endif\n< \n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_vrfy() | non-SUCCESS from inst_decode' bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n<             goto bail;\n<         }\n< \n<         // Verify offsets fall within allowed bounds.\n< \n< \n< \n<         if (inst.opcode & INST_MASK_OP1 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op1)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n<             goto bail;\n<         }\n< \n< \n< \n< \n<         if (inst.opcode & INST_MASK_OP2 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op2)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n<             goto bail;\n<         }\n< \n<         // These *shouldn't* under/overflow due to (inst_len > len) check in inst_decode().\n<         cursor += inst.len;\n<         len -= inst.len;\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_vrfy() | len = %d\\n\", len);\n<         inst_count++;\n< #endif\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         while (len)\n>             {\n>                 if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>                     ret = -67;\n>                     goto bail;\n>                 }\n>                 if (inst.opcode & 4 && (2048 + 2048 - sizeof(unsigned int) < inst.op1)) {\n>                     ret = -27;\n>                     goto bail;\n>                 }\n>                 if (inst.opcode & 8 && (2048 + 2048 - sizeof(unsigned int) < inst.op2)) {\n>                     ret = -27;\n>                     goto bail;\n>                 }\n>                 cursor += inst.len;\n>                 len -= inst.len;\n>             }\n",
        " \n254,286c255,268\n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n<             goto bail;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n---\n>         } else //prophet generated patch\n> {\n>     if (1)\n>         return -1;\n>     if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>         ret = -62;\n>         goto bail;\n>     } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n>         op1 = acc;\n>     } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>         if (inst.opcode & 4) {\n>             op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>         } else {\n>             op1 = inst.op1;\n287a270,271\n>     }\n> }\n",
        " \n42c43,50\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (inst->opcode & 4) {\n>         inst_len += 4;\n>     } else {\n>         inst_len += 2;\n>     }\n",
        " \n292,304c293,299\n<         if (inst.opcode & INST_MASK_OP2) {\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | scratch + inst.op2 = 0x%08x; op2 = *(scratch + inst.op2) = 0x%08x\\n\", \n<                 scratch + inst.op2, op2);\n< #endif  \n<         } else {\n<             op2 = inst.op2;\n<         }\n---\n>         //prophet generated patch\n>         if (!1)\n>             if (inst.opcode & 8) {\n>                 op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n>             } else {\n>                 op2 = inst.op2;\n>             }\n",
        " \n232,233c233,237\n<         if (inst.opcode & INST_MASK_DST) {\n<             dst = (uint32_t *)(scratch + inst.op1);\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         if (inst.opcode & 1) {\n>             dst = (unsigned int *)(scratch + inst.op1);\n",
        " \n233c234,237\n<             dst = (uint32_t *)(scratch + inst.op1);\n---\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n>             dst = (unsigned int *)(scratch + inst.op1);\n",
        " \n292,301c293,297\n<         if (inst.opcode & INST_MASK_OP2) {\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | scratch + inst.op2 = 0x%08x; op2 = *(scratch + inst.op2) = 0x%08x\\n\", \n<                 scratch + inst.op2, op2);\n< #endif  \n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         if (inst.opcode & 8) {\n>             op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n",
        " \n254,286c255,268\n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n<             goto bail;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n---\n>         } else //prophet generated patch\n> {\n>     if (1)\n>         return 0;\n>     if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>         ret = -62;\n>         goto bail;\n>     } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n>         op1 = acc;\n>     } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>         if (inst.opcode & 4) {\n>             op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>         } else {\n>             op1 = inst.op1;\n287a270,271\n>     }\n> }\n",
        " \n371,375c372,376\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)&bytecode_len, sizeof(bytecode_len), &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode_len\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (0 != (ret = cgc_receive_all(0, (void *)&bytecode_len, sizeof (bytecode_len), &rx_bytes))) {\n>         ret = -63;\n",
        " \n244,249c245,247\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>             //prophet generated patch\n>             if ((!(inst.opcode & 4)) || 1) {\n>                 ret = -62;\n",
        " \n293,296c294,296\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n---\n>             //prophet generated patch\n>             if (!1)\n>                 op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n",
        " \n267a269,271\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n",
        " \n204,249c205,211\n<     while (len) {\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"\\n[D] bytecode_exec() | instruction #%d\\n\", inst_count);\n< #endif\n< \n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | non-SUCCESS from inst_decode; bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n<             goto bail;\n<         }\n< \n<         ////\n<         // Error Tree\n<         ////\n<         // INST_MASK_DST\n<         //  +- INST_MASK_ACC\n<         //      +- INST_MASK_OP1\n<         //      +- !INST_MASK_OP1: ERROR\n<         //  +- !INST_MASK_ACC: ERROR\n< \n<         ////\n<         // Get dst.\n<         ////\n<         if (inst.opcode & INST_MASK_DST) {\n<             dst = (uint32_t *)(scratch + inst.op1);\n<         } else {\n<             dst = &acc;\n<         }\n< \n<         ////\n<         // Get op1.\n<         ////\n<         if (inst.opcode & INST_MASK_DST && inst.opcode & INST_MASK_ACC) {\n<             // The dst is a memory offset pointed to by op1 (meaning INST_MASK_OP1 must be set).\n<             // The arith operands are ACC and op2.\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     while (len)\n>         {\n>             if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>                 ret = -67;\n252,282c214,215\n<             op1 = acc;\n< \n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n<             goto bail;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n---\n>             if (inst.opcode & 1) {\n>                 dst = (unsigned int *)(scratch + inst.op1);\n284,285c217\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n---\n>                 dst = &acc;\n287,315c219,244\n<         }\n< \n<         ////\n<         // Get op2.\n<         ////\n<         if (inst.opcode & INST_MASK_OP2) {\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | scratch + inst.op2 = 0x%08x; op2 = *(scratch + inst.op2) = 0x%08x\\n\", \n<                 scratch + inst.op2, op2);\n< #endif  \n<         } else {\n<             op2 = inst.op2;\n<         }\n< \n<         ////\n<         // Do the operation.\n<         ////\n<         switch(inst.opcode & INST_MASK_OPCODE) {\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n<             case OPCODE_SUB: *dst = op1 - op2; break;\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n<             case OPCODE_DIV: \n<                 if (0 == op2) { op2 = 0xf000f000; }\n<                 *dst = op1 / op2; \n---\n>             if (inst.opcode & 1 && inst.opcode & 2) {\n>                 if (!(inst.opcode & 4)) {\n>                     ret = -62;\n>                     goto bail;\n>                 }\n>                 op1 = acc;\n>             } else if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>                 ret = -62;\n>                 goto bail;\n>             } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n>                 op1 = acc;\n>             } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>                 if (inst.opcode & 4) {\n>                     op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>                 } else {\n>                     op1 = inst.op1;\n>                 }\n>             }\n>             if (inst.opcode & 8) {\n>                 op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n>             } else {\n>                 op2 = inst.op2;\n>             }\n>             switch (inst.opcode & 240) {\n>               case 0:\n>                 *dst = op1 + op2;\n317,324c246,262\n<             // NOTE: that OUT instructions ignore both op1 and op2.\n<             case OPCODE_OUT: *out = acc; break;\n<             default:\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | INVALID opcode; bailing...\\n\");\n< #endif  \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>               case 16:\n>                 *dst = op1 - op2;\n>                 break;\n>               case 32:\n>                 *dst = op1 * op2;\n>                 break;\n>               case 48:\n>                 if (0 == op2) {\n>                     op2 = 4026593280U;\n>                 }\n>                 *dst = op1 / op2;\n>                 break;\n>               case 240:\n>                 *out = acc;\n>                 break;\n>               default:\n>                 ret = -62;\n326a265,267\n>             }\n>             cursor += inst.len;\n>             len -= inst.len;\n328,342d268\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] bytecode_exec() | dst = 0x%08x; *dst = 0x%08x\\n\", dst, *dst);\n< #endif  \n< \n<         // These *shouldn't* under/overflow due to (inst_len > len) check in inst_decode().\n<         cursor += inst.len;\n<         len -= inst.len;\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_exec() | #%04d: acc = 0x%08x\\n\", inst_count++, acc);\n<         fprintf(stderr, \"[D] bytecode_exec() | len = %d\\n\", len);\n< #endif\n<     }\n",
        " \n71,72c72,75\n<         inst->op1 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         inst->op1 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n334a336,338\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n",
        " \n42c43,47\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP1) { //prophet generated patch\n> if (1)\n>     return 0;\n> inst_len += 4;\n>  } else { inst_len += INST_IMM_SZ; }\n",
        " \n358,363c359,363\n<     if (SUCCESS != (ret = cgc_allocate(SCRATCH_SZ + BYTECODE_SZ, FALSE, (void **)&space))) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] allocate()\\n\");\n< #endif\n<         return ret;\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (0 != (ret = cgc_allocate(2048 + 2048, 0, (void **)&space))) {\n>             return ret;\n>         }\n",
        " \n401,404c402,405\n<     if (SUCCESS != (ret = cgc_bytecode_vrfy(space+SCRATCH_SZ, bytecode_len))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_vrfy(): REJECT\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (0 != (ret = cgc_bytecode_vrfy(space + 2048, bytecode_len))) {\n",
        " \n358,361c359,360\n<     if (SUCCESS != (ret = cgc_allocate(SCRATCH_SZ + BYTECODE_SZ, FALSE, (void **)&space))) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] allocate()\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_allocate(2048 + 2048, 0, (void **)&space))) && !1) {\n",
        " \n211,218c212,217\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | non-SUCCESS from inst_decode; bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n<             goto bail;\n<         }\n---\n>         //prophet generated patch\n>         if (!1)\n>             if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>                 ret = -67;\n>                 goto bail;\n>             }\n",
        " \n41c42,45\n<     uint8_t inst_len = 1;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned char inst_len = 1;\n",
        " \n312c313,318\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n---\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n>             case 32:\n>             *dst = op1 * op2;\n>  break;\n",
        " \n334a336,338\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n",
        " \n78c79,81\n<         cursor += 2;\n---\n>         //prophet generated patch\n>         if (!1)\n>             cursor += 2;\n",
        " \n110a112,114\n> //prophet generated patch\n> if (1)\n>     return 0;\n112c116\n<     return ret;\n---\n> return ret;\n",
        " \n211,216c212,216\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | non-SUCCESS from inst_decode; bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>             ret = -67;\n",
        " \n336c337,339\n<         len -= inst.len;\n---\n>         //prophet generated patch\n>         if (!1)\n>             len -= inst.len;\n",
        " \n43c44,48\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP2) { //prophet generated patch\n> if (1)\n>     return 0;\n> inst_len += 4;\n>  } else { inst_len += INST_IMM_SZ; }\n",
        " \n137,142c138,142\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_vrfy() | non-SUCCESS from inst_decode' bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>             ret = -67;\n",
        " \n267a269,271\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n",
        " \n69c70,73\n<         cursor += 4;  \n---\n>         //prophet generated patch\n>         if (!1)\n>             cursor += 4;\n>   \n",
        " \n234a236,238\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n",
        " \n211,216c212,214\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | non-SUCCESS from inst_decode; bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n---\n>         //prophet generated patch\n>         if ((0 != (ret = cgc_inst_decode(cursor, len, &inst))) || 1) {\n>             ret = -67;\n",
        " \n82,85c83,86\n<         inst->op2 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         inst->op2 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n",
        " \n233c234,237\n<             dst = (uint32_t *)(scratch + inst.op1);\n---\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n>             dst = (unsigned int *)(scratch + inst.op1);\n",
        " \n232,233c233,237\n<         if (inst.opcode & INST_MASK_DST) {\n<             dst = (uint32_t *)(scratch + inst.op1);\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         if (inst.opcode & 1) {\n>             dst = (unsigned int *)(scratch + inst.op1);\n",
        " \n42c43,47\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP1) { //prophet generated patch\n> if (1)\n>     return -1;\n> inst_len += 4;\n>  } else { inst_len += INST_IMM_SZ; }\n",
        " \n265,286c266,276\n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n---\n>         } else //prophet generated patch\n> {\n>     if (1)\n>         return 0;\n>     if (!(inst.opcode & 1) && inst.opcode & 2) {\n>         op1 = acc;\n>     } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>         if (inst.opcode & 4) {\n>             op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>         } else {\n>             op1 = inst.op1;\n287a278,279\n>     }\n> }\n",
        " \n150,152c151,155\n<         if (inst.opcode & INST_MASK_OP1 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op1)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         if (inst.opcode & 4 && (2048 + 2048 - sizeof(unsigned int) < inst.op1)) {\n>             ret = -27;\n",
        " \n401,404c402,403\n<     if (SUCCESS != (ret = cgc_bytecode_vrfy(space+SCRATCH_SZ, bytecode_len))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_vrfy(): REJECT\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_bytecode_vrfy(space + 2048, bytecode_len))) && !1) {\n",
        " \n369a371,373\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        " \n118c119,122\n<     int ret = SUCCESS;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     int ret = 0;\n",
        " \n302a304,306\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n",
        " \n358,361c359,360\n<     if (SUCCESS != (ret = cgc_allocate(SCRATCH_SZ + BYTECODE_SZ, FALSE, (void **)&space))) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] allocate()\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_allocate(2048 + 2048, 0, (void **)&space))) || 1) {\n",
        " \n77a79,81\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n",
        " \n292,301c293,295\n<         if (inst.opcode & INST_MASK_OP2) {\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | scratch + inst.op2 = 0x%08x; op2 = *(scratch + inst.op2) = 0x%08x\\n\", \n<                 scratch + inst.op2, op2);\n< #endif  \n---\n>         //prophet generated patch\n>         if ((inst.opcode & 8) || 1) {\n>             op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n",
        " \n241,249c242,247\n<         if (inst.opcode & INST_MASK_DST && inst.opcode & INST_MASK_ACC) {\n<             // The dst is a memory offset pointed to by op1 (meaning INST_MASK_OP1 must be set).\n<             // The arith operands are ACC and op2.\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         if (inst.opcode & 1 && inst.opcode & 2) {\n>             if (!(inst.opcode & 4)) {\n>                 ret = -62;\n253,262c251,252\n< \n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n---\n>         } else if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>             ret = -62;\n264,267c254\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n---\n>         } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n269,282c256,258\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n---\n>         } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>             if (inst.opcode & 4) {\n>                 op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n284d259\n<                 // op1 is an immediate.\n",
        " \n43c44,49\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if ((inst->opcode & 8) || 1) {\n>         inst_len += 4;\n>     } else {\n>         inst_len += 2;\n>     }\n",
        " \n335c336,338\n<         cursor += inst.len;\n---\n>         //prophet generated patch\n>         if (!1)\n>             cursor += inst.len;\n",
        " \n130,162c131,149\n<     while (len) {\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"\\n[D] bytecode_vrfy() | instruction #%d\\n\", inst_count);\n< #endif\n< \n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_vrfy() | non-SUCCESS from inst_decode' bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n<             goto bail;\n<         }\n< \n<         // Verify offsets fall within allowed bounds.\n< \n< \n< \n<         if (inst.opcode & INST_MASK_OP1 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op1)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n<             goto bail;\n<         }\n< \n< \n< \n< \n<         if (inst.opcode & INST_MASK_OP2 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op2)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n<             goto bail;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     while (len)\n>         {\n>             if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>                 ret = -67;\n>                 goto bail;\n>             }\n>             if (inst.opcode & 4 && (2048 + 2048 - sizeof(unsigned int) < inst.op1)) {\n>                 ret = -27;\n>                 goto bail;\n>             }\n>             if (inst.opcode & 8 && (2048 + 2048 - sizeof(unsigned int) < inst.op2)) {\n>                 ret = -27;\n>                 goto bail;\n>             }\n>             cursor += inst.len;\n>             len -= inst.len;\n164,173d150\n< \n<         // These *shouldn't* under/overflow due to (inst_len > len) check in inst_decode().\n<         cursor += inst.len;\n<         len -= inst.len;\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_vrfy() | len = %d\\n\", len);\n<         inst_count++;\n< #endif\n<     }\n",
        " \n45a47,49\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n47,53c51\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | insufficient bytes provided; \"\n<             \"required: 0x%02x (%d), available: 0x%02x (%d)\\n\", \n<             inst_len, inst_len, len, len);\n< #endif\n<         ret = ERRNO_INSUFFICIENT_BYTES;\n---\n>         ret = -32;\n",
        " \n81,99c82,88\n<     if (inst->opcode & INST_MASK_OP2) { \n<         inst->op2 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif\n<     } else { \n<         inst->op2 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (inst->opcode & 8) {\n>             inst->op2 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>         } else {\n>             inst->op2 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n>         }\n",
        " \n201c202,205\n<     uint32_t op2 = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned int op2 = 0;\n",
        " \n42c43,48\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if ((inst->opcode & 4) || 1) {\n>         inst_len += 4;\n>     } else {\n>         inst_len += 2;\n>     }\n",
        " \n81,98c82,86\n<     if (inst->opcode & INST_MASK_OP2) { \n<         inst->op2 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif\n<     } else { \n<         inst->op2 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op2 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n---\n>     //prophet generated patch\n>     if ((inst->opcode & 8) || 1) {\n>         inst->op2 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>     } else {\n>         inst->op2 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n241,249c242,247\n<         if (inst.opcode & INST_MASK_DST && inst.opcode & INST_MASK_ACC) {\n<             // The dst is a memory offset pointed to by op1 (meaning INST_MASK_OP1 must be set).\n<             // The arith operands are ACC and op2.\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         if (inst.opcode & 1 && inst.opcode & 2) {\n>             if (!(inst.opcode & 4)) {\n>                 ret = -62;\n253,262c251,252\n< \n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n---\n>         } else if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>             ret = -62;\n264,267c254\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n---\n>         } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n269,282c256,258\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n---\n>         } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>             if (inst.opcode & 4) {\n>                 op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n284d259\n<                 // op1 is an immediate.\n",
        " \n57a59,61\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        " \n42c43,49\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (inst->opcode & 4) {\n>             inst_len += 4;\n>         } else {\n>             inst_len += 2;\n>         }\n",
        " \n268c269,271\n<             op1 = acc;\n---\n>             //prophet generated patch\n>             if (!1)\n>                 op1 = acc;\n",
        " \n369c370,373\n<     uint16_t bytecode_len = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned short bytecode_len = 0;\n",
        " \n414,417c415,416\n<     if (SUCCESS != (ret = cgc_bytecode_exec(space+SCRATCH_SZ, bytecode_len, space, &out))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode execution failed; bailing...\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_bytecode_exec(space + 2048, bytecode_len, space, &out))) && !1) {\n",
        " \n265,286c266,274\n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n---\n>         } else //prophet generated patch\n> {\n>     if ((!(inst.opcode & 1) && inst.opcode & 2) || 1) {\n>         op1 = acc;\n>     } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>         if (inst.opcode & 4) {\n>             op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>         } else {\n>             op1 = inst.op1;\n287a276,277\n>     }\n> }\n",
        " \n265,286c266,274\n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n---\n>         } else //prophet generated patch\n> {\n>     if ((!(inst.opcode & 1) && inst.opcode & 2) && !1) {\n>         op1 = acc;\n>     } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>         if (inst.opcode & 4) {\n>             op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>         } else {\n>             op1 = inst.op1;\n287a276,277\n>     }\n> }\n",
        " \n335a337,339\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n",
        " \n92,93c93,96\n<         inst->op2 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         inst->op2 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n293,296c294,297\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n---\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n>             op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n",
        " \n413c414,417\n<     uint32_t out = OUT_DEFAULT;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned int out = 3735928559U;\n",
        " \n77a79,81\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n",
        " \n137,142c138,140\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_vrfy() | non-SUCCESS from inst_decode' bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n---\n>         //prophet generated patch\n>         if ((0 != (ret = cgc_inst_decode(cursor, len, &inst))) && !1) {\n>             ret = -67;\n",
        " \n265,286c266,276\n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n---\n>         } else //prophet generated patch\n> {\n>     if (1)\n>         return -1;\n>     if (!(inst.opcode & 1) && inst.opcode & 2) {\n>         op1 = acc;\n>     } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>         if (inst.opcode & 4) {\n>             op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>         } else {\n>             op1 = inst.op1;\n287a278,279\n>     }\n> }\n",
        " \n36c37,40\n<     uint32_t cursor = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned int cursor = 0;\n",
        " \n235c236,238\n<             dst = &acc;\n---\n>             //prophet generated patch\n>             if (!1)\n>                 dst = &acc;\n",
        " \n36c37,40\n<     uint32_t cursor = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned int cursor = 0;\n",
        " \n309,326c310,335\n<         switch(inst.opcode & INST_MASK_OPCODE) {\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n<             case OPCODE_SUB: *dst = op1 - op2; break;\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n<             case OPCODE_DIV: \n<                 if (0 == op2) { op2 = 0xf000f000; }\n<                 *dst = op1 / op2; \n<                 break;\n<             // NOTE: that OUT instructions ignore both op1 and op2.\n<             case OPCODE_OUT: *out = acc; break;\n<             default:\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | INVALID opcode; bailing...\\n\");\n< #endif  \n<                 ret = ERRNO_INVALID_OPCODE;\n<                 goto bail;\n<                 break;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         switch (inst.opcode & 240) {\n>           case 0:\n>             *dst = op1 + op2;\n>             break;\n>           case 16:\n>             *dst = op1 - op2;\n>             break;\n>           case 32:\n>             *dst = op1 * op2;\n>             break;\n>           case 48:\n>             if (0 == op2) {\n>                 op2 = 4026593280U;\n>             }\n>             *dst = op1 / op2;\n>             break;\n>           case 240:\n>             *out = acc;\n>             break;\n>           default:\n>             ret = -62;\n>             goto bail;\n>             break;\n",
        " \n43c44,51\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (inst->opcode & 8) {\n>         inst_len += 4;\n>     } else {\n>         inst_len += 2;\n>     }\n",
        " \n41c42,45\n<     uint8_t inst_len = 1;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned char inst_len = 1;\n",
        " \n202c203,206\n<     uint32_t *dst = NULL;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned int *dst = (0);\n",
        " \n371,377c372,377\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)&bytecode_len, sizeof(bytecode_len), &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode_len\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n<         goto bail;\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (0 != (ret = cgc_receive_all(0, (void *)&bytecode_len, sizeof (bytecode_len), &rx_bytes))) {\n>             ret = -63;\n>             goto bail;\n>         }\n",
        " \n292,301c293,295\n<         if (inst.opcode & INST_MASK_OP2) {\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | scratch + inst.op2 = 0x%08x; op2 = *(scratch + inst.op2) = 0x%08x\\n\", \n<                 scratch + inst.op2, op2);\n< #endif  \n---\n>         //prophet generated patch\n>         if ((inst.opcode & 8) && !1) {\n>             op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n",
        " \n244,249c245,247\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>             //prophet generated patch\n>             if ((!(inst.opcode & 4)) && !1) {\n>                 ret = -62;\n",
        " \n241,249c242,245\n<         if (inst.opcode & INST_MASK_DST && inst.opcode & INST_MASK_ACC) {\n<             // The dst is a memory offset pointed to by op1 (meaning INST_MASK_OP1 must be set).\n<             // The arith operands are ACC and op2.\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>         //prophet generated patch\n>         if ((inst.opcode & 1 && inst.opcode & 2) && !1) {\n>             if (!(inst.opcode & 4)) {\n>                 ret = -62;\n253,262c249,250\n< \n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n---\n>         } else if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>             ret = -62;\n264,267c252\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n---\n>         } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n269,282c254,256\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n---\n>         } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>             if (inst.opcode & 4) {\n>                 op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n284d257\n<                 // op1 is an immediate.\n",
        " \n137,142c138,142\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_vrfy() | non-SUCCESS from inst_decode' bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>             ret = -67;\n",
        " \n35c36,39\n<     int ret = SUCCESS;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     int ret = 0;\n",
        " \n37c38,40\n<     inst->opcode = bytes[cursor];\n---\n>     //prophet generated patch\n>     if (!1)\n>         inst->opcode = bytes[cursor];\n",
        " \n42c43,47\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { //prophet generated patch\n> if (1)\n>     return -1;\n> inst_len += 2;\n>  }\n",
        " \n251a253,255\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n",
        " \n201c202,205\n<     uint32_t op2 = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned int op2 = 0;\n",
        " \n190c191,194\n<     int ret = SUCCESS;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     int ret = 0;\n",
        " \n36a38,40\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        " \n392,396c393,397\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)(space+SCRATCH_SZ), bytecode_len, &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (0 != (ret = cgc_receive_all(0, (void *)(space + 2048), bytecode_len, &rx_bytes))) {\n>         ret = -63;\n",
        " \n125c126,129\n<     uint8_t *cursor = bytes;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned char *cursor = bytes;\n",
        " \n265,267c266,269\n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n---\n>         } else //prophet generated patch\n> {\n>     if (!1)\n>         if (!(inst.opcode & 1) && inst.opcode & 2) {\n269,282c271,273\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n---\n>         } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>             if (inst.opcode & 4) {\n>                 op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n284d274\n<                 // op1 is an immediate.\n287a278\n> }\n",
        " \n302a304,306\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n",
        " \n200c201,204\n<     uint32_t op1 = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned int op1 = 0;\n",
        " \n42c43,46\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { //prophet generated patch\n> if (!1)\n>     inst_len += 2;\n>  }\n",
        " \n392,396c393,395\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)(space+SCRATCH_SZ), bytecode_len, &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_receive_all(0, (void *)(space + 2048), bytecode_len, &rx_bytes))) && !1) {\n>         ret = -63;\n",
        " \n369c370,373\n<     uint16_t bytecode_len = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned short bytecode_len = 0;\n",
        " \n371,375c372,376\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)&bytecode_len, sizeof(bytecode_len), &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode_len\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (0 != (ret = cgc_receive_all(0, (void *)&bytecode_len, sizeof (bytecode_len), &rx_bytes))) {\n>         ret = -63;\n",
        " \n59,77c60,67\n<     if (inst->opcode & INST_MASK_OP1) { \n<         inst->op1 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;  \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif  \n<         cursor += 4;  \n<     } else { \n<         inst->op1 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (inst->opcode & 4) {\n>         inst->op1 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>         cursor += 4;\n>     } else {\n>         inst->op1 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n254,286c255,266\n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n<             goto bail;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n---\n>         } else //prophet generated patch\n> {\n>     if ((inst.opcode & 1 && !(inst.opcode & 2)) || 1) {\n>         ret = -62;\n>         goto bail;\n>     } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n>         op1 = acc;\n>     } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>         if (inst.opcode & 4) {\n>             op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>         } else {\n>             op1 = inst.op1;\n287a268,269\n>     }\n> }\n",
        " \n401,404c402,403\n<     if (SUCCESS != (ret = cgc_bytecode_vrfy(space+SCRATCH_SZ, bytecode_len))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_vrfy(): REJECT\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_bytecode_vrfy(space + 2048, bytecode_len))) || 1) {\n",
        " \n43c44,50\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (inst->opcode & 8) {\n>             inst_len += 4;\n>         } else {\n>             inst_len += 2;\n>         }\n",
        " \n196a198,200\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        " \n43c44,48\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP2) { //prophet generated patch\n> if (1)\n>     return -1;\n> inst_len += 4;\n>  } else { inst_len += INST_IMM_SZ; }\n",
        " \n118c119,122\n<     int ret = SUCCESS;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     int ret = 0;\n",
        " \n335a337,339\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n",
        " \n204,249c205,211\n<     while (len) {\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"\\n[D] bytecode_exec() | instruction #%d\\n\", inst_count);\n< #endif\n< \n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | non-SUCCESS from inst_decode; bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n<             goto bail;\n<         }\n< \n<         ////\n<         // Error Tree\n<         ////\n<         // INST_MASK_DST\n<         //  +- INST_MASK_ACC\n<         //      +- INST_MASK_OP1\n<         //      +- !INST_MASK_OP1: ERROR\n<         //  +- !INST_MASK_ACC: ERROR\n< \n<         ////\n<         // Get dst.\n<         ////\n<         if (inst.opcode & INST_MASK_DST) {\n<             dst = (uint32_t *)(scratch + inst.op1);\n<         } else {\n<             dst = &acc;\n<         }\n< \n<         ////\n<         // Get op1.\n<         ////\n<         if (inst.opcode & INST_MASK_DST && inst.opcode & INST_MASK_ACC) {\n<             // The dst is a memory offset pointed to by op1 (meaning INST_MASK_OP1 must be set).\n<             // The arith operands are ACC and op2.\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     while (len)\n>         {\n>             if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>                 ret = -67;\n252,282c214,215\n<             op1 = acc;\n< \n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n<             goto bail;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n---\n>             if (inst.opcode & 1) {\n>                 dst = (unsigned int *)(scratch + inst.op1);\n284,285c217\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n---\n>                 dst = &acc;\n287,315c219,244\n<         }\n< \n<         ////\n<         // Get op2.\n<         ////\n<         if (inst.opcode & INST_MASK_OP2) {\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | scratch + inst.op2 = 0x%08x; op2 = *(scratch + inst.op2) = 0x%08x\\n\", \n<                 scratch + inst.op2, op2);\n< #endif  \n<         } else {\n<             op2 = inst.op2;\n<         }\n< \n<         ////\n<         // Do the operation.\n<         ////\n<         switch(inst.opcode & INST_MASK_OPCODE) {\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n<             case OPCODE_SUB: *dst = op1 - op2; break;\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n<             case OPCODE_DIV: \n<                 if (0 == op2) { op2 = 0xf000f000; }\n<                 *dst = op1 / op2; \n---\n>             if (inst.opcode & 1 && inst.opcode & 2) {\n>                 if (!(inst.opcode & 4)) {\n>                     ret = -62;\n>                     goto bail;\n>                 }\n>                 op1 = acc;\n>             } else if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>                 ret = -62;\n>                 goto bail;\n>             } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n>                 op1 = acc;\n>             } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>                 if (inst.opcode & 4) {\n>                     op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>                 } else {\n>                     op1 = inst.op1;\n>                 }\n>             }\n>             if (inst.opcode & 8) {\n>                 op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n>             } else {\n>                 op2 = inst.op2;\n>             }\n>             switch (inst.opcode & 240) {\n>               case 0:\n>                 *dst = op1 + op2;\n317,324c246,262\n<             // NOTE: that OUT instructions ignore both op1 and op2.\n<             case OPCODE_OUT: *out = acc; break;\n<             default:\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | INVALID opcode; bailing...\\n\");\n< #endif  \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>               case 16:\n>                 *dst = op1 - op2;\n>                 break;\n>               case 32:\n>                 *dst = op1 * op2;\n>                 break;\n>               case 48:\n>                 if (0 == op2) {\n>                     op2 = 4026593280U;\n>                 }\n>                 *dst = op1 / op2;\n>                 break;\n>               case 240:\n>                 *out = acc;\n>                 break;\n>               default:\n>                 ret = -62;\n326a265,267\n>             }\n>             cursor += inst.len;\n>             len -= inst.len;\n328,342d268\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] bytecode_exec() | dst = 0x%08x; *dst = 0x%08x\\n\", dst, *dst);\n< #endif  \n< \n<         // These *shouldn't* under/overflow due to (inst_len > len) check in inst_decode().\n<         cursor += inst.len;\n<         len -= inst.len;\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_exec() | #%04d: acc = 0x%08x\\n\", inst_count++, acc);\n<         fprintf(stderr, \"[D] bytecode_exec() | len = %d\\n\", len);\n< #endif\n<     }\n",
        " \n166a168,170\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n",
        " \n43c44,51\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (inst->opcode & 8) {\n>         inst_len += 4;\n>     } else {\n>         inst_len += 2;\n>     }\n",
        " \n199c200,203\n<     uint32_t acc = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned int acc = 0;\n",
        " \n244,249c245,249\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n>             if (!(inst.opcode & 4)) {\n>                 ret = -62;\n",
        " \n310c311,316\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n---\n>             //prophet generated patch\n>             if (1)\n>                 return -1;\n>             case 0:\n>             *dst = op1 + op2;\n>  break;\n",
        " \n82,85c83,85\n<         inst->op2 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;\n---\n>         //prophet generated patch\n>         if (!1)\n>             inst->op2 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n",
        " \n69c70,74\n<         cursor += 4;  \n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         cursor += 4;\n>   \n",
        " \n59,77c60,65\n<     if (inst->opcode & INST_MASK_OP1) { \n<         inst->op1 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;  \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif  \n<         cursor += 4;  \n<     } else { \n<         inst->op1 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n---\n>     //prophet generated patch\n>     if ((inst->opcode & 4) || 1) {\n>         inst->op1 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>         cursor += 4;\n>     } else {\n>         inst->op1 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n204,285c205,266\n<     while (len) {\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"\\n[D] bytecode_exec() | instruction #%d\\n\", inst_count);\n< #endif\n< \n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | non-SUCCESS from inst_decode; bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n<             goto bail;\n<         }\n< \n<         ////\n<         // Error Tree\n<         ////\n<         // INST_MASK_DST\n<         //  +- INST_MASK_ACC\n<         //      +- INST_MASK_OP1\n<         //      +- !INST_MASK_OP1: ERROR\n<         //  +- !INST_MASK_ACC: ERROR\n< \n<         ////\n<         // Get dst.\n<         ////\n<         if (inst.opcode & INST_MASK_DST) {\n<             dst = (uint32_t *)(scratch + inst.op1);\n<         } else {\n<             dst = &acc;\n<         }\n< \n<         ////\n<         // Get op1.\n<         ////\n<         if (inst.opcode & INST_MASK_DST && inst.opcode & INST_MASK_ACC) {\n<             // The dst is a memory offset pointed to by op1 (meaning INST_MASK_OP1 must be set).\n<             // The arith operands are ACC and op2.\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n<                 goto bail;\n<             }\n<             op1 = acc;\n< \n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n<             goto bail;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n---\n>     //prophet generated patch\n>     if (!1)\n>         while (len)\n>             {\n>                 if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>                     ret = -67;\n>                     goto bail;\n>                 }\n>                 if (inst.opcode & 1) {\n>                     dst = (unsigned int *)(scratch + inst.op1);\n>                 } else {\n>                     dst = &acc;\n>                 }\n>                 if (inst.opcode & 1 && inst.opcode & 2) {\n>                     if (!(inst.opcode & 4)) {\n>                         ret = -62;\n>                         goto bail;\n>                     }\n>                     op1 = acc;\n>                 } else if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>                     ret = -62;\n>                     goto bail;\n>                 } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n>                     op1 = acc;\n>                 } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>                     if (inst.opcode & 4) {\n>                         op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>                     } else {\n>                         op1 = inst.op1;\n>                     }\n>                 }\n>                 if (inst.opcode & 8) {\n>                     op2 = scratch[inst.op2 + 0] << 0 | scratch[inst.op2 + 1] << 8 | scratch[inst.op2 + 2] << 16 | scratch[inst.op2 + 3] << 24;\n>                 } else {\n>                     op2 = inst.op2;\n>                 }\n>                 switch (inst.opcode & 240) {\n>                   case 0:\n>                     *dst = op1 + op2;\n>                     break;\n>                   case 16:\n>                     *dst = op1 - op2;\n>                     break;\n>                   case 32:\n>                     *dst = op1 * op2;\n>                     break;\n>                   case 48:\n>                     if (0 == op2) {\n>                         op2 = 4026593280U;\n>                     }\n>                     *dst = op1 / op2;\n>                     break;\n>                   case 240:\n>                     *out = acc;\n>                     break;\n>                   default:\n>                     ret = -62;\n>                     goto bail;\n>                     break;\n>                 }\n>                 cursor += inst.len;\n>                 len -= inst.len;\n287,342d267\n<         }\n< \n<         ////\n<         // Get op2.\n<         ////\n<         if (inst.opcode & INST_MASK_OP2) {\n<             op2 =   scratch[inst.op2+0] << 0 |\n<                     scratch[inst.op2+1] << 8 |\n<                     scratch[inst.op2+2] << 16|\n<                     scratch[inst.op2+3] << 24;\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | scratch + inst.op2 = 0x%08x; op2 = *(scratch + inst.op2) = 0x%08x\\n\", \n<                 scratch + inst.op2, op2);\n< #endif  \n<         } else {\n<             op2 = inst.op2;\n<         }\n< \n<         ////\n<         // Do the operation.\n<         ////\n<         switch(inst.opcode & INST_MASK_OPCODE) {\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n<             case OPCODE_SUB: *dst = op1 - op2; break;\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n<             case OPCODE_DIV: \n<                 if (0 == op2) { op2 = 0xf000f000; }\n<                 *dst = op1 / op2; \n<                 break;\n<             // NOTE: that OUT instructions ignore both op1 and op2.\n<             case OPCODE_OUT: *out = acc; break;\n<             default:\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | INVALID opcode; bailing...\\n\");\n< #endif  \n<                 ret = ERRNO_INVALID_OPCODE;\n<                 goto bail;\n<                 break;\n<         }\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] bytecode_exec() | dst = 0x%08x; *dst = 0x%08x\\n\", dst, *dst);\n< #endif  \n< \n<         // These *shouldn't* under/overflow due to (inst_len > len) check in inst_decode().\n<         cursor += inst.len;\n<         len -= inst.len;\n< \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_exec() | #%04d: acc = 0x%08x\\n\", inst_count++, acc);\n<         fprintf(stderr, \"[D] bytecode_exec() | len = %d\\n\", len);\n< #endif\n<     }\n",
        " \n60,63c61,65\n<         inst->op1 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;  \n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         inst->op1 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>   \n",
        " \n244,249c245,249\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n>             if (!(inst.opcode & 4)) {\n>                 ret = -62;\n",
        " \n59,77c60,65\n<     if (inst->opcode & INST_MASK_OP1) { \n<         inst->op1 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;  \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif  \n<         cursor += 4;  \n<     } else { \n<         inst->op1 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n---\n>     //prophet generated patch\n>     if ((inst->opcode & 4) && !1) {\n>         inst->op1 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>         cursor += 4;\n>     } else {\n>         inst->op1 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n190c191,194\n<     int ret = SUCCESS;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     int ret = 0;\n",
        " \n310c311,316\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n---\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n>             case 0:\n>             *dst = op1 + op2;\n>  break;\n",
        " \n46,53c47,49\n<     if (inst_len > len) {\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | insufficient bytes provided; \"\n<             \"required: 0x%02x (%d), available: 0x%02x (%d)\\n\", \n<             inst_len, inst_len, len, len);\n< #endif\n<         ret = ERRNO_INSUFFICIENT_BYTES;\n---\n>     //prophet generated patch\n>     if ((inst_len > len) && !1) {\n>         ret = -32;\n",
        " \n58c59,61\n<     inst->len = inst_len;\n---\n>     //prophet generated patch\n>     if (!1)\n>         inst->len = inst_len;\n",
        " \n137,142c138,140\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_vrfy() | non-SUCCESS from inst_decode' bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n---\n>         //prophet generated patch\n>         if ((0 != (ret = cgc_inst_decode(cursor, len, &inst))) || 1) {\n>             ret = -67;\n",
        " \n383,386c384,387\n<     if (BYTECODE_SZ - sizeof(uint32_t) < bytecode_len) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] BYTECODE_SZ < bytecode_len; bailing...\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (2048 - sizeof(unsigned int) < bytecode_len) {\n",
        " \n159,163c160,165\n<         if (inst.opcode & INST_MASK_OP2 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op2)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n<             goto bail;\n<         }\n---\n>         //prophet generated patch\n>         if (!1)\n>             if (inst.opcode & 8 && (2048 + 2048 - sizeof(unsigned int) < inst.op2)) {\n>                 ret = -27;\n>                 goto bail;\n>             }\n",
        " \n196a198,200\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        " \n200c201,204\n<     uint32_t op1 = 0;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned int op1 = 0;\n",
        " \n244,251c245,250\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n<                 goto bail;\n<             }\n---\n>             //prophet generated patch\n>             if (!1)\n>                 if (!(inst.opcode & 4)) {\n>                     ret = -62;\n>                     goto bail;\n>                 }\n",
        " \n42c43,47\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { //prophet generated patch\n> if (1)\n>     return 0;\n> inst_len += 2;\n>  }\n",
        " \n392,398c393,398\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)(space+SCRATCH_SZ), bytecode_len, &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n<         goto bail;\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (0 != (ret = cgc_receive_all(0, (void *)(space + 2048), bytecode_len, &rx_bytes))) {\n>             ret = -63;\n>             goto bail;\n>         }\n",
        " \n211,216c212,216\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | non-SUCCESS from inst_decode; bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>             ret = -67;\n",
        " \n43c44,49\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if ((inst->opcode & 8) && !1) {\n>         inst_len += 4;\n>     } else {\n>         inst_len += 2;\n>     }\n",
        " \n233c234,236\n<             dst = (uint32_t *)(scratch + inst.op1);\n---\n>             //prophet generated patch\n>             if (!1)\n>                 dst = (unsigned int *)(scratch + inst.op1);\n",
        " \n42c43,46\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP1) { //prophet generated patch\n> if (!1)\n>     inst_len += 4;\n>  } else { inst_len += INST_IMM_SZ; }\n",
        " \n150,152c151,153\n<         if (inst.opcode & INST_MASK_OP1 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op1)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n---\n>         //prophet generated patch\n>         if ((inst.opcode & 4 && (2048 + 2048 - sizeof(unsigned int) < inst.op1)) || 1) {\n>             ret = -27;\n",
        " \n43c44,48\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { //prophet generated patch\n> if (1)\n>     return 0;\n> inst_len += 2;\n>  }\n",
        " \n371,375c372,374\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)&bytecode_len, sizeof(bytecode_len), &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode_len\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_receive_all(0, (void *)&bytecode_len, sizeof (bytecode_len), &rx_bytes))) || 1) {\n>         ret = -63;\n",
        " \n35c36,39\n<     int ret = SUCCESS;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     int ret = 0;\n",
        " \n370c371,373\n<     rx_bytes = 0;\n---\n>     //prophet generated patch\n>     if (!1)\n>         rx_bytes = 0;\n",
        " \n174a176,178\n> //prophet generated patch\n> if (1)\n>     return 0;\n176,183c180\n< #ifdef DEBUG\n<     if (ERRNO_VFRY_REJECT_OFF == ret) {\n<         fprintf(stderr, \n<             \"[D] bytecode_vrfy() | REJECT due to offset check\\n\");\n<     }\n< #endif\n< \n<     return ret;\n---\n> return ret;\n",
        " \n165a167,169\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n",
        " \n241,249c242,245\n<         if (inst.opcode & INST_MASK_DST && inst.opcode & INST_MASK_ACC) {\n<             // The dst is a memory offset pointed to by op1 (meaning INST_MASK_OP1 must be set).\n<             // The arith operands are ACC and op2.\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>         //prophet generated patch\n>         if ((inst.opcode & 1 && inst.opcode & 2) || 1) {\n>             if (!(inst.opcode & 4)) {\n>                 ret = -62;\n253,262c249,250\n< \n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n---\n>         } else if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>             ret = -62;\n264,267c252\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n---\n>         } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n269,282c254,256\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n---\n>         } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>             if (inst.opcode & 4) {\n>                 op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n284d257\n<                 // op1 is an immediate.\n",
        " \n166c167,169\n<         cursor += inst.len;\n---\n>         //prophet generated patch\n>         if (!1)\n>             cursor += inst.len;\n",
        " \n69c70,74\n<         cursor += 4;  \n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         cursor += 4;\n>   \n",
        " \n392,396c393,397\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)(space+SCRATCH_SZ), bytecode_len, &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (0 != (ret = cgc_receive_all(0, (void *)(space + 2048), bytecode_len, &rx_bytes))) {\n>         ret = -63;\n",
        " \n414,417c415,418\n<     if (SUCCESS != (ret = cgc_bytecode_exec(space+SCRATCH_SZ, bytecode_len, space, &out))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode execution failed; bailing...\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (0 != (ret = cgc_bytecode_exec(space + 2048, bytecode_len, space, &out))) {\n",
        " \n383,386c384,385\n<     if (BYTECODE_SZ - sizeof(uint32_t) < bytecode_len) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] BYTECODE_SZ < bytecode_len; bailing...\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if ((2048 - sizeof(unsigned int) < bytecode_len) || 1) {\n",
        " \n234a236,238\n>             //prophet generated patch\n>             if (1)\n>                 return 0;\n",
        " \n71,72c72,74\n<         inst->op1 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n---\n>         //prophet generated patch\n>         if (!1)\n>             inst->op1 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n42c43,48\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if ((inst->opcode & 4) && !1) {\n>         inst_len += 4;\n>     } else {\n>         inst_len += 2;\n>     }\n",
        " \n127c128,131\n<     uint8_t *dst = NULL;\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     unsigned char *dst = (0);\n",
        " \n71,72c72,75\n<         inst->op1 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         inst->op1 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n358,361c359,362\n<     if (SUCCESS != (ret = cgc_allocate(SCRATCH_SZ + BYTECODE_SZ, FALSE, (void **)&space))) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] allocate()\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (0 != (ret = cgc_allocate(2048 + 2048, 0, (void **)&space))) {\n",
        " \n60,63c61,64\n<         inst->op1 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;  \n---\n>         //prophet generated patch\n>         if (!1)\n>             inst->op1 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>   \n",
        " \n309,315c310,314\n<         switch(inst.opcode & INST_MASK_OPCODE) {\n<             case OPCODE_ADD: *dst = op1 + op2; break;\n<             case OPCODE_SUB: *dst = op1 - op2; break;\n<             case OPCODE_MUL: *dst = op1 * op2; break;\n<             case OPCODE_DIV: \n<                 if (0 == op2) { op2 = 0xf000f000; }\n<                 *dst = op1 / op2; \n---\n>         //prophet generated patch\n>         if (!1)\n>             switch (inst.opcode & 240) {\n>               case 0:\n>                 *dst = op1 + op2;\n317,324c316,332\n<             // NOTE: that OUT instructions ignore both op1 and op2.\n<             case OPCODE_OUT: *out = acc; break;\n<             default:\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | INVALID opcode; bailing...\\n\");\n< #endif  \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>               case 16:\n>                 *dst = op1 - op2;\n>                 break;\n>               case 32:\n>                 *dst = op1 * op2;\n>                 break;\n>               case 48:\n>                 if (0 == op2) {\n>                     op2 = 4026593280U;\n>                 }\n>                 *dst = op1 / op2;\n>                 break;\n>               case 240:\n>                 *out = acc;\n>                 break;\n>               default:\n>                 ret = -62;\n327c335\n<         }\n---\n>             }\n",
        " \n390a392,394\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n",
        " \n150,152c151,155\n<         if (inst.opcode & INST_MASK_OP1 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op1)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n---\n>         //prophet generated patch\n>         if (1)\n>             return 0;\n>         if (inst.opcode & 4 && (2048 + 2048 - sizeof(unsigned int) < inst.op1)) {\n>             ret = -27;\n",
        " \n150,152c151,153\n<         if (inst.opcode & INST_MASK_OP1 && (SCRATCH_SZ + BYTECODE_SZ - sizeof(uint32_t) < inst.op1)) {\n< \n<             ret = ERRNO_VFRY_REJECT_OFF;\n---\n>         //prophet generated patch\n>         if ((inst.opcode & 4 && (2048 + 2048 - sizeof(unsigned int) < inst.op1)) && !1) {\n>             ret = -27;\n",
        " \n46,55c47,52\n<     if (inst_len > len) {\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | insufficient bytes provided; \"\n<             \"required: 0x%02x (%d), available: 0x%02x (%d)\\n\", \n<             inst_len, inst_len, len, len);\n< #endif\n<         ret = ERRNO_INSUFFICIENT_BYTES;\n<         goto bail;\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (inst_len > len) {\n>             ret = -32;\n>             goto bail;\n>         }\n",
        " \n241,249c242,251\n<         if (inst.opcode & INST_MASK_DST && inst.opcode & INST_MASK_ACC) {\n<             // The dst is a memory offset pointed to by op1 (meaning INST_MASK_OP1 must be set).\n<             // The arith operands are ACC and op2.\n<             if (!(inst.opcode & INST_MASK_OP1)) {\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & immediate op1; bailing...\\n\");\n< #endif       \n<                 ret = ERRNO_INVALID_OPCODE;\n---\n>         //prophet generated patch\n>         if (!1)\n>             if (inst.opcode & 1 && inst.opcode & 2) {\n>                 if (!(inst.opcode & 4)) {\n>                     ret = -62;\n>                     goto bail;\n>                 }\n>                 op1 = acc;\n>             } else if (inst.opcode & 1 && !(inst.opcode & 2)) {\n>                 ret = -62;\n250a253,260\n>             } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n>                 op1 = acc;\n>             } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>                 if (inst.opcode & 4) {\n>                     op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>                 } else {\n>                     op1 = inst.op1;\n>                 }\n252,287d261\n<             op1 = acc;\n< \n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n<             goto bail;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n<         }\n",
        " \n383,386c384,385\n<     if (BYTECODE_SZ - sizeof(uint32_t) < bytecode_len) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] BYTECODE_SZ < bytecode_len; bailing...\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if ((2048 - sizeof(unsigned int) < bytecode_len) && !1) {\n",
        " \n43c44,48\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { //prophet generated patch\n> if (1)\n>     return -1;\n> inst_len += 2;\n>  }\n",
        " \n82,85c83,86\n<         inst->op2 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;\n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         inst->op2 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n",
        " \n45a47,49\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n47,53c51\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | insufficient bytes provided; \"\n<             \"required: 0x%02x (%d), available: 0x%02x (%d)\\n\", \n<             inst_len, inst_len, len, len);\n< #endif\n<         ret = ERRNO_INSUFFICIENT_BYTES;\n---\n>         ret = -32;\n",
        " \n211,216c212,214\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | non-SUCCESS from inst_decode; bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n---\n>         //prophet generated patch\n>         if ((0 != (ret = cgc_inst_decode(cursor, len, &inst))) && !1) {\n>             ret = -67;\n",
        " \n198c199,202\n<     uint8_t *cursor = bytes;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned char *cursor = bytes;\n",
        " \n232,233c233,235\n<         if (inst.opcode & INST_MASK_DST) {\n<             dst = (uint32_t *)(scratch + inst.op1);\n---\n>         //prophet generated patch\n>         if ((inst.opcode & 1) && !1) {\n>             dst = (unsigned int *)(scratch + inst.op1);\n",
        " \n202c203,206\n<     uint32_t *dst = NULL;\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     unsigned int *dst = (0);\n",
        " \n383,386c384,387\n<     if (BYTECODE_SZ - sizeof(uint32_t) < bytecode_len) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] BYTECODE_SZ < bytecode_len; bailing...\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (2048 - sizeof(unsigned int) < bytecode_len) {\n",
        " \n60,63c61,65\n<         inst->op1 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;  \n---\n>         //prophet generated patch\n>         if (1)\n>             return -1;\n>         inst->op1 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>   \n",
        " \n254,286c255,266\n<         } else if (inst.opcode & INST_MASK_DST && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is a memory offset pointed to by op1.\n<             // The arith operands are op1 and op2.\n<             // This is ILLEGAL; op1 cannot specify both dst offset and operand.\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_exec() | INVALID opcode: mem dst & not ACC as op1; bailing...\\n\");\n< #endif       \n<             ret = ERRNO_INVALID_OPCODE;\n<             goto bail;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && inst.opcode & INST_MASK_ACC) {\n<             // The dst is ACC.\n<             // The arith operands are ACC and op2.\n<             op1 = acc;\n< \n<         } else if (!(inst.opcode & INST_MASK_DST) && !(inst.opcode & INST_MASK_ACC)) {\n<             // The dst is ACC.\n<             // The arith operands are op1 and op2.\n<             if (inst.opcode & INST_MASK_OP1) {\n<                 op1 =   scratch[inst.op1+0] << 0 |\n<                         scratch[inst.op1+1] << 8 |\n<                         scratch[inst.op1+2] << 16|\n<                         scratch[inst.op1+3] << 24;\n< #ifdef DEBUG\n<                 fprintf(stderr, \n<                     \"[D] bytecode_exec() | scratch + inst.op1 = 0x%08x; op1 = *(scratch + inst.op1) = 0x%08x\\n\", \n<                     scratch + inst.op1, op1);\n< #endif  \n<             } else {\n<                 // op1 is an immediate.\n<                 op1 = inst.op1;\n<             }\n---\n>         } else //prophet generated patch\n> {\n>     if ((inst.opcode & 1 && !(inst.opcode & 2)) && !1) {\n>         ret = -62;\n>         goto bail;\n>     } else if (!(inst.opcode & 1) && inst.opcode & 2) {\n>         op1 = acc;\n>     } else if (!(inst.opcode & 1) && !(inst.opcode & 2)) {\n>         if (inst.opcode & 4) {\n>             op1 = scratch[inst.op1 + 0] << 0 | scratch[inst.op1 + 1] << 8 | scratch[inst.op1 + 2] << 16 | scratch[inst.op1 + 3] << 24;\n>         } else {\n>             op1 = inst.op1;\n287a268,269\n>     }\n> }\n",
        " \n358,361c359,362\n<     if (SUCCESS != (ret = cgc_allocate(SCRATCH_SZ + BYTECODE_SZ, FALSE, (void **)&space))) {\n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] allocate()\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (0 != (ret = cgc_allocate(2048 + 2048, 0, (void **)&space))) {\n",
        " \n137,144c138,143\n<         if (SUCCESS != (ret = cgc_inst_decode(cursor, len, &inst))) {\n< #ifdef DEBUG\n<             fprintf(stderr, \n<                 \"[D] bytecode_vrfy() | non-SUCCESS from inst_decode' bailing...\\n\");\n< #endif\n<             ret = ERRNO_INST_DECODE;\n<             goto bail;\n<         }\n---\n>         //prophet generated patch\n>         if (!1)\n>             if (0 != (ret = cgc_inst_decode(cursor, len, &inst))) {\n>                 ret = -67;\n>                 goto bail;\n>             }\n",
        " \n57a59,61\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n",
        " \n167c168,170\n<         len -= inst.len;\n---\n>         //prophet generated patch\n>         if (!1)\n>             len -= inst.len;\n",
        " \n43c44,47\n<     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     if (inst->opcode & INST_MASK_OP2) { inst_len += INST_OFF_SZ; } else { //prophet generated patch\n> if (!1)\n>     inst_len += 2;\n>  }\n",
        " \n371,375c372,374\n<     if (SUCCESS != (ret = cgc_receive_all(STDIN, (void *)&bytecode_len, sizeof(bytecode_len), &rx_bytes))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[E] during receive_all() of bytecode_len\\n\");\n< #endif\n<         ret = ERRNO_RECV;\n---\n>     //prophet generated patch\n>     if ((0 != (ret = cgc_receive_all(0, (void *)&bytecode_len, sizeof (bytecode_len), &rx_bytes))) && !1) {\n>         ret = -63;\n",
        " \n401,406c402,406\n<     if (SUCCESS != (ret = cgc_bytecode_vrfy(space+SCRATCH_SZ, bytecode_len))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_vrfy(): REJECT\\n\");\n< #endif\n<         goto bail;\n<     }\n---\n>     //prophet generated patch\n>     if (!1)\n>         if (0 != (ret = cgc_bytecode_vrfy(space + 2048, bytecode_len))) {\n>             goto bail;\n>         }\n",
        " \n59,77c60,67\n<     if (inst->opcode & INST_MASK_OP1) { \n<         inst->op1 = bytes[cursor+1] << 24 |\n<                     bytes[cursor+2] << 16 |\n<                     bytes[cursor+3] << 8|\n<                     bytes[cursor+4] << 0;  \n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (off) | bytes[cursor+1:cursor+4] = 0x%02x 0x%02x 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2], bytes[cursor+3], bytes[cursor+4]);\n< #endif  \n<         cursor += 4;  \n<     } else { \n<         inst->op1 = bytes[cursor+1] << 8 |\n<                     bytes[cursor+2] << 0;\n< #ifdef DEBUG\n<         fprintf(stderr, \n<             \"[D] decode() | op1 (imm) | bytes[cursor+1:cursor+2] = 0x%02x 0x%02x\\n\", \n<             bytes[cursor+1], bytes[cursor+2]);\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (inst->opcode & 4) {\n>         inst->op1 = bytes[cursor + 1] << 24 | bytes[cursor + 2] << 16 | bytes[cursor + 3] << 8 | bytes[cursor + 4] << 0;\n>         cursor += 4;\n>     } else {\n>         inst->op1 = bytes[cursor + 1] << 8 | bytes[cursor + 2] << 0;\n",
        " \n401,404c402,405\n<     if (SUCCESS != (ret = cgc_bytecode_vrfy(space+SCRATCH_SZ, bytecode_len))) { \n< #ifdef DEBUG\n<         fprintf(stderr, \"[D] bytecode_vrfy(): REJECT\\n\");\n< #endif\n---\n>     //prophet generated patch\n>     if (1)\n>         return -1;\n>     if (0 != (ret = cgc_bytecode_vrfy(space + 2048, bytecode_len))) {\n",
        " \n42c43,50\n<     if (inst->opcode & INST_MASK_OP1) { inst_len += INST_OFF_SZ; } else { inst_len += INST_IMM_SZ; }\n---\n>     //prophet generated patch\n>     if (1)\n>         return 0;\n>     if (inst->opcode & 4) {\n>         inst_len += 4;\n>     } else {\n>         inst_len += 2;\n>     }\n"
      ]
    }
  ],
  "compilations": 231,
  "failed_compilations": 0,
  "outcomes": {
    "sanity_check": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fault_localization": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ],
        "n2": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "99e64c92": {
      "compiles": [
        0
      ]
    },
    "56084685": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "001106c9": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "41511c63": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "569ef1b0": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "14be4eb9": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5730828a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1dc60216": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9c160b37": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ff9b2db1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a058e324": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e24b81d5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7085d46c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c9b3ee8d": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4b8cda46": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "046cdb91": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fb05fcb3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "29814a3d": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "39f902aa": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7c07f287": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "15ab658d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "401bb717": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "834448a4": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4b66bb35": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "55e8c28f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c4a66d5a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5a135699": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "521a0da3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a13328bc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3bdde6b5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "127c3c65": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a98760f1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8fa275e9": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5f197708": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8471be8b": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "78a186e9": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "18c0e87e": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "23613e72": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "cd4a029b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b9dedc6c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d5cd34c9": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c3c4c20f": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a9ef4485": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d4526416": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fa129dcc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "9a9cbf07": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "aa166882": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e00a50bc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5e34cc5b": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6775ed91": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9a0917a9": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d9cffc8d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "abb6a963": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "34c66981": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "83cb5835": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d963f67f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5cde2add": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "560e5fda": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "50fa1d7d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "81368036": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a8a0ea8e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "355de099": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "659773d5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "72355eaf": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "166c6143": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6dc1dd88": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "48ae2e0a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "63e02efb": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5212e95c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "cbe5d78a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7766776c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "dbf34933": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a0d9b0d4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8efd69b6": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c628458c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e3c2f484": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f752d746": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5aacbdc8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4df6b3d8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e891b6c2": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "887e09e9": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e4c32462": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "73ab4500": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "cf417f99": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "409d16c6": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d8cfe6ac": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d31d6913": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e52e4374": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "29af5d9e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "69f2ff79": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "39d9ff4d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fb3cff83": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8c38694f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5195e528": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7aff31d6": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "22c3c9d9": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "243fa802": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "466fbcc8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3f362fcd": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d8b93470": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "555aa486": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "117a04f7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f81a0fa6": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9d4f6454": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0cd7a6da": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fd31e11f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9dfc72f7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "09c99234": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f4e1c4e1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "22b572fa": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "221f09e9": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e79bbe14": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "dfc385e1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7baa884e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6155d222": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e31fb24f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8d053321": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "92c52080": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3eb66cc3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0e69902e": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a0d6f203": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "52f84601": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "158711f7": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ed52affc": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f4c51a28": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5427f819": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "078a9709": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6a023fec": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0e2dfa61": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b6a7cc80": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4a17b421": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "44c4fe27": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d9556dcf": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "72428fd0": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "331fdd77": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5fc05035": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "3de34ffe": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f7abb063": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "74d7a7f7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9e55816c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a8cba5a4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8156622c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5615b685": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a2393bdf": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9f9cc52b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0385f9a7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c6644753": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b8342f8f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6e47bd07": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "630ecfa3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8a5df428": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a5959455": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "dfd25e2a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "985ac5c0": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d1c4470d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f32e0698": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f6dc7f69": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "cfdb0f8e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "42d90adb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2a0f18c6": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "bd5eed42": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d8b43cee": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9b893a23": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f531c09d": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6a5c5a61": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a1c5c036": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1671c061": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9256dae1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "511c1986": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fe2c9f13": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d18a3c9a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f2f762f8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "93759cce": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9bbd146f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b9333059": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e6025f48": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e28cbd2a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a57c5382": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1d0ac4ed": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1e325437": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6e28fb6b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0f3889af": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6918208a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b7c188e9": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "17eaac8e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "710d7e89": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "611c3d1e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "25dc62c0": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e0876799": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c76296b4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "412eab9f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8022d975": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "100ae81e": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f0a1a34c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c354d70b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c68dd707": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "200edd51": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "bddc4386": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fd0a0a42": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "c16f8cee": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c82a3eed": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "45eae73b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ff3b2740": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1a515981": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "73740eb3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fa0fa007": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2ba4b21a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ebd082d4": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8a306553": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "63e92ed7": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "48b3db19": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "76760bb8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d9d69f94": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9ba7fca5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9cd350f5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "def18054": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1681a0d6": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7777cc88": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f52eddfa": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3db37ee1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1f96255f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "feb276e4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8e4830b2": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2c784464": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ed6e53e7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3149c1df": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "057e63ff": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "882f8562": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7f6c9ccb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": []
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "n2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    }
  },
  "neg_tests": 2,
  "pos_tests": 20,
  "passed_neg_tests": 314,
  "passed_pos_tests": 44,
  "failed_neg_tests": 75,
  "failed_pos_tests": 156,
  "duration": 3600.046906,
  "errors": [
    "Neg Processing: 21",
    "Neg Processing: 22",
    "Processing: 0 : 1",
    "Processing: 1 : 2",
    "Processing: 2 : 3",
    "Processing: 3 : 4",
    "Processing: 4 : 5",
    "Processing: 5 : 6",
    "Processing: 6 : 7",
    "Processing: 7 : 8",
    "Processing: 8 : 9",
    "Processing: 9 : 10",
    "Processing: 10 : 11",
    "Processing: 11 : 12",
    "Processing: 12 : 13",
    "Processing: 13 : 14",
    "Processing: 14 : 15",
    "Processing: 15 : 16",
    "Processing: 16 : 17",
    "Processing: 17 : 18",
    "Processing: 18 : 19",
    "Processing: 19 : 20",
    "going to directory /tmp/Kali/cotton_swab_arithmetic_0/workdir/src",
    "warning: /tmp/Kali/cotton_swab_arithmetic_0/workdir/src: 'linker' input unused",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "Killed",
    "",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash"
  ]
}