{
  "repair_begin": "2021-05-06 19:11:11.712081",
  "repair_end": "2021-05-06 20:11:11.778975",
  "patches": [
    {
      "target_file": "src/parseCVF.c",
      "fix": "",
      "edits": [
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n165c166,168\n< \treturn count;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    return count;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n230,232c231,234\n< \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n< \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->rCount == 0 && frame_type != 0) || 1) {\n> \t    cgc_printf(\"[ERROR] First frame must be full\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n367c368,371\n< \t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n---\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n> \t\txbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n178a180,182\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n156,157c157,159\n< \tif ( size == 0 ) {\n< \t\treturn 1;\n---\n> \t//prophet generated patch\n> \tif ((size == 0) || 1) {\n> \t    return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n650,651c651,653\n< \tif ( cgc_readBits( pbs, 8, &(pNewImage->width) ) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 8, &(pNewImage->width)) == 0) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n447c448,450\n< \tpNewImage->renderedFrames[ pNewImage->rCount ] = newFrame;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    pNewImage->renderedFrames[pNewImage->rCount] = newFrame;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n335,432c336,413\n< \tif ( frame_type == 0 ) {\n< \t\t/// Set the base image to all spaces\n< \t\tcgc_memset( newFrame->image, 0x20, length );\n< \n< \t\txbits = 0;\n< \t\twhile ( xbits < pixel_count ) {\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\t/// Set the frame image data\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \n< \t\t\t/// Clear the var\n< \t\t\tybits = 0;\n< \t\t\txbits++;\n< \t\t}\n< \n< \t\t/// Calculate remaining bits\n< \t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n< \n< \t} else {\n< \t\t/// An incremental image requires a copy of the previously rendered frame\n< \t\tif ( pNewImage->renderedFrames[ pNewImage->rCount - 1] == NULL ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n< \n< \t\t/// Read index and then pixel\n< \t\tfor ( int i = 0; i < pixel_count; i++ ) {\n< \t\t\txbits = 0;\n< \t\t\tybits = 0;\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_count_bits, &xbits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \n< \t\t\tif ( xbits >= length ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Index out of image bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits >= dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \t\t}\n< \n< \t\t/// Calculate the remaining padding\n< \t\t/// Pixel index bits + (index+value)*count\n< \t\txbits = pixel_index_length;\n< \t\txbits += ( pixel_count_bits + pixel_bits ) * pixel_count;\n< \t\txbits %= 8;\n< \t\txbits = (8 - xbits) % 8;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (frame_type == 0) {\n> \t        cgc_memset(newFrame->image, 32, length);\n> \t        xbits = 0;\n> \t        while (xbits < pixel_count)\n> \t            {\n> \t                if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t                    cgc_free(newFrame->image);\n> \t                    newFrame->image = (0);\n> \t                    cgc_free(newFrame);\n> \t                    newFrame = (0);\n> \t                    return 0;\n> \t                }\n> \t                if (ybits > dictionary->charCount) {\n> \t                    cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t                    cgc_free(newFrame->image);\n> \t                    newFrame->image = (0);\n> \t                    cgc_free(newFrame);\n> \t                    newFrame = (0);\n> \t                    return 0;\n> \t                }\n> \t                newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t                ybits = 0;\n> \t                xbits++;\n> \t            }\n> \t        xbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n> \t    } else {\n> \t        if (pNewImage->renderedFrames[pNewImage->rCount - 1] == (0)) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        cgc_memcpy(newFrame->image, pNewImage->renderedFrames[pNewImage->rCount - 1]->image, length);\n> \t        for (int i = 0; i < pixel_count; i++) {\n> \t            xbits = 0;\n> \t            ybits = 0;\n> \t            if (cgc_readBits(pbs, pixel_count_bits, &xbits) == 0) {\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                cgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n> \t                return 0;\n> \t            }\n> \t            if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                cgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n> \t                return 0;\n> \t            }\n> \t            if (xbits >= length) {\n> \t                cgc_printf(\"[ERROR] Index out of image bounds\\n\");\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            if (ybits >= dictionary->charCount) {\n> \t                cgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t        }\n> \t        xbits = pixel_index_length;\n> \t        xbits += (pixel_count_bits + pixel_bits) * pixel_count;\n> \t        xbits %= 8;\n> \t        xbits = (8 - xbits) % 8;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n160a162,164\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n244,272c245,276\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n< \t}\n---\n> \t} else //prophet generated patch\n> {\n>     if ((pixel_dict == 1) && !1) {\n>         standard_dictionary.charCount = 2;\n>         standard_dictionary.pixelArray = \" .\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 2) {\n>         standard_dictionary.charCount = 4;\n>         standard_dictionary.pixelArray = \" .|#\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 3) {\n>         standard_dictionary.charCount = 8;\n>         standard_dictionary.pixelArray = \" .|#@$()\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 4) {\n>         standard_dictionary.charCount = 16;\n>         standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 5) {\n>         standard_dictionary.charCount = 42;\n>         standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 6) {\n>         standard_dictionary.charCount = 62;\n>         standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 7) {\n>         standard_dictionary.charCount = 95;\n>         standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n>         dictionary = &standard_dictionary;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n340,364c341,364\n< \t\twhile ( xbits < pixel_count ) {\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\t/// Set the frame image data\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \n< \t\t\t/// Clear the var\n< \t\t\tybits = 0;\n< \t\t\txbits++;\n< \t\t}\n---\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n> \t\twhile (xbits < pixel_count)\n> \t\t    {\n> \t\t        if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t\t            cgc_free(newFrame->image);\n> \t\t            newFrame->image = (0);\n> \t\t            cgc_free(newFrame);\n> \t\t            newFrame = (0);\n> \t\t            return 0;\n> \t\t        }\n> \t\t        if (ybits > dictionary->charCount) {\n> \t\t            cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t\t            cgc_free(newFrame->image);\n> \t\t            newFrame->image = (0);\n> \t\t            cgc_free(newFrame);\n> \t\t            newFrame = (0);\n> \t\t            return 0;\n> \t\t        }\n> \t\t        newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t\t        ybits = 0;\n> \t\t        xbits++;\n> \t\t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n699,700c700,702\n< \tif ( pbs == NULL ) {\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif ((pbs == (0)) && !1) {\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n328a330,332\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n685,686c686,688\n< \tif ( pNewImage->renderedFrames == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->renderedFrames == (0)) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n224c225,227\n< \tpixel_dict = (flag>>3) & 0x7;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    pixel_dict = (flag >> 3) & 7;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n156,157c157,161\n< \tif ( size == 0 ) {\n< \t\treturn 1;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (size == 0) {\n> \t    return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n638,640c639,642\n< \tif ( pNewImage->height == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->height == 0) && !1) {\n> \t    cgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n179a181,183\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n221c222,224\n< \tindex_type = (flag>>6) & 0x1;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    index_type = (flag >> 6) & 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n802,803c803,805\n< \tif ( nc == NULL ) {\n< \t\treturn nc;\n---\n> \t//prophet generated patch\n> \tif ((nc == (0)) && !1) {\n> \t    return nc;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n666,667c667,669\n< \tif ( cgc_readBits( pbs, 16, &(pNewImage->frameCount) ) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 16, &(pNewImage->frameCount)) == 0) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n277c278,280\n< \tpixel_bits = cgc_bitsNeeded( dictionary->charCount - 1);\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    pixel_bits = cgc_bitsNeeded(dictionary->charCount - 1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n292,295c293,297\n< \tif ( newFrame->image == NULL ) {\n< \t\tcgc_free(newFrame);\n< \t\tnewFrame = NULL;\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((newFrame->image == (0)) && !1) {\n> \t    cgc_free(newFrame);\n> \t    newFrame = (0);\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n212,213c213,217\n< \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (cgc_readBits(pbs, 8, &flag) == 0) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n349,356c350,359\n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (!1)\n> \t\t\t    if (ybits > dictionary->charCount) {\n> \t\t\t        cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t\t\t        cgc_free(newFrame->image);\n> \t\t\t        newFrame->image = (0);\n> \t\t\t        cgc_free(newFrame);\n> \t\t\t        newFrame = (0);\n> \t\t\t        return 0;\n> \t\t\t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n160,163c161,168\n< \twhile ( size ) {\n< \t\tcount++;\n< \t\tsize >>= 1;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \twhile (size)\n> \t    {\n> \t        count++;\n> \t        size >>= 1;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n340,364c341,363\n< \t\twhile ( xbits < pixel_count ) {\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\t/// Set the frame image data\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \n< \t\t\t/// Clear the var\n< \t\t\tybits = 0;\n< \t\t\txbits++;\n< \t\t}\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    while (xbits < pixel_count)\n> \t\t        {\n> \t\t            if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t\t                cgc_free(newFrame->image);\n> \t\t                newFrame->image = (0);\n> \t\t                cgc_free(newFrame);\n> \t\t                newFrame = (0);\n> \t\t                return 0;\n> \t\t            }\n> \t\t            if (ybits > dictionary->charCount) {\n> \t\t                cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t\t                cgc_free(newFrame->image);\n> \t\t                newFrame->image = (0);\n> \t\t                cgc_free(newFrame);\n> \t\t                newFrame = (0);\n> \t\t                return 0;\n> \t\t            }\n> \t\t            newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t\t            ybits = 0;\n> \t\t            xbits++;\n> \t\t        }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n185a187,189\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n244,272c245,278\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n< \t}\n---\n> \t} else //prophet generated patch\n> {\n>     if (1)\n>         return -1;\n>     if (pixel_dict == 1) {\n>         standard_dictionary.charCount = 2;\n>         standard_dictionary.pixelArray = \" .\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 2) {\n>         standard_dictionary.charCount = 4;\n>         standard_dictionary.pixelArray = \" .|#\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 3) {\n>         standard_dictionary.charCount = 8;\n>         standard_dictionary.pixelArray = \" .|#@$()\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 4) {\n>         standard_dictionary.charCount = 16;\n>         standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 5) {\n>         standard_dictionary.charCount = 42;\n>         standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 6) {\n>         standard_dictionary.charCount = 62;\n>         standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 7) {\n>         standard_dictionary.charCount = 95;\n>         standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n>         dictionary = &standard_dictionary;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n282,283c283,285\n< \tif ( newFrame == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((newFrame == (0)) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n349,355c350,359\n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return 0;\n> \t\t\tif (ybits > dictionary->charCount) {\n> \t\t\t    cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t\t\t    cgc_free(newFrame->image);\n> \t\t\t    newFrame->image = (0);\n> \t\t\t    cgc_free(newFrame);\n> \t\t\t    newFrame = (0);\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n287a289,291\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n671,673c672,675\n< \tif ( pNewImage->frameCount > 2048 ) {\n< \t\tcgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->frameCount > 2048) || 1) {\n> \t    cgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n176a178,180\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n617,618c618,620\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pbs == (0)) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n644,646c645,648\n< \tif ( pNewImage->height > 35 ) {\n< \t\tcgc_printf(\"[ERROR] Height must be less than 35\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->height > 35) || 1) {\n> \t    cgc_printf(\"[ERROR] Height must be less than 35\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n183a185,187\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n160,163c161,168\n< \twhile ( size ) {\n< \t\tcount++;\n< \t\tsize >>= 1;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \twhile (size)\n> \t    {\n> \t        count++;\n> \t        size >>= 1;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n671,673c672,675\n< \tif ( pNewImage->frameCount > 2048 ) {\n< \t\tcgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->frameCount > 2048) && !1) {\n> \t    cgc_printf(\"[ERROR] Maximum frame count is 2048\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n290c291,294\n< \tnewFrame->image = cgc_malloc( length );\t\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    newFrame->image = cgc_malloc(length);\n> \t\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n362a364,366\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n716,717c717,719\n< \tif (NewImage == NULL ) {\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif ((NewImage == (0)) && !1) {\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n617,618c618,622\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (pbs == (0)) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n349,355c350,359\n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return -1;\n> \t\t\tif (ybits > dictionary->charCount) {\n> \t\t\t    cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t\t\t    cgc_free(newFrame->image);\n> \t\t\t    newFrame->image = (0);\n> \t\t\t    cgc_free(newFrame);\n> \t\t\t    newFrame = (0);\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n359c360,363\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return -1;\n> \t\t\tnewFrame->image[xbits] = dictionary->pixelArray[ybits];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n705,706c706,708\n< \tif ( cgc_readBits( pbs, 32, &tdata) == 0 ) {\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 32, &tdata) == 0) || 1) {\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n164a166,168\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n285a287,289\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n212,213c213,215\n< \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 8, &flag) == 0) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n189,190c190,192\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pbs == (0)) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n716,717c717,719\n< \tif (NewImage == NULL ) {\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif ((NewImage == (0)) || 1) {\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n198,200c199,204\n< \tif ( pNewImage->height == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (pNewImage->height == 0) {\n> \t    cgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n198,200c199,204\n< \tif ( pNewImage->height == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (pNewImage->height == 0) {\n> \t    cgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n705,706c706,708\n< \tif ( cgc_readBits( pbs, 32, &tdata) == 0 ) {\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 32, &tdata) == 0) && !1) {\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n189,190c190,192\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pbs == (0)) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n286c287,289\n< \tlength = pNewImage->height * pNewImage->width;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    length = pNewImage->height * pNewImage->width;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n362a364,366\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n341,347c342,350\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (!1)\n> \t\t\t    if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t\t\t        cgc_free(newFrame->image);\n> \t\t\t        newFrame->image = (0);\n> \t\t\t        cgc_free(newFrame);\n> \t\t\t        newFrame = (0);\n> \t\t\t        return 0;\n> \t\t\t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n361a363,365\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n340,364c341,364\n< \t\twhile ( xbits < pixel_count ) {\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\t/// Set the frame image data\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \n< \t\t\t/// Clear the var\n< \t\t\tybits = 0;\n< \t\t\txbits++;\n< \t\t}\n---\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n> \t\twhile (xbits < pixel_count)\n> \t\t    {\n> \t\t        if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t\t            cgc_free(newFrame->image);\n> \t\t            newFrame->image = (0);\n> \t\t            cgc_free(newFrame);\n> \t\t            newFrame = (0);\n> \t\t            return 0;\n> \t\t        }\n> \t\t        if (ybits > dictionary->charCount) {\n> \t\t            cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t\t            cgc_free(newFrame->image);\n> \t\t            newFrame->image = (0);\n> \t\t            cgc_free(newFrame);\n> \t\t            newFrame = (0);\n> \t\t            return 0;\n> \t\t        }\n> \t\t        newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t\t        ybits = 0;\n> \t\t        xbits++;\n> \t\t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n161c162,164\n< \t\tcount++;\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    count++;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n156,157c157,161\n< \tif ( size == 0 ) {\n< \t\treturn 1;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (size == 0) {\n> \t    return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n301,330c302,325\n< \tif ( frame_type == 1 ) {\n< \n< \t\tpixel_count = 0;\n< \n< \t\t/// I do not subtract one here because it is not 0 indexed\n< \t\tpixel_index_length = cgc_bitsNeeded( length );\n< \n< \t\tif ( cgc_readBits( pbs, pixel_index_length, (&pixel_count)) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tif ( pixel_count == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// calculate the index length\n< \t\tpixel_count_bits = cgc_bitsNeeded( length - 1 );\n< \t} else {\n< \t\t/// For a full frame the number of pixels is height * width\n< \t\tpixel_count = length;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (frame_type == 1) {\n> \t        pixel_count = 0;\n> \t        pixel_index_length = cgc_bitsNeeded(length);\n> \t        if (cgc_readBits(pbs, pixel_index_length, (&pixel_count)) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        if (pixel_count == 0) {\n> \t            cgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        pixel_count_bits = cgc_bitsNeeded(length - 1);\n> \t    } else {\n> \t        pixel_count = length;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n617,618c618,622\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (pbs == (0)) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n709,711c710,713\n< \tif ( tdata != 0x00435646 ) {\n< \t\tcgc_printf(\"[ERROR] Invalid magic: $d\\n\", tdata);\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif ((tdata != 4412998) && !1) {\n> \t    cgc_printf(\"[ERROR] Invalid magic: $d\\n\", tdata);\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n699,700c700,702\n< \tif ( pbs == NULL ) {\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif ((pbs == (0)) || 1) {\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n802,803c803,805\n< \tif ( nc == NULL ) {\n< \t\treturn nc;\n---\n> \t//prophet generated patch\n> \tif ((nc == (0)) || 1) {\n> \t    return nc;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n176c177,180\n< \tppixelDict dictionary = NULL;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tppixelDict dictionary = (0);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n227c228,231\n< \tcustom_dict = flag&0x7;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tcustom_dict = flag & 7;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n338a340,342\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n244,272c245,277\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n< \t}\n---\n> \t} else //prophet generated patch\n> {\n>     if (!1)\n>         if (pixel_dict == 1) {\n>             standard_dictionary.charCount = 2;\n>             standard_dictionary.pixelArray = \" .\";\n>             dictionary = &standard_dictionary;\n>         } else if (pixel_dict == 2) {\n>             standard_dictionary.charCount = 4;\n>             standard_dictionary.pixelArray = \" .|#\";\n>             dictionary = &standard_dictionary;\n>         } else if (pixel_dict == 3) {\n>             standard_dictionary.charCount = 8;\n>             standard_dictionary.pixelArray = \" .|#@$()\";\n>             dictionary = &standard_dictionary;\n>         } else if (pixel_dict == 4) {\n>             standard_dictionary.charCount = 16;\n>             standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n>             dictionary = &standard_dictionary;\n>         } else if (pixel_dict == 5) {\n>             standard_dictionary.charCount = 42;\n>             standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n>             dictionary = &standard_dictionary;\n>         } else if (pixel_dict == 6) {\n>             standard_dictionary.charCount = 62;\n>             standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n>             dictionary = &standard_dictionary;\n>         } else if (pixel_dict == 7) {\n>             standard_dictionary.charCount = 95;\n>             standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n>             dictionary = &standard_dictionary;\n>         }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n236,271c237,271\n< \tif ( pixel_dict == 0 ) {\n< \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// Setup the pixel dictionary\n< \t\tdictionary = &(pNewImage->pds[custom_dict]);\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n---\n> \t//prophet generated patch\n> \tif ((pixel_dict == 0) || 1) {\n> \t    if (pNewImage->pds[custom_dict].charCount == 0) {\n> \t        cgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n> \t        return 0;\n> \t    }\n> \t    dictionary = &(pNewImage->pds[custom_dict]);\n> \t} else if (pixel_dict == 1) {\n> \t    standard_dictionary.charCount = 2;\n> \t    standard_dictionary.pixelArray = \" .\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 2) {\n> \t    standard_dictionary.charCount = 4;\n> \t    standard_dictionary.pixelArray = \" .|#\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 3) {\n> \t    standard_dictionary.charCount = 8;\n> \t    standard_dictionary.pixelArray = \" .|#@$()\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 4) {\n> \t    standard_dictionary.charCount = 16;\n> \t    standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 5) {\n> \t    standard_dictionary.charCount = 42;\n> \t    standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 6) {\n> \t    standard_dictionary.charCount = 62;\n> \t    standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 7) {\n> \t    standard_dictionary.charCount = 95;\n> \t    standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n> \t    dictionary = &standard_dictionary;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n349,355c350,357\n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif ((ybits > dictionary->charCount) && !1) {\n> \t\t\t    cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t\t\t    cgc_free(newFrame->image);\n> \t\t\t    newFrame->image = (0);\n> \t\t\t    cgc_free(newFrame);\n> \t\t\t    newFrame = (0);\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n341,346c342,350\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return 0;\n> \t\t\tif (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t\t\t    cgc_free(newFrame->image);\n> \t\t\t    newFrame->image = (0);\n> \t\t\t    cgc_free(newFrame);\n> \t\t\t    newFrame = (0);\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n339c340,342\n< \t\txbits = 0;\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    xbits = 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n244a246,248\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n282,284c283,287\n< \tif ( newFrame == NULL ) {\n< \t\treturn 0;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (newFrame == (0)) {\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n236,271c237,273\n< \tif ( pixel_dict == 0 ) {\n< \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// Setup the pixel dictionary\n< \t\tdictionary = &(pNewImage->pds[custom_dict]);\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (pixel_dict == 0) {\n> \t    if (pNewImage->pds[custom_dict].charCount == 0) {\n> \t        cgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n> \t        return 0;\n> \t    }\n> \t    dictionary = &(pNewImage->pds[custom_dict]);\n> \t} else if (pixel_dict == 1) {\n> \t    standard_dictionary.charCount = 2;\n> \t    standard_dictionary.pixelArray = \" .\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 2) {\n> \t    standard_dictionary.charCount = 4;\n> \t    standard_dictionary.pixelArray = \" .|#\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 3) {\n> \t    standard_dictionary.charCount = 8;\n> \t    standard_dictionary.pixelArray = \" .|#@$()\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 4) {\n> \t    standard_dictionary.charCount = 16;\n> \t    standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 5) {\n> \t    standard_dictionary.charCount = 42;\n> \t    standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 6) {\n> \t    standard_dictionary.charCount = 62;\n> \t    standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 7) {\n> \t    standard_dictionary.charCount = 95;\n> \t    standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n> \t    dictionary = &standard_dictionary;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n286a288,290\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n193,195c194,198\n< \tif ( pNewImage == NULL ) {\n< \t\treturn 0;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (pNewImage == (0)) {\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n349,355c350,357\n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif ((ybits > dictionary->charCount) || 1) {\n> \t\t\t    cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t\t\t    cgc_free(newFrame->image);\n> \t\t\t    newFrame->image = (0);\n> \t\t\t    cgc_free(newFrame);\n> \t\t\t    newFrame = (0);\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n156,158c157,161\n< \tif ( size == 0 ) {\n< \t\treturn 1;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (size == 0) {\n> \t        return 1;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n245a247,249\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n447c448,451\n< \tpNewImage->renderedFrames[ pNewImage->rCount ] = newFrame;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tpNewImage->renderedFrames[pNewImage->rCount] = newFrame;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n634,635c635,637\n< \tif ( cgc_readBits( pbs, 8, &(pNewImage->height) ) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 8, &(pNewImage->height)) == 0) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n217c218,220\n< \tframe_type = (flag >> 7) & 0x1;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    frame_type = (flag >> 7) & 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n179a181,183\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n153a155,157\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n677,679c678,681\n< \tif ( pNewImage->frameCount == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->frameCount == 0) && !1) {\n> \t    cgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n301,326c302,321\n< \tif ( frame_type == 1 ) {\n< \n< \t\tpixel_count = 0;\n< \n< \t\t/// I do not subtract one here because it is not 0 indexed\n< \t\tpixel_index_length = cgc_bitsNeeded( length );\n< \n< \t\tif ( cgc_readBits( pbs, pixel_index_length, (&pixel_count)) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tif ( pixel_count == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// calculate the index length\n< \t\tpixel_count_bits = cgc_bitsNeeded( length - 1 );\n---\n> \t//prophet generated patch\n> \tif ((frame_type == 1) || 1) {\n> \t    pixel_count = 0;\n> \t    pixel_index_length = cgc_bitsNeeded(length);\n> \t    if (cgc_readBits(pbs, pixel_index_length, (&pixel_count)) == 0) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    if (pixel_count == 0) {\n> \t        cgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    pixel_count_bits = cgc_bitsNeeded(length - 1);\n328,329c323\n< \t\t/// For a full frame the number of pixels is height * width\n< \t\tpixel_count = length;\n---\n> \t    pixel_count = length;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n335,368c336,361\n< \tif ( frame_type == 0 ) {\n< \t\t/// Set the base image to all spaces\n< \t\tcgc_memset( newFrame->image, 0x20, length );\n< \n< \t\txbits = 0;\n< \t\twhile ( xbits < pixel_count ) {\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\t/// Set the frame image data\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \n< \t\t\t/// Clear the var\n< \t\t\tybits = 0;\n< \t\t\txbits++;\n< \t\t}\n< \n< \t\t/// Calculate remaining bits\n< \t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n< \n---\n> \t//prophet generated patch\n> \tif ((frame_type == 0) && !1) {\n> \t    cgc_memset(newFrame->image, 32, length);\n> \t    xbits = 0;\n> \t    while (xbits < pixel_count)\n> \t        {\n> \t            if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            if (ybits > dictionary->charCount) {\n> \t                cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t            ybits = 0;\n> \t            xbits++;\n> \t        }\n> \t    xbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n370,431c363,411\n< \t\t/// An incremental image requires a copy of the previously rendered frame\n< \t\tif ( pNewImage->renderedFrames[ pNewImage->rCount - 1] == NULL ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n< \n< \t\t/// Read index and then pixel\n< \t\tfor ( int i = 0; i < pixel_count; i++ ) {\n< \t\t\txbits = 0;\n< \t\t\tybits = 0;\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_count_bits, &xbits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \n< \t\t\tif ( xbits >= length ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Index out of image bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits >= dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \t\t}\n< \n< \t\t/// Calculate the remaining padding\n< \t\t/// Pixel index bits + (index+value)*count\n< \t\txbits = pixel_index_length;\n< \t\txbits += ( pixel_count_bits + pixel_bits ) * pixel_count;\n< \t\txbits %= 8;\n< \t\txbits = (8 - xbits) % 8;\n---\n> \t    if (pNewImage->renderedFrames[pNewImage->rCount - 1] == (0)) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    cgc_memcpy(newFrame->image, pNewImage->renderedFrames[pNewImage->rCount - 1]->image, length);\n> \t    for (int i = 0; i < pixel_count; i++) {\n> \t        xbits = 0;\n> \t        ybits = 0;\n> \t        if (cgc_readBits(pbs, pixel_count_bits, &xbits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n> \t            return 0;\n> \t        }\n> \t        if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n> \t            return 0;\n> \t        }\n> \t        if (xbits >= length) {\n> \t            cgc_printf(\"[ERROR] Index out of image bounds\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        if (ybits >= dictionary->charCount) {\n> \t            cgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t    }\n> \t    xbits = pixel_index_length;\n> \t    xbits += (pixel_count_bits + pixel_bits) * pixel_count;\n> \t    xbits %= 8;\n> \t    xbits = (8 - xbits) % 8;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n361a363,365\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n186a188,190\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n175c176,179\n< \tpframe newFrame = NULL;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tpframe newFrame = (0);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n184a186,188\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n301,326c302,323\n< \tif ( frame_type == 1 ) {\n< \n< \t\tpixel_count = 0;\n< \n< \t\t/// I do not subtract one here because it is not 0 indexed\n< \t\tpixel_index_length = cgc_bitsNeeded( length );\n< \n< \t\tif ( cgc_readBits( pbs, pixel_index_length, (&pixel_count)) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tif ( pixel_count == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// calculate the index length\n< \t\tpixel_count_bits = cgc_bitsNeeded( length - 1 );\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (frame_type == 1) {\n> \t    pixel_count = 0;\n> \t    pixel_index_length = cgc_bitsNeeded(length);\n> \t    if (cgc_readBits(pbs, pixel_index_length, (&pixel_count)) == 0) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    if (pixel_count == 0) {\n> \t        cgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    pixel_count_bits = cgc_bitsNeeded(length - 1);\n328,329c325\n< \t\t/// For a full frame the number of pixels is height * width\n< \t\tpixel_count = length;\n---\n> \t    pixel_count = length;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n341,346c342,348\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif ((cgc_readBits(pbs, pixel_bits, &ybits) == 0) || 1) {\n> \t\t\t    cgc_free(newFrame->image);\n> \t\t\t    newFrame->image = (0);\n> \t\t\t    cgc_free(newFrame);\n> \t\t\t    newFrame = (0);\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n329c330,332\n< \t\tpixel_count = length;\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    pixel_count = length;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n176a178,180\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n181a183,185\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n185a187,189\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n685,686c686,688\n< \tif ( pNewImage->renderedFrames == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->renderedFrames == (0)) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n217c218,221\n< \tframe_type = (flag >> 7) & 0x1;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tframe_type = (flag >> 7) & 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n677,679c678,681\n< \tif ( pNewImage->frameCount == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->frameCount == 0) || 1) {\n> \t    cgc_printf(\"[ERROR] Zero frame count is not permitted\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n246a248,250\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n301,326c302,321\n< \tif ( frame_type == 1 ) {\n< \n< \t\tpixel_count = 0;\n< \n< \t\t/// I do not subtract one here because it is not 0 indexed\n< \t\tpixel_index_length = cgc_bitsNeeded( length );\n< \n< \t\tif ( cgc_readBits( pbs, pixel_index_length, (&pixel_count)) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tif ( pixel_count == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// calculate the index length\n< \t\tpixel_count_bits = cgc_bitsNeeded( length - 1 );\n---\n> \t//prophet generated patch\n> \tif ((frame_type == 1) && !1) {\n> \t    pixel_count = 0;\n> \t    pixel_index_length = cgc_bitsNeeded(length);\n> \t    if (cgc_readBits(pbs, pixel_index_length, (&pixel_count)) == 0) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    if (pixel_count == 0) {\n> \t        cgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    pixel_count_bits = cgc_bitsNeeded(length - 1);\n328,329c323\n< \t\t/// For a full frame the number of pixels is height * width\n< \t\tpixel_count = length;\n---\n> \t    pixel_count = length;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n182a184,186\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n193,194c194,198\n< \tif ( pNewImage == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (pNewImage == (0)) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n164a166,168\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n189,191c190,194\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (pbs == (0)) {\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n198,200c199,202\n< \tif ( pNewImage->height == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->height == 0) || 1) {\n> \t    cgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n277c278,281\n< \tpixel_bits = cgc_bitsNeeded( dictionary->charCount - 1);\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tpixel_bits = cgc_bitsNeeded(dictionary->charCount - 1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n660,662c661,664\n< \tif ( pNewImage->width > 128 ) {\n< \t\tcgc_printf(\"[ERROR] Width must be less than 128\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->width > 128) || 1) {\n> \t    cgc_printf(\"[ERROR] Width must be less than 128\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n282,283c283,285\n< \tif ( newFrame == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((newFrame == (0)) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n292,295c293,297\n< \tif ( newFrame->image == NULL ) {\n< \t\tcgc_free(newFrame);\n< \t\tnewFrame = NULL;\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((newFrame->image == (0)) || 1) {\n> \t    cgc_free(newFrame);\n> \t    newFrame = (0);\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n162c163,165\n< \t\tsize >>= 1;\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    size >>= 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n230,232c231,236\n< \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n< \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (pNewImage->rCount == 0 && frame_type != 0) {\n> \t    cgc_printf(\"[ERROR] First frame must be full\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n288c289,291\n< \tnewFrame->width = pNewImage->width;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    newFrame->width = pNewImage->width;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n290c291,295\n< \tnewFrame->image = cgc_malloc( length );\t\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tnewFrame->image = cgc_malloc(length);\n> \t\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n280c281,284\n< \tnewFrame = cgc_malloc( sizeof(frame) );\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tnewFrame = cgc_malloc(sizeof(frame));\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n301,326c302,323\n< \tif ( frame_type == 1 ) {\n< \n< \t\tpixel_count = 0;\n< \n< \t\t/// I do not subtract one here because it is not 0 indexed\n< \t\tpixel_index_length = cgc_bitsNeeded( length );\n< \n< \t\tif ( cgc_readBits( pbs, pixel_index_length, (&pixel_count)) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tif ( pixel_count == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// calculate the index length\n< \t\tpixel_count_bits = cgc_bitsNeeded( length - 1 );\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (frame_type == 1) {\n> \t    pixel_count = 0;\n> \t    pixel_index_length = cgc_bitsNeeded(length);\n> \t    if (cgc_readBits(pbs, pixel_index_length, (&pixel_count)) == 0) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    if (pixel_count == 0) {\n> \t        cgc_printf(\"[ERROR] Empty frames not allowed\\n\");\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    pixel_count_bits = cgc_bitsNeeded(length - 1);\n328,329c325\n< \t\t/// For a full frame the number of pixels is height * width\n< \t\tpixel_count = length;\n---\n> \t    pixel_count = length;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n176c177,180\n< \tppixelDict dictionary = NULL;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tppixelDict dictionary = (0);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n335,368c336,363\n< \tif ( frame_type == 0 ) {\n< \t\t/// Set the base image to all spaces\n< \t\tcgc_memset( newFrame->image, 0x20, length );\n< \n< \t\txbits = 0;\n< \t\twhile ( xbits < pixel_count ) {\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\t/// Set the frame image data\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \n< \t\t\t/// Clear the var\n< \t\t\tybits = 0;\n< \t\t\txbits++;\n< \t\t}\n< \n< \t\t/// Calculate remaining bits\n< \t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n< \n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (frame_type == 0) {\n> \t    cgc_memset(newFrame->image, 32, length);\n> \t    xbits = 0;\n> \t    while (xbits < pixel_count)\n> \t        {\n> \t            if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            if (ybits > dictionary->charCount) {\n> \t                cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t            ybits = 0;\n> \t            xbits++;\n> \t        }\n> \t    xbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n370,431c365,413\n< \t\t/// An incremental image requires a copy of the previously rendered frame\n< \t\tif ( pNewImage->renderedFrames[ pNewImage->rCount - 1] == NULL ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n< \n< \t\t/// Read index and then pixel\n< \t\tfor ( int i = 0; i < pixel_count; i++ ) {\n< \t\t\txbits = 0;\n< \t\t\tybits = 0;\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_count_bits, &xbits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \n< \t\t\tif ( xbits >= length ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Index out of image bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits >= dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \t\t}\n< \n< \t\t/// Calculate the remaining padding\n< \t\t/// Pixel index bits + (index+value)*count\n< \t\txbits = pixel_index_length;\n< \t\txbits += ( pixel_count_bits + pixel_bits ) * pixel_count;\n< \t\txbits %= 8;\n< \t\txbits = (8 - xbits) % 8;\n---\n> \t    if (pNewImage->renderedFrames[pNewImage->rCount - 1] == (0)) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    cgc_memcpy(newFrame->image, pNewImage->renderedFrames[pNewImage->rCount - 1]->image, length);\n> \t    for (int i = 0; i < pixel_count; i++) {\n> \t        xbits = 0;\n> \t        ybits = 0;\n> \t        if (cgc_readBits(pbs, pixel_count_bits, &xbits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n> \t            return 0;\n> \t        }\n> \t        if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n> \t            return 0;\n> \t        }\n> \t        if (xbits >= length) {\n> \t            cgc_printf(\"[ERROR] Index out of image bounds\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        if (ybits >= dictionary->charCount) {\n> \t            cgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t    }\n> \t    xbits = pixel_index_length;\n> \t    xbits += (pixel_count_bits + pixel_bits) * pixel_count;\n> \t    xbits %= 8;\n> \t    xbits = (8 - xbits) % 8;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n247c248,250\n< \t\tdictionary = &standard_dictionary;\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    dictionary = &standard_dictionary;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n161a163,165\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n628,630c629,632\n< \tif ( pNewImage->height != 0 ) {\n< \t\tcgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->height != 0) && !1) {\n> \t    cgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n292,295c293,299\n< \tif ( newFrame->image == NULL ) {\n< \t\tcgc_free(newFrame);\n< \t\tnewFrame = NULL;\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (newFrame->image == (0)) {\n> \t    cgc_free(newFrame);\n> \t    newFrame = (0);\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n638,640c639,642\n< \tif ( pNewImage->height == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->height == 0) || 1) {\n> \t    cgc_printf(\"[ERROR] Zero length height is not permitted\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n359c360,363\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return 0;\n> \t\t\tnewFrame->image[xbits] = dictionary->pixelArray[ybits];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n224c225,228\n< \tpixel_dict = (flag>>3) & 0x7;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tpixel_dict = (flag >> 3) & 7;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n650,651c651,653\n< \tif ( cgc_readBits( pbs, 8, &(pNewImage->width) ) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 8, &(pNewImage->width)) == 0) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n287a289,291\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n337c338,340\n< \t\tcgc_memset( newFrame->image, 0x20, length );\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    cgc_memset(newFrame->image, 32, length);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n153a155,157\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n435,443c436,447\n< \tif ( xbits ) {\n< \t\tif ( cgc_readBits( pbs, xbits, &ybits) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n< \t\t\treturn 0;\n< \t\t}\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (xbits) {\n> \t    if (cgc_readBits(pbs, xbits, &ybits) == 0) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        cgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n156,157c157,159\n< \tif ( size == 0 ) {\n< \t\treturn 1;\n---\n> \t//prophet generated patch\n> \tif ((size == 0) && !1) {\n> \t    return 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n654,656c655,658\n< \tif ( pNewImage->width == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->width == 0) || 1) {\n> \t    cgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n212,213c213,215\n< \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 8, &flag) == 0) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n193,194c194,196\n< \tif ( pNewImage == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage == (0)) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n161a163,165\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n221c222,225\n< \tindex_type = (flag>>6) & 0x1;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tindex_type = (flag >> 6) & 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n186a188,190\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n182a184,186\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n246c247,249\n< \t\tstandard_dictionary.pixelArray = \" .\";\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    standard_dictionary.pixelArray = \" .\";\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n282,283c283,287\n< \tif ( newFrame == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (newFrame == (0)) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n337c338,341\n< \t\tcgc_memset( newFrame->image, 0x20, length );\n---\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n> \t\tcgc_memset(newFrame->image, 32, length);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n338a340,342\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n160a162,164\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n285a287,289\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n184a186,188\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n621,622c622,624\n< \tif ( pNewImage == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage == (0)) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n709,711c710,713\n< \tif ( tdata != 0x00435646 ) {\n< \t\tcgc_printf(\"[ERROR] Invalid magic: $d\\n\", tdata);\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif ((tdata != 4412998) || 1) {\n> \t    cgc_printf(\"[ERROR] Invalid magic: $d\\n\", tdata);\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n335,368c336,363\n< \tif ( frame_type == 0 ) {\n< \t\t/// Set the base image to all spaces\n< \t\tcgc_memset( newFrame->image, 0x20, length );\n< \n< \t\txbits = 0;\n< \t\twhile ( xbits < pixel_count ) {\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\t/// Set the frame image data\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \n< \t\t\t/// Clear the var\n< \t\t\tybits = 0;\n< \t\t\txbits++;\n< \t\t}\n< \n< \t\t/// Calculate remaining bits\n< \t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n< \n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (frame_type == 0) {\n> \t    cgc_memset(newFrame->image, 32, length);\n> \t    xbits = 0;\n> \t    while (xbits < pixel_count)\n> \t        {\n> \t            if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            if (ybits > dictionary->charCount) {\n> \t                cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t            ybits = 0;\n> \t            xbits++;\n> \t        }\n> \t    xbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n370,431c365,413\n< \t\t/// An incremental image requires a copy of the previously rendered frame\n< \t\tif ( pNewImage->renderedFrames[ pNewImage->rCount - 1] == NULL ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n< \n< \t\t/// Read index and then pixel\n< \t\tfor ( int i = 0; i < pixel_count; i++ ) {\n< \t\t\txbits = 0;\n< \t\t\tybits = 0;\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_count_bits, &xbits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \n< \t\t\tif ( xbits >= length ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Index out of image bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits >= dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \t\t}\n< \n< \t\t/// Calculate the remaining padding\n< \t\t/// Pixel index bits + (index+value)*count\n< \t\txbits = pixel_index_length;\n< \t\txbits += ( pixel_count_bits + pixel_bits ) * pixel_count;\n< \t\txbits %= 8;\n< \t\txbits = (8 - xbits) % 8;\n---\n> \t    if (pNewImage->renderedFrames[pNewImage->rCount - 1] == (0)) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    cgc_memcpy(newFrame->image, pNewImage->renderedFrames[pNewImage->rCount - 1]->image, length);\n> \t    for (int i = 0; i < pixel_count; i++) {\n> \t        xbits = 0;\n> \t        ybits = 0;\n> \t        if (cgc_readBits(pbs, pixel_count_bits, &xbits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n> \t            return 0;\n> \t        }\n> \t        if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n> \t            return 0;\n> \t        }\n> \t        if (xbits >= length) {\n> \t            cgc_printf(\"[ERROR] Index out of image bounds\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        if (ybits >= dictionary->charCount) {\n> \t            cgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t    }\n> \t    xbits = pixel_index_length;\n> \t    xbits += (pixel_count_bits + pixel_bits) * pixel_count;\n> \t    xbits %= 8;\n> \t    xbits = (8 - xbits) % 8;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n244,272c245,276\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n< \t}\n---\n> \t} else //prophet generated patch\n> {\n>     if ((pixel_dict == 1) || 1) {\n>         standard_dictionary.charCount = 2;\n>         standard_dictionary.pixelArray = \" .\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 2) {\n>         standard_dictionary.charCount = 4;\n>         standard_dictionary.pixelArray = \" .|#\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 3) {\n>         standard_dictionary.charCount = 8;\n>         standard_dictionary.pixelArray = \" .|#@$()\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 4) {\n>         standard_dictionary.charCount = 16;\n>         standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 5) {\n>         standard_dictionary.charCount = 42;\n>         standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 6) {\n>         standard_dictionary.charCount = 62;\n>         standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 7) {\n>         standard_dictionary.charCount = 95;\n>         standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n>         dictionary = &standard_dictionary;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n212,213c213,217\n< \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (cgc_readBits(pbs, 8, &flag) == 0) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n654,656c655,658\n< \tif ( pNewImage->width == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->width == 0) && !1) {\n> \t    cgc_printf(\"[ERROR] Zero length width is not permitted\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n198,201c199,204\n< \tif ( pNewImage->height == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n< \t\treturn 0;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (pNewImage->height == 0) {\n> \t        cgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n217c218,221\n< \tframe_type = (flag >> 7) & 0x1;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tframe_type = (flag >> 7) & 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n341,346c342,350\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (1)\n> \t\t\t    return -1;\n> \t\t\tif (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t\t\t    cgc_free(newFrame->image);\n> \t\t\t    newFrame->image = (0);\n> \t\t\t    cgc_free(newFrame);\n> \t\t\t    newFrame = (0);\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n617,618c618,620\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pbs == (0)) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n628,630c629,632\n< \tif ( pNewImage->height != 0 ) {\n< \t\tcgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->height != 0) || 1) {\n> \t    cgc_printf(\"[ERROR] Multiple header sections are not permitted.\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n189,190c190,194\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (pbs == (0)) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n728,783c729,779\n< \t\tswitch( tdata ) {\n< \t\t\tcase 0x1111:\n< \t\t\t\tif ( cgc_parseCVFHeader( pbs, NewImage ) == 0 ) {\n< \t\t\t\t\tcgc_freeCVF( NewImage );\n< \t\t\t\t\tNewImage = NULL;\n< \t\t\t\t\treturn;\n< \t\t\t\t}\n< \n< \t\t\t\tbreak;\n< \t\t\tcase 0x2222:\n< \t\t\t\tif ( cgc_parseCVFName( pbs, NewImage ) == 0 ) {\n< \t\t\t\t\tcgc_freeCVF( NewImage );\n< \t\t\t\t\tNewImage = NULL;\n< \t\t\t\t\treturn;\n< \t\t\t\t}\n< \n< \t\t\t\tbreak;\n< \t\t\tcase 0x3333:\n< \t\t\t\tif ( cgc_parseCVFDescription( pbs, NewImage ) == 0 ) {\n< \t\t\t\t\tcgc_freeCVF( NewImage);\n< \t\t\t\t\tNewImage = NULL;\n< \t\t\t\t\treturn;\n< \t\t\t\t}\n< \n< \t\t\t\tbreak;\n< \t\t\tcase 0x4444:\n< \t\t\tcase 0x4445:\n< \t\t\tcase 0x4446:\n< \t\t\tcase 0x4447:\n< \t\t\tcase 0x4448:\n< \t\t\tcase 0x4449:\n< \t\t\tcase 0x444A:\n< \t\t\tcase 0x444B:\n< \t\t\t\ttdata -= 0x4444;\n< \n< \t\t\t\tif ( cgc_parseCVFPixelDict( pbs, NewImage, tdata) == 0 ) {\n< \t\t\t\t\tcgc_freeCVF( NewImage );\n< \t\t\t\t\tNewImage = NULL;\n< \t\t\t\t\treturn;\n< \t\t\t\t}\n< \n< \t\t\t\tbreak;\n< \t\t\tcase 0x5555:\n< \n< \t\t\t\tif ( cgc_parseCVFFrame( pbs, NewImage ) == 0 ) {\n< \t\t\t\t\tcgc_freeCVF( NewImage );\n< \t\t\t\t\tNewImage = NULL;\n< \t\t\t\t\treturn;\n< \t\t\t\t}\n< \n< \t\t\t\tbreak;\n< \t\t\tdefault:\n< \t\t\t\tcgc_printf(\"[ERROR] Invalid section type: $d\\n\", tdata);\n< \t\t\t\treturn;\n< \t\t\t\tbreak;\n< \n---\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return;\n> \t\tswitch (tdata) {\n> \t\t  case 4369:\n> \t\t    if (cgc_parseCVFHeader(pbs, NewImage) == 0) {\n> \t\t        cgc_freeCVF(NewImage);\n> \t\t        NewImage = (0);\n> \t\t        return;\n> \t\t    }\n> \t\t    break;\n> \t\t  case 8738:\n> \t\t    if (cgc_parseCVFName(pbs, NewImage) == 0) {\n> \t\t        cgc_freeCVF(NewImage);\n> \t\t        NewImage = (0);\n> \t\t        return;\n> \t\t    }\n> \t\t    break;\n> \t\t  case 13107:\n> \t\t    if (cgc_parseCVFDescription(pbs, NewImage) == 0) {\n> \t\t        cgc_freeCVF(NewImage);\n> \t\t        NewImage = (0);\n> \t\t        return;\n> \t\t    }\n> \t\t    break;\n> \t\t  case 17476:\n> \t\t  case 17477:\n> \t\t  case 17478:\n> \t\t  case 17479:\n> \t\t  case 17480:\n> \t\t  case 17481:\n> \t\t  case 17482:\n> \t\t  case 17483:\n> \t\t    tdata -= 17476;\n> \t\t    if (cgc_parseCVFPixelDict(pbs, NewImage, tdata) == 0) {\n> \t\t        cgc_freeCVF(NewImage);\n> \t\t        NewImage = (0);\n> \t\t        return;\n> \t\t    }\n> \t\t    break;\n> \t\t  case 21845:\n> \t\t    if (cgc_parseCVFFrame(pbs, NewImage) == 0) {\n> \t\t        cgc_freeCVF(NewImage);\n> \t\t        NewImage = (0);\n> \t\t        return;\n> \t\t    }\n> \t\t    break;\n> \t\t  default:\n> \t\t    cgc_printf(\"[ERROR] Invalid section type: $d\\n\", tdata);\n> \t\t    return;\n> \t\t    break;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n362c363,365\n< \t\t\tybits = 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (!1)\n> \t\t\t    ybits = 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n280c281,283\n< \tnewFrame = cgc_malloc( sizeof(frame) );\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    newFrame = cgc_malloc(sizeof(frame));\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n227c228,231\n< \tcustom_dict = flag&0x7;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tcustom_dict = flag & 7;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n160,163c161,167\n< \twhile ( size ) {\n< \t\tcount++;\n< \t\tsize >>= 1;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    while (size)\n> \t        {\n> \t            count++;\n> \t            size >>= 1;\n> \t        }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n341,346c342,348\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif ((cgc_readBits(pbs, pixel_bits, &ybits) == 0) && !1) {\n> \t\t\t    cgc_free(newFrame->image);\n> \t\t\t    newFrame->image = (0);\n> \t\t\t    cgc_free(newFrame);\n> \t\t\t    newFrame = (0);\n> \t\t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n178a180,182\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n230,233c231,236\n< \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n< \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n< \t\treturn 0;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (pNewImage->rCount == 0 && frame_type != 0) {\n> \t        cgc_printf(\"[ERROR] First frame must be full\\n\");\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n277c278,281\n< \tpixel_bits = cgc_bitsNeeded( dictionary->charCount - 1);\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tpixel_bits = cgc_bitsNeeded(dictionary->charCount - 1);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n359c360,362\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (!1)\n> \t\t\t    newFrame->image[xbits] = dictionary->pixelArray[ybits];\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n435,444c436,447\n< \tif ( xbits ) {\n< \t\tif ( cgc_readBits( pbs, xbits, &ybits) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n< \t\t\treturn 0;\n< \t\t}\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (xbits) {\n> \t        if (cgc_readBits(pbs, xbits, &ybits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n> \t            return 0;\n> \t        }\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n212,214c213,217\n< \tif ( cgc_readBits( pbs, 8, &flag) == 0 ) {\n< \t\treturn 0;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (cgc_readBits(pbs, 8, &flag) == 0) {\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n644,646c645,648\n< \tif ( pNewImage->height > 35 ) {\n< \t\tcgc_printf(\"[ERROR] Height must be less than 35\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->height > 35) && !1) {\n> \t    cgc_printf(\"[ERROR] Height must be less than 35\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n447c448,451\n< \tpNewImage->renderedFrames[ pNewImage->rCount ] = newFrame;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tpNewImage->renderedFrames[pNewImage->rCount] = newFrame;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n800c801,804\n< \tnc = cgc_malloc( sizeof( cvf ) );\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tnc = cgc_malloc(sizeof(cvf));\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n193,194c194,198\n< \tif ( pNewImage == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (pNewImage == (0)) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n181a183,185\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n244,272c245,278\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n< \t}\n---\n> \t} else //prophet generated patch\n> {\n>     if (1)\n>         return 0;\n>     if (pixel_dict == 1) {\n>         standard_dictionary.charCount = 2;\n>         standard_dictionary.pixelArray = \" .\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 2) {\n>         standard_dictionary.charCount = 4;\n>         standard_dictionary.pixelArray = \" .|#\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 3) {\n>         standard_dictionary.charCount = 8;\n>         standard_dictionary.pixelArray = \" .|#@$()\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 4) {\n>         standard_dictionary.charCount = 16;\n>         standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 5) {\n>         standard_dictionary.charCount = 42;\n>         standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 6) {\n>         standard_dictionary.charCount = 62;\n>         standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n>         dictionary = &standard_dictionary;\n>     } else if (pixel_dict == 7) {\n>         standard_dictionary.charCount = 95;\n>         standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n>         dictionary = &standard_dictionary;\n>     }\n> }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n175c176,179\n< \tpframe newFrame = NULL;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tpframe newFrame = (0);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n621,622c622,624\n< \tif ( pNewImage == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage == (0)) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n286a288,290\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n367c368,370\n< \t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    xbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n198,200c199,202\n< \tif ( pNewImage->height == 0 ) {\n< \t\tcgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->height == 0) && !1) {\n> \t    cgc_printf(\"[ERROR] Header must be specified prior to frame rendering.\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n173a175,177\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n282,283c283,287\n< \tif ( newFrame == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (newFrame == (0)) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n193,194c194,196\n< \tif ( pNewImage == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage == (0)) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n224c225,228\n< \tpixel_dict = (flag>>3) & 0x7;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tpixel_dict = (flag >> 3) & 7;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n435,443c436,445\n< \tif ( xbits ) {\n< \t\tif ( cgc_readBits( pbs, xbits, &ybits) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n< \t\t\treturn 0;\n< \t\t}\n---\n> \t//prophet generated patch\n> \tif ((xbits) || 1) {\n> \t    if (cgc_readBits(pbs, xbits, &ybits) == 0) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        cgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n221c222,225\n< \tindex_type = (flag>>6) & 0x1;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tindex_type = (flag >> 6) & 1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n660,662c661,664\n< \tif ( pNewImage->width > 128 ) {\n< \t\tcgc_printf(\"[ERROR] Width must be less than 128\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->width > 128) && !1) {\n> \t    cgc_printf(\"[ERROR] Width must be less than 128\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n292,296c293,299\n< \tif ( newFrame->image == NULL ) {\n< \t\tcgc_free(newFrame);\n< \t\tnewFrame = NULL;\n< \t\treturn 0;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (newFrame->image == (0)) {\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n227c228,230\n< \tcustom_dict = flag&0x7;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    custom_dict = flag & 7;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n183a185,187\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n245a247,249\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n337c338,341\n< \t\tcgc_memset( newFrame->image, 0x20, length );\n---\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n> \t\tcgc_memset(newFrame->image, 32, length);\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n246a248,250\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n634,635c635,637\n< \tif ( cgc_readBits( pbs, 8, &(pNewImage->height) ) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 8, &(pNewImage->height)) == 0) || 1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n435,443c436,445\n< \tif ( xbits ) {\n< \t\tif ( cgc_readBits( pbs, xbits, &ybits) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n< \t\t\treturn 0;\n< \t\t}\n---\n> \t//prophet generated patch\n> \tif ((xbits) && !1) {\n> \t    if (cgc_readBits(pbs, xbits, &ybits) == 0) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        cgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n189,190c190,194\n< \tif ( pbs == NULL ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (pbs == (0)) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n666,667c667,669\n< \tif ( cgc_readBits( pbs, 16, &(pNewImage->frameCount) ) == 0 ) {\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((cgc_readBits(pbs, 16, &(pNewImage->frameCount)) == 0) && !1) {\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n236,271c237,271\n< \tif ( pixel_dict == 0 ) {\n< \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// Setup the pixel dictionary\n< \t\tdictionary = &(pNewImage->pds[custom_dict]);\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n---\n> \t//prophet generated patch\n> \tif ((pixel_dict == 0) && !1) {\n> \t    if (pNewImage->pds[custom_dict].charCount == 0) {\n> \t        cgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n> \t        return 0;\n> \t    }\n> \t    dictionary = &(pNewImage->pds[custom_dict]);\n> \t} else if (pixel_dict == 1) {\n> \t    standard_dictionary.charCount = 2;\n> \t    standard_dictionary.pixelArray = \" .\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 2) {\n> \t    standard_dictionary.charCount = 4;\n> \t    standard_dictionary.pixelArray = \" .|#\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 3) {\n> \t    standard_dictionary.charCount = 8;\n> \t    standard_dictionary.pixelArray = \" .|#@$()\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 4) {\n> \t    standard_dictionary.charCount = 16;\n> \t    standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 5) {\n> \t    standard_dictionary.charCount = 42;\n> \t    standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 6) {\n> \t    standard_dictionary.charCount = 62;\n> \t    standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 7) {\n> \t    standard_dictionary.charCount = 95;\n> \t    standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n> \t    dictionary = &standard_dictionary;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n230,232c231,236\n< \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n< \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (pNewImage->rCount == 0 && frame_type != 0) {\n> \t    cgc_printf(\"[ERROR] First frame must be full\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n287c288,290\n< \tnewFrame->height = pNewImage->height;\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    newFrame->height = pNewImage->height;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n236,272c237,273\n< \tif ( pixel_dict == 0 ) {\n< \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// Setup the pixel dictionary\n< \t\tdictionary = &(pNewImage->pds[custom_dict]);\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n< \t}\n---\n> \t//prophet generated patch\n> \tif (!1)\n> \t    if (pixel_dict == 0) {\n> \t        if (pNewImage->pds[custom_dict].charCount == 0) {\n> \t            cgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n> \t            return 0;\n> \t        }\n> \t        dictionary = &(pNewImage->pds[custom_dict]);\n> \t    } else if (pixel_dict == 1) {\n> \t        standard_dictionary.charCount = 2;\n> \t        standard_dictionary.pixelArray = \" .\";\n> \t        dictionary = &standard_dictionary;\n> \t    } else if (pixel_dict == 2) {\n> \t        standard_dictionary.charCount = 4;\n> \t        standard_dictionary.pixelArray = \" .|#\";\n> \t        dictionary = &standard_dictionary;\n> \t    } else if (pixel_dict == 3) {\n> \t        standard_dictionary.charCount = 8;\n> \t        standard_dictionary.pixelArray = \" .|#@$()\";\n> \t        dictionary = &standard_dictionary;\n> \t    } else if (pixel_dict == 4) {\n> \t        standard_dictionary.charCount = 16;\n> \t        standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n> \t        dictionary = &standard_dictionary;\n> \t    } else if (pixel_dict == 5) {\n> \t        standard_dictionary.charCount = 42;\n> \t        standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n> \t        dictionary = &standard_dictionary;\n> \t    } else if (pixel_dict == 6) {\n> \t        standard_dictionary.charCount = 62;\n> \t        standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n> \t        dictionary = &standard_dictionary;\n> \t    } else if (pixel_dict == 7) {\n> \t        standard_dictionary.charCount = 95;\n> \t        standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n> \t        dictionary = &standard_dictionary;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n280c281,284\n< \tnewFrame = cgc_malloc( sizeof(frame) );\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tnewFrame = cgc_malloc(sizeof(frame));\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n244a246,248\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return -1;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n230,232c231,234\n< \tif ( pNewImage->rCount == 0 && frame_type != 0 ) {\n< \t\tcgc_printf(\"[ERROR] First frame must be full\\n\");\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif ((pNewImage->rCount == 0 && frame_type != 0) && !1) {\n> \t    cgc_printf(\"[ERROR] First frame must be full\\n\");\n> \t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n245c246,248\n< \t\tstandard_dictionary.charCount = 2;\n---\n> \t\t//prophet generated patch\n> \t\tif (!1)\n> \t\t    standard_dictionary.charCount = 2;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n363c364,366\n< \t\t\txbits++;\n---\n> \t\t\t//prophet generated patch\n> \t\t\tif (!1)\n> \t\t\t    xbits++;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n335,368c336,361\n< \tif ( frame_type == 0 ) {\n< \t\t/// Set the base image to all spaces\n< \t\tcgc_memset( newFrame->image, 0x20, length );\n< \n< \t\txbits = 0;\n< \t\twhile ( xbits < pixel_count ) {\n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits > dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] invalid pixel\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\t/// Set the frame image data\n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \n< \t\t\t/// Clear the var\n< \t\t\tybits = 0;\n< \t\t\txbits++;\n< \t\t}\n< \n< \t\t/// Calculate remaining bits\n< \t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n< \n---\n> \t//prophet generated patch\n> \tif ((frame_type == 0) || 1) {\n> \t    cgc_memset(newFrame->image, 32, length);\n> \t    xbits = 0;\n> \t    while (xbits < pixel_count)\n> \t        {\n> \t            if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            if (ybits > dictionary->charCount) {\n> \t                cgc_printf(\"[ERROR] invalid pixel\\n\");\n> \t                cgc_free(newFrame->image);\n> \t                newFrame->image = (0);\n> \t                cgc_free(newFrame);\n> \t                newFrame = (0);\n> \t                return 0;\n> \t            }\n> \t            newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t            ybits = 0;\n> \t            xbits++;\n> \t        }\n> \t    xbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n370,431c363,411\n< \t\t/// An incremental image requires a copy of the previously rendered frame\n< \t\tif ( pNewImage->renderedFrames[ pNewImage->rCount - 1] == NULL ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\tcgc_memcpy( newFrame->image, pNewImage->renderedFrames[ pNewImage->rCount-1 ]->image, length );\n< \n< \t\t/// Read index and then pixel\n< \t\tfor ( int i = 0; i < pixel_count; i++ ) {\n< \t\t\txbits = 0;\n< \t\t\tybits = 0;\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_count_bits, &xbits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( cgc_readBits( pbs, pixel_bits, &ybits) == 0 ) {\n< \t\t\t\tcgc_free( newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\tcgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \n< \t\t\tif ( xbits >= length ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Index out of image bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tif ( ybits >= dictionary->charCount ) {\n< \t\t\t\tcgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n< \t\t\t\tcgc_free(newFrame->image);\n< \t\t\t\tnewFrame->image = NULL;\n< \t\t\t\tcgc_free(newFrame);\n< \t\t\t\tnewFrame = NULL;\n< \t\t\t\treturn 0;\n< \t\t\t}\n< \n< \t\t\tnewFrame->image[ xbits ] = dictionary->pixelArray[ybits];\n< \t\t}\n< \n< \t\t/// Calculate the remaining padding\n< \t\t/// Pixel index bits + (index+value)*count\n< \t\txbits = pixel_index_length;\n< \t\txbits += ( pixel_count_bits + pixel_bits ) * pixel_count;\n< \t\txbits %= 8;\n< \t\txbits = (8 - xbits) % 8;\n---\n> \t    if (pNewImage->renderedFrames[pNewImage->rCount - 1] == (0)) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        return 0;\n> \t    }\n> \t    cgc_memcpy(newFrame->image, pNewImage->renderedFrames[pNewImage->rCount - 1]->image, length);\n> \t    for (int i = 0; i < pixel_count; i++) {\n> \t        xbits = 0;\n> \t        ybits = 0;\n> \t        if (cgc_readBits(pbs, pixel_count_bits, &xbits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read pixel index\\n\");\n> \t            return 0;\n> \t        }\n> \t        if (cgc_readBits(pbs, pixel_bits, &ybits) == 0) {\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            cgc_printf(\"[ERROR] Failed to read pixel value\\n\");\n> \t            return 0;\n> \t        }\n> \t        if (xbits >= length) {\n> \t            cgc_printf(\"[ERROR] Index out of image bounds\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        if (ybits >= dictionary->charCount) {\n> \t            cgc_printf(\"[ERROR] Pixel beyond dictionary bounds\\n\");\n> \t            cgc_free(newFrame->image);\n> \t            newFrame->image = (0);\n> \t            cgc_free(newFrame);\n> \t            newFrame = (0);\n> \t            return 0;\n> \t        }\n> \t        newFrame->image[xbits] = dictionary->pixelArray[ybits];\n> \t    }\n> \t    xbits = pixel_index_length;\n> \t    xbits += (pixel_count_bits + pixel_bits) * pixel_count;\n> \t    xbits %= 8;\n> \t    xbits = (8 - xbits) % 8;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n328a330,332\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n699,700c700,704\n< \tif ( pbs == NULL ) {\n< \t\treturn;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return;\n> \tif (pbs == (0)) {\n> \t    return;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n236,271c237,273\n< \tif ( pixel_dict == 0 ) {\n< \t\tif ( pNewImage->pds[custom_dict].charCount == 0 ) {\n< \t\t\tcgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n< \t\t\treturn 0;\n< \t\t}\n< \n< \t\t/// Setup the pixel dictionary\n< \t\tdictionary = &(pNewImage->pds[custom_dict]);\n< \t} else if ( pixel_dict == 1 ) {\n< \t\tstandard_dictionary.charCount = 2;\n< \t\tstandard_dictionary.pixelArray = \" .\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 2 ) {\n< \t\tstandard_dictionary.charCount = 4;\n< \t\tstandard_dictionary.pixelArray = \" .|#\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 3 ) {\n< \t\tstandard_dictionary.charCount = 8;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 4 ) {\n< \t\tstandard_dictionary.charCount = 16;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 5 ) {\n< \t\tstandard_dictionary.charCount = 42;\n< \t\tstandard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 6 ) {\n< \t\tstandard_dictionary.charCount = 62;\n< \t\tstandard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n< \t\tdictionary = &standard_dictionary;\n< \t} else if ( pixel_dict == 7 ) {\n< \t\tstandard_dictionary.charCount = 0x5f;\n< \t\tstandard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n< \t\tdictionary = &standard_dictionary;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return 0;\n> \tif (pixel_dict == 0) {\n> \t    if (pNewImage->pds[custom_dict].charCount == 0) {\n> \t        cgc_printf(\"[ERROR] Custom Dictionary $d does not exist\\n\", pixel_dict);\n> \t        return 0;\n> \t    }\n> \t    dictionary = &(pNewImage->pds[custom_dict]);\n> \t} else if (pixel_dict == 1) {\n> \t    standard_dictionary.charCount = 2;\n> \t    standard_dictionary.pixelArray = \" .\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 2) {\n> \t    standard_dictionary.charCount = 4;\n> \t    standard_dictionary.pixelArray = \" .|#\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 3) {\n> \t    standard_dictionary.charCount = 8;\n> \t    standard_dictionary.pixelArray = \" .|#@$()\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 4) {\n> \t    standard_dictionary.charCount = 16;\n> \t    standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 5) {\n> \t    standard_dictionary.charCount = 42;\n> \t    standard_dictionary.pixelArray = \" .|#@$()*HOEWM%&abcdefghijklmnopqrstuvwxyz\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 6) {\n> \t    standard_dictionary.charCount = 62;\n> \t    standard_dictionary.pixelArray = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n> \t    dictionary = &standard_dictionary;\n> \t} else if (pixel_dict == 7) {\n> \t    standard_dictionary.charCount = 95;\n> \t    standard_dictionary.pixelArray = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\n> \t    dictionary = &standard_dictionary;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n367c368,371\n< \t\txbits = (8 - ( ( pixel_count * pixel_bits) % 8 )) %8;\n---\n> \t\t//prophet generated patch\n> \t\tif (1)\n> \t\t    return 0;\n> \t\txbits = (8 - ((pixel_count * pixel_bits) % 8)) % 8;\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n290c291,295\n< \tnewFrame->image = cgc_malloc( length );\t\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tnewFrame->image = cgc_malloc(length);\n> \t\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n435,443c436,447\n< \tif ( xbits ) {\n< \t\tif ( cgc_readBits( pbs, xbits, &ybits) == 0 ) {\n< \t\t\tcgc_free(newFrame->image);\n< \t\t\tnewFrame->image = NULL;\n< \t\t\tcgc_free(newFrame);\n< \t\t\tnewFrame = NULL;\n< \t\t\tcgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n< \t\t\treturn 0;\n< \t\t}\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (xbits) {\n> \t    if (cgc_readBits(pbs, xbits, &ybits) == 0) {\n> \t        cgc_free(newFrame->image);\n> \t        newFrame->image = (0);\n> \t        cgc_free(newFrame);\n> \t        newFrame = (0);\n> \t        cgc_printf(\"[ERROR] Failed to read padding bits\\n\");\n> \t        return 0;\n> \t    }\n",
        "0a1\n> int __get_mutant(); int __is_neg(int, ...); int __abst_hole(); \n292,295c293,299\n< \tif ( newFrame->image == NULL ) {\n< \t\tcgc_free(newFrame);\n< \t\tnewFrame = NULL;\n< \t\treturn 0;\n---\n> \t//prophet generated patch\n> \tif (1)\n> \t    return -1;\n> \tif (newFrame->image == (0)) {\n> \t    cgc_free(newFrame);\n> \t    newFrame = (0);\n> \t    return 0;\n"
      ]
    }
  ],
  "compilations": 222,
  "failed_compilations": 0,
  "outcomes": {
    "sanity_check": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fault_localization": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p3": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p4": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p5": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p6": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p7": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p8": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p9": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p10": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p11": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p12": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p13": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p14": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p15": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p16": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p17": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p18": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p19": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p20": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 1
          }
        ]
      }
    },
    "45b8567f": {
      "compiles": [
        0
      ]
    },
    "a932be7a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "917e9abb": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b10280d0": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "73527649": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "dc4a8f2f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4e2becc3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7cc9fd46": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "06449bfe": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "63e73aa9": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "228a9463": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "16737815": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "71452943": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "bcf69f4a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fec24107": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7c45c6ab": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5ed4d936": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "52d13e28": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3c4aa8e5": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9b5408cb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ca109a26": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4481a101": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "54d94c08": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7066a983": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "468666c2": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3194c7ee": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f0f1489a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c5beac84": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "22fa4efc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6598ee4f": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "05467c2a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b6d81cfd": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a379266c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6841ffe4": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0c581c80": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "10a92828": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "31c23ded": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "96956cb5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6ecf30b0": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4d5a82b3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5d76433a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3b5f7d1c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ],
        "p2": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3b69729f": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "cf32e1a9": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "bdf7a9dc": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c973d5d4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b6337d15": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7bead582": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "bcdb38b7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "791fbde4": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f7def068": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ab39eb14": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4d2db3ff": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "22610465": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "cef6c28d": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d1660ca2": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d6ac2635": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "803f2658": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b58a1923": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ec8daf58": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e4757d96": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "31d62c8e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "233bd1eb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "eeea41e3": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "63d88208": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c1faecab": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "12818a0a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ee3af085": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5010b079": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "942f2577": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "583477c3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4b57a623": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1bd8b6fd": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "519b9a02": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ed280afe": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "787827b3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "162b73ca": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5efec374": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6e210b71": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "db0e90c9": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2f6f58ab": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a334814a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "89740c67": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7fcfecc8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c7a01e48": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5fbd23ad": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "743aaad5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2e4e5ce1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "56b87c00": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6aaa5500": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "177394c0": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "77170031": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "efdf94bf": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "aa9efeb6": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "57c0b8d0": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 6,
            "duration": 0
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "ecea131a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "8ac49b80": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8c17614d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "73cce0f3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fa2cf3e4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e20948e1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "58723c15": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "34855295": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "11ff9942": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9ea0515f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "29ab04bc": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d783cc48": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "65d08f6d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8162f2f8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7ffb830d": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c9101dbc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "20240c71": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "27a0aa0e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6e1ce3de": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1cdc6fea": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "bf3539d3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "77bf6b8d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "752d52e3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8c3f6736": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d40f084a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fdaacdaa": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c085241a": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1e4412b7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "23710c75": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "34cf4349": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7ebbafec": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c7bbe2ff": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d65194a4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0f7f83e8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0dab4530": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "bdb7139c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "47c6630a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0344e977": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d21fcd19": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2589c4d8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "18fc47a7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "11caba0f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2a2c7b6e": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2cbba237": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9c1eb255": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a1eb5398": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f0b9ff19": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7078ecb4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f1513159": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d66e198e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7394f427": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fcf1c981": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9b3451e8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "15218888": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2ee6d7b0": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "481529fe": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "35f069f2": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f6f1b781": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "009aa7a5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4da96401": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 15
          }
        ]
      }
    },
    "10460ec4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ed776b65": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b102d520": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3e14472a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "91992162": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "08534d2f": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c1d2ab90": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "22ce04af": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "cf75999f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "59a7c34a": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3d192c32": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9179c942": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d4ca0907": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0dfc2b89": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "133c90e6": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "01df9fa1": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3df2a8af": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "035cce7c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "059f8bd1": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e0463e5d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "0ccb0ed2": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "3c9b8c09": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f5085507": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7d4c1456": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b4ba1c72": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9e15ae20": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ddfdab1e": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "f81506fc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "8c2d006f": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5d345e9c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "fca37ef0": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d8dffdb1": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "4edc6c13": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b4c5e13c": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2704be0f": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ef0530c3": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "370eb0ee": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1a720188": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "a9a17620": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "09c194b5": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "96cdb152": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "41bd075c": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": [
          {
            "outcome": 0,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "6d436cdb": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "5ce377d8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c60bbadc": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "078b17fd": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "01ce1b53": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "7b7c5a8d": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "15942f35": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "befb9689": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "11018ed8": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "2f4287f9": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "1cd7be59": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "d010fb88": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "ad61dcfd": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "51279f99": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "db4e9a2b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "316d5e1b": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "b6cf34b4": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "557d69a2": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "e75fc520": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "c7600fc7": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "9d3d8974": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "aa432299": {
      "compiles": [
        0
      ],
      "pos_tests": {
        "p1": [
          {
            "outcome": 0,
            "code": 3,
            "duration": 15
          }
        ]
      },
      "neg_tests": {
        "n1": [
          {
            "outcome": 1,
            "code": 0,
            "duration": 0
          }
        ]
      }
    },
    "140bd218": {
      "compiles": [
        0
      ],
      "pos_tests": {},
      "neg_tests": {
        "n1": []
      }
    }
  },
  "neg_tests": 1,
  "pos_tests": 20,
  "passed_neg_tests": 157,
  "passed_pos_tests": 41,
  "failed_neg_tests": 63,
  "failed_pos_tests": 157,
  "duration": 3600.066894,
  "errors": [
    "Neg Processing: 21",
    "Processing: 0 : 1",
    "Processing: 1 : 2",
    "Processing: 2 : 3",
    "Processing: 3 : 4",
    "Processing: 4 : 5",
    "Processing: 5 : 6",
    "Processing: 6 : 7",
    "Processing: 7 : 8",
    "Processing: 8 : 9",
    "Processing: 9 : 10",
    "Processing: 10 : 11",
    "Processing: 11 : 12",
    "Processing: 12 : 13",
    "Processing: 13 : 14",
    "Processing: 14 : 15",
    "Processing: 15 : 16",
    "Processing: 16 : 17",
    "Processing: 17 : 18",
    "Processing: 18 : 19",
    "Processing: 19 : 20",
    "going to directory /tmp/Kali/CGC_Video_Format_Parser_and_Viewer_0/workdir/src",
    "warning: /tmp/Kali/CGC_Video_Format_Parser_and_Viewer_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/CGC_Video_Format_Parser_and_Viewer_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/CGC_Video_Format_Parser_and_Viewer_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/CGC_Video_Format_Parser_and_Viewer_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/CGC_Video_Format_Parser_and_Viewer_0/workdir/src: 'linker' input unused",
    "warning: /tmp/Kali/CGC_Video_Format_Parser_and_Viewer_0/workdir/src: 'linker' input unused",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: polls failed 1\u001b[0m",
    "\u001b[1;31m6\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Return code: 255",
    "\u001b[1;31mReturn code: 255\u001b[0m",
    "\u001b[1;31mWARNING: test(s) timed out\u001b[0m",
    "\u001b[1;31m3\u001b[0m",
    "Killed",
    "",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash",
    "Unexpected crash"
  ]
}